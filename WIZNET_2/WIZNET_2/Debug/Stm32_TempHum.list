
Stm32_TempHum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a204  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800a3a8  0800a3a8  0001a3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a740  0800a740  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800a740  0800a740  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a740  0800a740  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  20000208  0800a950  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  0800a950  00020c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001307d  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cba  00000000  00000000  000332b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00036c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ebe0  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d87b  00000000  00000000  00056450  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa8d5  00000000  00000000  00063ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e5a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  0010e61c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a38c 	.word	0x0800a38c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800a38c 	.word	0x0800a38c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2 }; // 8 sockets configuration  unsigned char n[10] ;
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <main+0xc4>)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca6:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000caa:	f000 fb73 	bl	8001394 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cae:	f000 f869 	bl	8000d84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cb2:	f000 f981 	bl	8000fb8 <MX_GPIO_Init>
	MX_SPI3_Init();
 8000cb6:	f000 f941 	bl	8000f3c <MX_SPI3_Init>
	MX_I2C1_Init();
 8000cba:	f000 f8c1 	bl	8000e40 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000cbe:	f000 f8ff 	bl	8000ec0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/*
	 * Wiznet İnitiation
	 */
	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);		//WIZNET CS Configuration
 8000cc2:	4927      	ldr	r1, [pc, #156]	; (8000d60 <main+0xc8>)
 8000cc4:	4827      	ldr	r0, [pc, #156]	; (8000d64 <main+0xcc>)
 8000cc6:	f004 fad1 	bl	800526c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);			//WIZNET SPI Configuration
 8000cca:	4927      	ldr	r1, [pc, #156]	; (8000d68 <main+0xd0>)
 8000ccc:	4827      	ldr	r0, [pc, #156]	; (8000d6c <main+0xd4>)
 8000cce:	f004 faf1 	bl	80052b4 <reg_wizchip_spi_cbfunc>
	wizchip_init(bufSize, bufSize);					//WIZNET initiation
 8000cd2:	463a      	mov	r2, r7
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fba1 	bl	8005420 <wizchip_init>
	client_config();								//WIZNET TCP client  configuration
 8000cde:	f005 fd37 	bl	8006750 <client_config>
	timeout_config();     							//WIZNET timeout configuration
 8000ce2:	f005 fd1f 	bl	8006724 <timeout_config>

	/*
	 * LCD initiation
	 */
	HY2004A8_Init(20, 4);  							//LCD initiation
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	2014      	movs	r0, #20
 8000cea:	f005 f9ab 	bl	8006044 <HY2004A8_Init>
	HY2004A8_Clear();								//LCD display clear
 8000cee:	f005 fa0b 	bl	8006108 <HY2004A8_Clear>

	/*
	 * Flash İnitiation
	 */
	FlashInit(&Mem_Control);						//Flash initiation
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <main+0xd8>)
 8000cf4:	f004 fd0d 	bl	8005712 <FlashInit>
	Accumulation_Init(&sht21_1);					//Start sensor data accumulation
 8000cf8:	481e      	ldr	r0, [pc, #120]	; (8000d74 <main+0xdc>)
 8000cfa:	f005 f903 	bl	8005f04 <Accumulation_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		Connect_Server(&w5500_1);  //connect server
 8000cfe:	481e      	ldr	r0, [pc, #120]	; (8000d78 <main+0xe0>)
 8000d00:	f005 fd7e 	bl	8006800 <Connect_Server>

		Temp_Measure(&sht21_1);    // Temperature Measurement
 8000d04:	481b      	ldr	r0, [pc, #108]	; (8000d74 <main+0xdc>)
 8000d06:	f005 fcb0 	bl	800666a <Temp_Measure>

		Hum_Measure(&sht21_1);     // Humidity Measurement
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0xdc>)
 8000d0c:	f005 fcbd 	bl	800668a <Hum_Measure>

		Send_Lcd(&sht21_1);		   // Send data to lcd
 8000d10:	4818      	ldr	r0, [pc, #96]	; (8000d74 <main+0xdc>)
 8000d12:	f005 fb67 	bl	80063e4 <Send_Lcd>


		send(w5500_1.socket_num, (uint8_t*) sht21_1.data_T,(uint16_t) (strlen(sht21_1.data_T))); // send tem data to server
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <main+0xe0>)
 8000d18:	785c      	ldrb	r4, [r3, #1]
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <main+0xe4>)
 8000d1c:	f7ff fa60 	bl	80001e0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4915      	ldr	r1, [pc, #84]	; (8000d7c <main+0xe4>)
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f004 f959 	bl	8004fe0 <send>
		HAL_Delay(250);
 8000d2e:	20fa      	movs	r0, #250	; 0xfa
 8000d30:	f000 fb96 	bl	8001460 <HAL_Delay>
		send(w5500_1.socket_num, (uint8_t*) sht21_1.data_H,(uint16_t) (strlen(sht21_1.data_H))); // send hum data to server
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <main+0xe0>)
 8000d36:	785c      	ldrb	r4, [r3, #1]
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <main+0xe8>)
 8000d3a:	f7ff fa51 	bl	80001e0 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	490e      	ldr	r1, [pc, #56]	; (8000d80 <main+0xe8>)
 8000d46:	4620      	mov	r0, r4
 8000d48:	f004 f94a 	bl	8004fe0 <send>


		Close_Server(&w5500_1); 								//close server
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <main+0xe0>)
 8000d4e:	f005 fd37 	bl	80067c0 <Close_Server>

		Send_Flash(&Mem_Control, &sht21_1); 					// send data to flash
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <main+0xdc>)
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <main+0xd8>)
 8000d56:	f005 f95b 	bl	8006010 <Send_Flash>
		Connect_Server(&w5500_1);  //connect server
 8000d5a:	e7d0      	b.n	8000cfe <main+0x66>
 8000d5c:	0800a3a8 	.word	0x0800a3a8
 8000d60:	080066c5 	.word	0x080066c5
 8000d64:	080066ad 	.word	0x080066ad
 8000d68:	08006701 	.word	0x08006701
 8000d6c:	080066dd 	.word	0x080066dd
 8000d70:	2000041c 	.word	0x2000041c
 8000d74:	20000aa8 	.word	0x20000aa8
 8000d78:	20000a94 	.word	0x20000a94
 8000d7c:	20000ab8 	.word	0x20000ab8
 8000d80:	20000acc 	.word	0x20000acc

08000d84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a6      	sub	sp, #152	; 0x98
 8000d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 fdaa 	bl	80068ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2258      	movs	r2, #88	; 0x58
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fd9c 	bl	80068ec <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fad8 	bl	8002398 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x6e>
		Error_Handler();
 8000dee:	f000 f951 	bl	8001094 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 f9d8 	bl	80031c4 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9a>
		Error_Handler();
 8000e1a:	f000 f93b 	bl	8001094 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fbb1 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xb4>
		Error_Handler();
 8000e34:	f000 f92e 	bl	8001094 <Error_Handler>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3798      	adds	r7, #152	; 0x98
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f000 fd9a 	bl	80019b4 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000e86:	f000 f905 	bl	8001094 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f001 f9eb 	bl	8002268 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000e98:	f000 f8fc 	bl	8001094 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f001 fa2d 	bl	80022fe <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000eaa:	f000 f8f3 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000364 	.word	0x20000364
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	2000090e 	.word	0x2000090e

08000ec0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <MX_SPI1_Init+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000eda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ede:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000ef6:	2238      	movs	r2, #56	; 0x38
 8000ef8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f0e:	2207      	movs	r2, #7
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_SPI1_Init+0x74>)
 8000f20:	f002 fd54 	bl	80039cc <HAL_SPI_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000f2a:	f000 f8b3 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000092c 	.word	0x2000092c
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_SPI3_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f5a:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f96:	2208      	movs	r2, #8
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_SPI3_Init+0x74>)
 8000f9c:	f002 fd16 	bl	80039cc <HAL_SPI_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SPI3_Init+0x6e>
		Error_Handler();
 8000fa6:	f000 f875 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200003b8 	.word	0x200003b8
 8000fb4:	40003c00 	.word	0x40003c00

08000fb8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0xd4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	; (800108c <MX_GPIO_Init+0xd4>)
 8000fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_GPIO_Init+0xd4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_GPIO_Init+0xd4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a28      	ldr	r2, [pc, #160]	; (800108c <MX_GPIO_Init+0xd4>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_GPIO_Init+0xd4>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xd4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_GPIO_Init+0xd4>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_GPIO_Init+0xd4>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_GPIO_Init+0xd4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_GPIO_Init+0xd4>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_GPIO_Init+0xd4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, FLASH_SPI_CS_Pin | LCD_EN_Pin | LCD_RS_Pin,
 800102e:	2200      	movs	r2, #0
 8001030:	2107      	movs	r1, #7
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f000 fca5 	bl	8001984 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800103a:	2200      	movs	r2, #0
 800103c:	f240 4171 	movw	r1, #1137	; 0x471
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_GPIO_Init+0xd8>)
 8001042:	f000 fc9f 	bl	8001984 <HAL_GPIO_WritePin>
			WIZNET_CS_Pin | LCD_D7_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : FLASH_SPI_CS_Pin LCD_EN_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = FLASH_SPI_CS_Pin | LCD_EN_Pin | LCD_RS_Pin;
 8001046:	2307      	movs	r3, #7
 8001048:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f000 fb06 	bl	8001670 <HAL_GPIO_Init>

	/*Configure GPIO pins : WIZNET_CS_Pin LCD_D7_Pin LCD_D4_Pin LCD_D5_Pin
	 LCD_D6_Pin */
	GPIO_InitStruct.Pin = WIZNET_CS_Pin | LCD_D7_Pin | LCD_D4_Pin | LCD_D5_Pin
 8001064:	f240 4371 	movw	r3, #1137	; 0x471
 8001068:	617b      	str	r3, [r7, #20]
			| LCD_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xd8>)
 800107e:	f000 faf7 	bl	8001670 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x44>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x44>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010da:	2007      	movs	r0, #7
 80010dc:	f000 fa94 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_I2C_MspInit+0x7c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d128      	bne.n	8001160 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_I2C_MspInit+0x80>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_I2C_MspInit+0x80>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_I2C_MspInit+0x80>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <HAL_I2C_MspInit+0x84>)
 8001144:	f000 fa94 	bl	8001670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_I2C_MspInit+0x80>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_I2C_MspInit+0x80>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	61d3      	str	r3, [r2, #28]
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_I2C_MspInit+0x80>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40005400 	.word	0x40005400
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <HAL_SPI_MspInit+0xdc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d129      	bne.n	80011ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 800119c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23e0      	movs	r3, #224	; 0xe0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f000 fa44 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011e8:	e02d      	b.n	8001246 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d128      	bne.n	8001246 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	61d3      	str	r3, [r2, #28]
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 8001212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001216:	6153      	str	r3, [r2, #20]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001224:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001236:	2306      	movs	r3, #6
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <HAL_SPI_MspInit+0xe8>)
 8001242:	f000 fa15 	bl	8001670 <HAL_GPIO_Init>
}
 8001246:	bf00      	nop
 8001248:	3730      	adds	r7, #48	; 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40013000 	.word	0x40013000
 8001254:	40021000 	.word	0x40021000
 8001258:	40003c00 	.word	0x40003c00
 800125c:	48000800 	.word	0x48000800

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8b4 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <_sbrk+0x50>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x16>
		heap_end = &end;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <_sbrk+0x50>)
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <_sbrk+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <_sbrk+0x50>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <_sbrk+0x50>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	466a      	mov	r2, sp
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d907      	bls.n	80012f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012e6:	f005 fad7 	bl	8006898 <__errno>
 80012ea:	4602      	mov	r2, r0
 80012ec:	230c      	movs	r3, #12
 80012ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	e006      	b.n	8001304 <_sbrk+0x48>
	}

	heap_end += incr;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <_sbrk+0x50>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a03      	ldr	r2, [pc, #12]	; (800130c <_sbrk+0x50>)
 8001300:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000224 	.word	0x20000224
 8001310:	20000c00 	.word	0x20000c00

08001314 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x28>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x28>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <SystemInit+0x28>)
 800132a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132e:	609a      	str	r2, [r3, #8]
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001344:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800134c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001354:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001356:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
	ldr	r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopForever+0x12>)
	b	LoopFillZerobss
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800135e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <LoopForever+0x16>)
	cmp	r2, r3
 8001366:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136a:	f7ff ffd3 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f005 fa99 	bl	80068a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff fc91 	bl	8000c98 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001378:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800137c:	0800a748 	.word	0x0800a748
	ldr	r0, =_sdata
 8001380:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001384:	20000208 	.word	0x20000208
	ldr	r2, =_sbss
 8001388:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 800138c:	20000c00 	.word	0x20000c00

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f92f 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fe78 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f939 	bl	8001656 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f90f 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000bf8 	.word	0x20000bf8

08001448 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;  
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000bf8 	.word	0x20000bf8

08001460 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_Delay+0x40>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff47 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff5c 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffb0 	bl	80015c4 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e160      	b.n	8001942 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2101      	movs	r1, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8152 	beq.w	800193c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x38>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b12      	cmp	r3, #18
 80016a6:	d123      	bne.n	80016f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	08da      	lsrs	r2, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3208      	adds	r2, #8
 80016b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	6939      	ldr	r1, [r7, #16]
 80016ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0203 	and.w	r2, r3, #3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d00b      	beq.n	8001744 <HAL_GPIO_Init+0xd4>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001738:	2b11      	cmp	r3, #17
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f003 0201 	and.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80ac 	beq.w	800193c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <HAL_GPIO_Init+0x2f0>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_GPIO_Init+0x2f0>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_GPIO_Init+0x2f0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017fc:	4a59      	ldr	r2, [pc, #356]	; (8001964 <HAL_GPIO_Init+0x2f4>)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001826:	d025      	beq.n	8001874 <HAL_GPIO_Init+0x204>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d01f      	beq.n	8001870 <HAL_GPIO_Init+0x200>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_GPIO_Init+0x2fc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d019      	beq.n	800186c <HAL_GPIO_Init+0x1fc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a4d      	ldr	r2, [pc, #308]	; (8001970 <HAL_GPIO_Init+0x300>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1f8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <HAL_GPIO_Init+0x304>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1f4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_GPIO_Init+0x308>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1f0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_GPIO_Init+0x30c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1ec>
 8001858:	2306      	movs	r3, #6
 800185a:	e00c      	b.n	8001876 <HAL_GPIO_Init+0x206>
 800185c:	2307      	movs	r3, #7
 800185e:	e00a      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001860:	2305      	movs	r3, #5
 8001862:	e008      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001864:	2304      	movs	r3, #4
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001868:	2303      	movs	r3, #3
 800186a:	e004      	b.n	8001876 <HAL_GPIO_Init+0x206>
 800186c:	2302      	movs	r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_GPIO_Init+0x206>
 8001874:	2300      	movs	r3, #0
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001886:	4937      	ldr	r1, [pc, #220]	; (8001964 <HAL_GPIO_Init+0x2f4>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_GPIO_Init+0x310>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018b8:	4a31      	ldr	r2, [pc, #196]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018e2:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800190c:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_GPIO_Init+0x310>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_GPIO_Init+0x310>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_GPIO_Init+0x310>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f ae97 	bne.w	8001680 <HAL_GPIO_Init+0x10>
  }
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	48000c00 	.word	0x48000c00
 8001974:	48001000 	.word	0x48001000
 8001978:	48001400 	.word	0x48001400
 800197c:	48001800 	.word	0x48001800
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e081      	b.n	8001aca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fb86 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d104      	bne.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69d9      	ldr	r1, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	f040 80da 	bne.w	8001caa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x30>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0d3      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fc9c 	bl	8001448 <HAL_GetTick>
 8001b10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2319      	movs	r3, #25
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9e6 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0be      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	893a      	ldrh	r2, [r7, #8]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d90e      	bls.n	8001b7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fb48 	bl	800220c <I2C_TransferConfig>
 8001b7c:	e06c      	b.n	8001c58 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fb37 	bl	800220c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b9e:	e05b      	b.n	8001c58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	6a39      	ldr	r1, [r7, #32]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f9e3 	bl	8001f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e07b      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d034      	beq.n	8001c58 <HAL_I2C_Master_Transmit+0x184>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d130      	bne.n	8001c58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f975 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e04d      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d90e      	bls.n	8001c38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	22ff      	movs	r2, #255	; 0xff
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	8979      	ldrh	r1, [r7, #10]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 faeb 	bl	800220c <I2C_TransferConfig>
 8001c36:	e00f      	b.n	8001c58 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	8979      	ldrh	r1, [r7, #10]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fada 	bl	800220c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d19e      	bne.n	8001ba0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9c2 	bl	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e01a      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	80002000 	.word	0x80002000
 8001cb8:	fe00e800 	.word	0xfe00e800

08001cbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	817b      	strh	r3, [r7, #10]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	f040 80db 	bne.w	8001e94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_I2C_Master_Receive+0x30>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0d4      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fba8 	bl	8001448 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2319      	movs	r3, #25
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f8f2 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0bf      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2222      	movs	r2, #34	; 0x22
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2210      	movs	r2, #16
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	893a      	ldrh	r2, [r7, #8]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2bff      	cmp	r3, #255	; 0xff
 8001d46:	d90e      	bls.n	8001d66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	8979      	ldrh	r1, [r7, #10]
 8001d56:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fa54 	bl	800220c <I2C_TransferConfig>
 8001d64:	e06d      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fa43 	bl	800220c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d86:	e05c      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6a39      	ldr	r1, [r7, #32]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f96b 	bl	8002068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e07c      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d034      	beq.n	8001e42 <HAL_I2C_Master_Receive+0x186>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d130      	bne.n	8001e42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f880 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e04d      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2bff      	cmp	r3, #255	; 0xff
 8001e02:	d90e      	bls.n	8001e22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	22ff      	movs	r2, #255	; 0xff
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f9f6 	bl	800220c <I2C_TransferConfig>
 8001e20:	e00f      	b.n	8001e42 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f9e5 	bl	800220c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d19d      	bne.n	8001d88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	6a39      	ldr	r1, [r7, #32]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f8cd 	bl	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e01a      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_I2C_Master_Receive+0x1e8>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	80002400 	.word	0x80002400
 8001ea4:	fe00e800 	.word	0xfe00e800

08001ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d103      	bne.n	8001ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d007      	beq.n	8001ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	619a      	str	r2, [r3, #24]
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	e022      	b.n	8001f48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d01e      	beq.n	8001f48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff fa9d 	bl	8001448 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d113      	bne.n	8001f48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00f      	b.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d0cd      	beq.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f7c:	e02c      	b.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8dc 	bl	8002140 <I2C_IsAcknowledgeFailed>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e02a      	b.n	8001fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d01e      	beq.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	f7ff fa55 	bl	8001448 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d113      	bne.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e007      	b.n	8001fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d1cb      	bne.n	8001f7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ffc:	e028      	b.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f89c 	bl	8002140 <I2C_IsAcknowledgeFailed>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e026      	b.n	8002060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7ff fa19 	bl	8001448 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d113      	bne.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e007      	b.n	8002060 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	d1cf      	bne.n	8001ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002074:	e055      	b.n	8002122 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f860 	bl	8002140 <I2C_IsAcknowledgeFailed>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e053      	b.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d129      	bne.n	80020ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d105      	bne.n	80020b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e03f      	b.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e022      	b.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ec:	f7ff f9ac 	bl	8001448 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d302      	bcc.n	8002102 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e007      	b.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d1a2      	bne.n	8002076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	fe00e800 	.word	0xfe00e800

08002140 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d151      	bne.n	80021fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215a:	e022      	b.n	80021a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d01e      	beq.n	80021a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002164:	f7ff f970 	bl	8001448 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	429a      	cmp	r2, r3
 8002172:	d302      	bcc.n	800217a <I2C_IsAcknowledgeFailed+0x3a>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d113      	bne.n	80021a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02e      	b.n	8002200 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d1d5      	bne.n	800215c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2210      	movs	r2, #16
 80021b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fe71 	bl	8001ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <I2C_IsAcknowledgeFailed+0xc8>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	fe00e800 	.word	0xfe00e800

0800220c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	4613      	mov	r3, r2
 800221c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <I2C_TransferConfig+0x58>)
 800222e:	430b      	orrs	r3, r1
 8002230:	43db      	mvns	r3, r3
 8002232:	ea02 0103 	and.w	r1, r2, r3
 8002236:	897b      	ldrh	r3, [r7, #10]
 8002238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800223c:	7a7b      	ldrb	r3, [r7, #9]
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	03ff63ff 	.word	0x03ff63ff

08002268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	d138      	bne.n	80022f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002288:	2302      	movs	r3, #2
 800228a:	e032      	b.n	80022f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	d139      	bne.n	8002388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800231e:	2302      	movs	r3, #2
 8002320:	e033      	b.n	800238a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2224      	movs	r2, #36	; 0x24
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800239e:	af00      	add	r7, sp, #0
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f000 bf01 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8160 	beq.w	8002682 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023c2:	4bae      	ldr	r3, [pc, #696]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ce:	4bab      	ldr	r3, [pc, #684]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d159      	bne.n	800248e <HAL_RCC_OscConfig+0xf6>
 80023da:	4ba8      	ldr	r3, [pc, #672]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d152      	bne.n	800248e <HAL_RCC_OscConfig+0xf6>
 80023e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_RCC_OscConfig+0x82>
 8002414:	4b99      	ldr	r3, [pc, #612]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0xae>
 800241a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800242e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002432:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002436:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800244a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800244e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800245a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800245e:	fab2 f282 	clz	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f042 0220 	orr.w	r2, r2, #32
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8102 	beq.w	8002680 <HAL_RCC_OscConfig+0x2e8>
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80fc 	bne.w	8002680 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f000 be93 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x110>
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e030      	b.n	800250a <HAL_RCC_OscConfig+0x172>
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x134>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01e      	b.n	800250a <HAL_RCC_OscConfig+0x172>
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x15a>
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a64      	ldr	r2, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x172>
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b5f      	ldr	r3, [pc, #380]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a5e      	ldr	r2, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d059      	beq.n	80025c8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe ff98 	bl	8001448 <HAL_GetTick>
 8002518:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251e:	f7fe ff93 	bl	8001448 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d902      	bls.n	8002534 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	f000 be40 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002538:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002548:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_RCC_OscConfig+0x1ce>
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x1fa>
 8002566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800257a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002582:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002596:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800259a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800259e:	fa92 f2a2 	rbit	r2, r2
 80025a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80025a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f002 021f 	and.w	r2, r2, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ab      	beq.n	800251e <HAL_RCC_OscConfig+0x186>
 80025c6:	e05c      	b.n	8002682 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff3e 	bl	8001448 <HAL_GetTick>
 80025cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d2:	f7fe ff39 	bl	8001448 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d902      	bls.n	80025e8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f000 bde6 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
 80025e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0x282>
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x2ae>
 800261a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800262e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002632:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002636:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_RCC_OscConfig+0x2e4>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800264e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002652:	fa92 f2a2 	rbit	r2, r2
 8002656:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800265a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f042 0220 	orr.w	r2, r2, #32
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ab      	bne.n	80025d2 <HAL_RCC_OscConfig+0x23a>
 800267a:	e002      	b.n	8002682 <HAL_RCC_OscConfig+0x2ea>
 800267c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8170 	beq.w	8002972 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002692:	4bd0      	ldr	r3, [pc, #832]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800269e:	4bcd      	ldr	r3, [pc, #820]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d16d      	bne.n	8002786 <HAL_RCC_OscConfig+0x3ee>
 80026aa:	4bca      	ldr	r3, [pc, #808]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b6:	d166      	bne.n	8002786 <HAL_RCC_OscConfig+0x3ee>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80026ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0x350>
 80026e2:	4bbc      	ldr	r3, [pc, #752]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	e013      	b.n	8002710 <HAL_RCC_OscConfig+0x378>
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002700:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800270c:	4bb1      	ldr	r3, [pc, #708]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2202      	movs	r2, #2
 8002712:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002716:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002722:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_RCC_OscConfig+0x3ba>
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d002      	beq.n	8002752 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f000 bd31 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4ba0      	ldr	r3, [pc, #640]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	21f8      	movs	r1, #248	; 0xf8
 8002762:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800276a:	fa91 f1a1 	rbit	r1, r1
 800276e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002772:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002776:	fab1 f181 	clz	r1, r1
 800277a:	b2c9      	uxtb	r1, r1
 800277c:	408b      	lsls	r3, r1
 800277e:	4995      	ldr	r1, [pc, #596]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002784:	e0f5      	b.n	8002972 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8085 	beq.w	800289c <HAL_RCC_OscConfig+0x504>
 8002792:	2301      	movs	r3, #1
 8002794:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80027a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fe43 	bl	8001448 <HAL_GetTick>
 80027c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe fe3e 	bl	8001448 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d902      	bls.n	80027de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f000 bceb 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x476>
 8002808:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e013      	b.n	8002836 <HAL_RCC_OscConfig+0x49e>
 800280e:	2302      	movs	r3, #2
 8002810:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002826:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002832:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2202      	movs	r2, #2
 8002838:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800283c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002848:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f042 0220 	orr.w	r2, r2, #32
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0af      	beq.n	80027c8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	21f8      	movs	r1, #248	; 0xf8
 8002878:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002880:	fa91 f1a1 	rbit	r1, r1
 8002884:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002888:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800288c:	fab1 f181 	clz	r1, r1
 8002890:	b2c9      	uxtb	r1, r1
 8002892:	408b      	lsls	r3, r1
 8002894:	494f      	ldr	r1, [pc, #316]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
 800289a:	e06a      	b.n	8002972 <HAL_RCC_OscConfig+0x5da>
 800289c:	2301      	movs	r3, #1
 800289e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80028ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	461a      	mov	r2, r3
 80028c4:	2300      	movs	r3, #0
 80028c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fdbe 	bl	8001448 <HAL_GetTick>
 80028cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fdb9 	bl	8001448 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f000 bc66 	b.w	80031b4 <HAL_RCC_OscConfig+0xe1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x580>
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e013      	b.n	8002940 <HAL_RCC_OscConfig+0x5a8>
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002930:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0x63c>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2202      	movs	r2, #2
 8002942:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002946:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002952:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1af      	bne.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80da 	beq.w	8002b36 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d069      	beq.n	8002a60 <HAL_RCC_OscConfig+0x6c8>
 800298c:	2301      	movs	r3, #1
 800298e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800299e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x640>)
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	461a      	mov	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fd47 	bl	8001448 <HAL_GetTick>
 80029ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e00d      	b.n	80029dc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fd42 	bl	8001448 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d905      	bls.n	80029dc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e3ef      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 80029d4:	40021000 	.word	0x40021000
 80029d8:	10908120 	.word	0x10908120
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	4ba4      	ldr	r3, [pc, #656]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a28:	2102      	movs	r1, #2
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f1a3 	rbit	r1, r3
 8002a36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a3a:	6019      	str	r1, [r3, #0]
  return result;
 8002a3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0b0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x628>
 8002a5e:	e06a      	b.n	8002b36 <HAL_RCC_OscConfig+0x79e>
 8002a60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fa93 f2a3 	rbit	r2, r3
 8002a72:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a76:	601a      	str	r2, [r3, #0]
  return result;
 8002a78:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b8c      	ldr	r3, [pc, #560]	; (8002cb8 <HAL_RCC_OscConfig+0x920>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2300      	movs	r3, #0
 8002a90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fcd9 	bl	8001448 <HAL_GetTick>
 8002a96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fcd4 	bl	8001448 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e381      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002ab0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002acc:	2202      	movs	r2, #2
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002af6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b00:	2102      	movs	r1, #2
 8002b02:	6019      	str	r1, [r3, #0]
 8002b04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	fa93 f1a3 	rbit	r1, r3
 8002b0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b12:	6019      	str	r1, [r3, #0]
  return result;
 8002b14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1b2      	bne.n	8002a9c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8157 	beq.w	8002df4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d112      	bne.n	8002b7e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	61d3      	str	r3, [r2, #28]
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <HAL_RCC_OscConfig+0x924>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCC_OscConfig+0x924>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_RCC_OscConfig+0x924>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fc57 	bl	8001448 <HAL_GetTick>
 8002b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe fc52 	bl	8001448 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e2ff      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x924>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x840>
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a39      	ldr	r2, [pc, #228]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	e02f      	b.n	8002c38 <HAL_RCC_OscConfig+0x8a0>
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x864>
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a33      	ldr	r2, [pc, #204]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0x8a0>
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x888>
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x8a0>
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06a      	beq.n	8002d18 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fc01 	bl	8001448 <HAL_GetTick>
 8002c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fbfc 	bl	8001448 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e2a7      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002c64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c92:	601a      	str	r2, [r3, #0]
  return result;
 8002c94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d108      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x928>
 8002cae:	4b01      	ldr	r3, [pc, #4]	; (8002cb4 <HAL_RCC_OscConfig+0x91c>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	e013      	b.n	8002cdc <HAL_RCC_OscConfig+0x944>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	10908120 	.word	0x10908120
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4bc0      	ldr	r3, [pc, #768]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	6011      	str	r1, [r2, #0]
 8002ce4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	fa92 f1a2 	rbit	r1, r2
 8002cee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cf2:	6011      	str	r1, [r2, #0]
  return result;
 8002cf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f002 021f 	and.w	r2, r2, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d09a      	beq.n	8002c4c <HAL_RCC_OscConfig+0x8b4>
 8002d16:	e063      	b.n	8002de0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7fe fb96 	bl	8001448 <HAL_GetTick>
 8002d1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fb91 	bl	8001448 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e23c      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002d3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d3e:	2202      	movs	r2, #2
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f2a3 	rbit	r2, r3
 8002d4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d68:	601a      	str	r2, [r3, #0]
  return result;
 8002d6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x9f2>
 8002d84:	4b95      	ldr	r3, [pc, #596]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	e00d      	b.n	8002da6 <HAL_RCC_OscConfig+0xa0e>
 8002d8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d8e:	2202      	movs	r2, #2
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	4b8e      	ldr	r3, [pc, #568]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002daa:	2102      	movs	r1, #2
 8002dac:	6011      	str	r1, [r2, #0]
 8002dae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	fa92 f1a2 	rbit	r1, r2
 8002db8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dbc:	6011      	str	r1, [r2, #0]
  return result;
 8002dbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1a0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b7c      	ldr	r3, [pc, #496]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a7b      	ldr	r2, [pc, #492]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 81d9 	beq.w	80031b2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e00:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	f000 81a6 	beq.w	800315a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	f040 811e 	bne.w	8003056 <HAL_RCC_OscConfig+0xcbe>
 8002e1a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e32:	601a      	str	r2, [r3, #0]
  return result;
 8002e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fafa 	bl	8001448 <HAL_GetTick>
 8002e54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe faf5 	bl	8001448 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1a2      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002e6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f2a3 	rbit	r2, r3
 8002e82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e86:	601a      	str	r2, [r3, #0]
  return result;
 8002e88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xb10>
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	e01b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xb48>
 8002ea8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ee4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	fa92 f1a2 	rbit	r1, r2
 8002ef4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ef8:	6011      	str	r1, [r2, #0]
  return result;
 8002efa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	fab2 f282 	clz	r2, r2
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f042 0220 	orr.w	r2, r2, #32
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f002 021f 	and.w	r2, r2, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f202 	lsl.w	r2, r1, r2
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d19e      	bne.n	8002e5a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	f023 020f 	bic.w	r2, r3, #15
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	492c      	ldr	r1, [pc, #176]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a19      	ldr	r1, [r3, #32]
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	4925      	ldr	r1, [pc, #148]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
 8002f4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	fa93 f2a3 	rbit	r2, r3
 8002f60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f64:	601a      	str	r2, [r3, #0]
  return result;
 8002f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f6a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fa61 	bl	8001448 <HAL_GetTick>
 8002f86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8a:	e009      	b.n	8002fa0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fa5c 	bl	8001448 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e109      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 8002fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fb8:	601a      	str	r2, [r3, #0]
  return result;
 8002fba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc48>
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <HAL_RCC_OscConfig+0xc44>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	e01e      	b.n	8003018 <HAL_RCC_OscConfig+0xc80>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0xe28>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800301c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003020:	6011      	str	r1, [r2, #0]
 8003022:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fa92 f1a2 	rbit	r1, r2
 800302c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003030:	6011      	str	r1, [r2, #0]
  return result;
 8003032:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f042 0220 	orr.w	r2, r2, #32
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d09b      	beq.n	8002f8c <HAL_RCC_OscConfig+0xbf4>
 8003054:	e0ad      	b.n	80031b2 <HAL_RCC_OscConfig+0xe1a>
 8003056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800305a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800306e:	601a      	str	r2, [r3, #0]
  return result;
 8003070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003074:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	461a      	mov	r2, r3
 8003088:	2300      	movs	r3, #0
 800308a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe f9dc 	bl	8001448 <HAL_GetTick>
 8003090:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	e009      	b.n	80030aa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe f9d7 	bl	8001448 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e084      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
 80030aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c2:	601a      	str	r2, [r3, #0]
  return result;
 80030c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0xd4c>
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0xe28>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e01b      	b.n	800311c <HAL_RCC_OscConfig+0xd84>
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f107 0320 	add.w	r3, r7, #32
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_RCC_OscConfig+0xe28>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f107 0214 	add.w	r2, r7, #20
 8003120:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003124:	6011      	str	r1, [r2, #0]
 8003126:	f107 0214 	add.w	r2, r7, #20
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	fa92 f1a2 	rbit	r1, r2
 8003130:	f107 0210 	add.w	r2, r7, #16
 8003134:	6011      	str	r1, [r2, #0]
  return result;
 8003136:	f107 0210 	add.w	r2, r7, #16
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f042 0220 	orr.w	r2, r2, #32
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f002 021f 	and.w	r2, r2, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d19e      	bne.n	8003096 <HAL_RCC_OscConfig+0xcfe>
 8003158:	e02b      	b.n	80031b2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e025      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_RCC_OscConfig+0xe28>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCC_OscConfig+0xe28>)
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003178:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800317c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d111      	bne.n	80031ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800318a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800318e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003198:	429a      	cmp	r2, r3
 800319a:	d108      	bne.n	80031ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800319c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b09e      	sub	sp, #120	; 0x78
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e162      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b90      	ldr	r3, [pc, #576]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b8d      	ldr	r3, [pc, #564]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	498b      	ldr	r1, [pc, #556]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b89      	ldr	r3, [pc, #548]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e14a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b82      	ldr	r3, [pc, #520]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	497f      	ldr	r1, [pc, #508]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80dc 	beq.w	80033f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d13c      	bne.n	80032ba <HAL_RCC_ClockConfig+0xf6>
 8003240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003244:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HAL_RCC_ClockConfig+0xa6>
 8003264:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e00f      	b.n	800328a <HAL_RCC_ClockConfig+0xc6>
 800326a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	667b      	str	r3, [r7, #100]	; 0x64
 8003278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
 800327e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003286:	4b67      	ldr	r3, [pc, #412]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003292:	fa92 f2a2 	rbit	r2, r2
 8003296:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800329a:	fab2 f282 	clz	r2, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f002 021f 	and.w	r2, r2, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f202 	lsl.w	r2, r1, r2
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d17b      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0f3      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d13c      	bne.n	800333c <HAL_RCC_ClockConfig+0x178>
 80032c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_ClockConfig+0x128>
 80032e6:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	e00f      	b.n	800330c <HAL_RCC_ClockConfig+0x148>
 80032ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
 80032fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003308:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003310:	63ba      	str	r2, [r7, #56]	; 0x38
 8003312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800331a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d13a      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b2      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
 800333c:	2302      	movs	r3, #2
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_RCC_ClockConfig+0x1a0>
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	e00d      	b.n	8003380 <HAL_RCC_ClockConfig+0x1bc>
 8003364:	2302      	movs	r3, #2
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2202      	movs	r2, #2
 8003382:	61ba      	str	r2, [r7, #24]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	fa92 f2a2 	rbit	r2, r2
 800338a:	617a      	str	r2, [r7, #20]
  return result;
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	fab2 f282 	clz	r2, r2
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f042 0220 	orr.w	r2, r2, #32
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	f002 021f 	and.w	r2, r2, #31
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e079      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	491a      	ldr	r1, [pc, #104]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe f842 	bl	8001448 <HAL_GetTick>
 80033c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe f83e 	bl	8001448 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e061      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d214      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	4906      	ldr	r1, [pc, #24]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <HAL_RCC_ClockConfig+0x25c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e040      	b.n	80034a2 <HAL_RCC_ClockConfig+0x2de>
 8003420:	40022000 	.word	0x40022000
 8003424:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_ClockConfig+0x2e8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	491a      	ldr	r1, [pc, #104]	; (80034ac <HAL_RCC_ClockConfig+0x2e8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <HAL_RCC_ClockConfig+0x2e8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4912      	ldr	r1, [pc, #72]	; (80034ac <HAL_RCC_ClockConfig+0x2e8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003466:	f000 f829 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 800346a:	4601      	mov	r1, r0
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCC_ClockConfig+0x2e8>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	22f0      	movs	r2, #240	; 0xf0
 8003476:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	fa92 f2a2 	rbit	r2, r2
 800347e:	60fa      	str	r2, [r7, #12]
  return result;
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	40d3      	lsrs	r3, r2
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x2ec>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	fa21 f303 	lsr.w	r3, r1, r3
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_RCC_ClockConfig+0x2f0>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x2f4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd ff90 	bl	80013c0 <HAL_InitTick>
  
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3778      	adds	r7, #120	; 0x78
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800a3f0 	.word	0x0800a3f0
 80034b4:	20000000 	.word	0x20000000
 80034b8:	20000004 	.word	0x20000004

080034bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b08b      	sub	sp, #44	; 0x2c
 80034c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x30>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ea:	e03f      	b.n	800356c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ee:	623b      	str	r3, [r7, #32]
      break;
 80034f0:	e03f      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	607a      	str	r2, [r7, #4]
  return result;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	40d3      	lsrs	r3, r2
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	220f      	movs	r2, #15
 8003520:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	60fa      	str	r2, [r7, #12]
  return result;
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	40d3      	lsrs	r3, r2
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	fbb2 f2f3 	udiv	r2, r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	e007      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fbb2 f2f3 	udiv	r2, r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	623b      	str	r3, [r7, #32]
      break;
 800356a:	e002      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc8>)
 800356e:	623b      	str	r3, [r7, #32]
      break;
 8003570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003572:	6a3b      	ldr	r3, [r7, #32]
}
 8003574:	4618      	mov	r0, r3
 8003576:	372c      	adds	r7, #44	; 0x2c
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40021000 	.word	0x40021000
 8003584:	007a1200 	.word	0x007a1200
 8003588:	0800a400 	.word	0x0800a400
 800358c:	0800a410 	.word	0x0800a410

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b092      	sub	sp, #72	; 0x48
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80d7 	beq.w	800375c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b4:	4b4e      	ldr	r3, [pc, #312]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	61d3      	str	r3, [r2, #28]
 80035cc:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b42      	ldr	r3, [pc, #264]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a41      	ldr	r2, [pc, #260]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fd ff27 	bl	8001448 <HAL_GetTick>
 80035fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fd ff23 	bl	8001448 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d901      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1d6      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800361c:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8084 	beq.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003638:	429a      	cmp	r2, r3
 800363a:	d07c      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	461a      	mov	r2, r3
 8003666:	2301      	movs	r3, #1
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	461a      	mov	r2, r3
 800368a:	2300      	movs	r3, #0
 800368c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04b      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fd fed3 	bl	8001448 <HAL_GetTick>
 80036a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fecf 	bl	8001448 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e180      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036bc:	2302      	movs	r3, #2
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	61fb      	str	r3, [r7, #28]
  return result;
 80036d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d108      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036ea:	4b01      	ldr	r3, [pc, #4]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	e00d      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
 80036f8:	10908100 	.word	0x10908100
 80036fc:	2302      	movs	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2202      	movs	r2, #2
 800370e:	613a      	str	r2, [r7, #16]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	60fa      	str	r2, [r7, #12]
  return result;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f002 021f 	and.w	r2, r2, #31
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0b7      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003736:	4b95      	ldr	r3, [pc, #596]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4992      	ldr	r1, [pc, #584]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4a8d      	ldr	r2, [pc, #564]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003768:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f023 0203 	bic.w	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4985      	ldr	r1, [pc, #532]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003786:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	497e      	ldr	r1, [pc, #504]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	4976      	ldr	r1, [pc, #472]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c2:	4b72      	ldr	r3, [pc, #456]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f023 0210 	bic.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	496f      	ldr	r1, [pc, #444]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	4967      	ldr	r1, [pc, #412]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f023 0220 	bic.w	r2, r3, #32
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4960      	ldr	r1, [pc, #384]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381c:	4b5b      	ldr	r3, [pc, #364]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	4958      	ldr	r1, [pc, #352]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	4951      	ldr	r1, [pc, #324]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003858:	4b4c      	ldr	r3, [pc, #304]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4949      	ldr	r1, [pc, #292]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4942      	ldr	r1, [pc, #264]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	493a      	ldr	r1, [pc, #232]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4933      	ldr	r1, [pc, #204]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	492b      	ldr	r1, [pc, #172]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4924      	ldr	r1, [pc, #144]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	491c      	ldr	r1, [pc, #112]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	4915      	ldr	r1, [pc, #84]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	490d      	ldr	r1, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003972:	4906      	ldr	r1, [pc, #24]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800399a:	4313      	orrs	r3, r2
 800399c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3748      	adds	r7, #72	; 0x48
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e084      	b.n	8003ae8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fbbb 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a1e:	d902      	bls.n	8003a26 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e002      	b.n	8003a2c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a34:	d007      	beq.n	8003a46 <HAL_SPI_Init+0x7a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a56:	d903      	bls.n	8003a60 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5e:	e002      	b.n	8003a66 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	ea42 0103 	orr.w	r1, r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0204 	and.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	ea42 0103 	orr.w	r1, r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Transmit+0x22>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e150      	b.n	8003db4 <HAL_SPI_Transmit+0x2c4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1a:	f7fd fc95 	bl	8001448 <HAL_GetTick>
 8003b1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b34:	e135      	b.n	8003da2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Transmit+0x52>
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b46:	e12c      	b.n	8003da2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d107      	bne.n	8003ba4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d007      	beq.n	8003bc2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bca:	d94b      	bls.n	8003c64 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0xea>
 8003bd4:	8afb      	ldrh	r3, [r7, #22]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d13e      	bne.n	8003c58 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bfe:	e02b      	b.n	8003c58 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d112      	bne.n	8003c34 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	1c9a      	adds	r2, r3, #2
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c32:	e011      	b.n	8003c58 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c34:	f7fd fc08 	bl	8001448 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d803      	bhi.n	8003c4c <HAL_SPI_Transmit+0x15c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_Transmit+0x162>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c56:	e0a4      	b.n	8003da2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ce      	bne.n	8003c00 <HAL_SPI_Transmit+0x110>
 8003c62:	e07c      	b.n	8003d5e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x182>
 8003c6c:	8afb      	ldrh	r3, [r7, #22]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d170      	bne.n	8003d54 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d912      	bls.n	8003ca2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b02      	subs	r3, #2
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca0:	e058      	b.n	8003d54 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cc8:	e044      	b.n	8003d54 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d12b      	bne.n	8003d30 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d912      	bls.n	8003d08 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	1c9a      	adds	r2, r3, #2
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b02      	subs	r3, #2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d06:	e025      	b.n	8003d54 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2e:	e011      	b.n	8003d54 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d30:	f7fd fb8a 	bl	8001448 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d803      	bhi.n	8003d48 <HAL_SPI_Transmit+0x258>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x25e>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d52:	e026      	b.n	8003da2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1b5      	bne.n	8003cca <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fc94 	bl	8004690 <SPI_EndRxTxTransaction>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e000      	b.n	8003da2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd8:	d112      	bne.n	8003e00 <HAL_SPI_Receive+0x44>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2204      	movs	r2, #4
 8003de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f908 	bl	800400c <HAL_SPI_TransmitReceive>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	e101      	b.n	8004004 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_SPI_Receive+0x52>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0fa      	b.n	8004004 <HAL_SPI_Receive+0x248>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e16:	f7fd fb17 	bl	8001448 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e2c:	e0e1      	b.n	8003ff2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Receive+0x7e>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e3e:	e0d8      	b.n	8003ff2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2204      	movs	r2, #4
 8003e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e8a:	d908      	bls.n	8003e9e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	e007      	b.n	8003eae <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb6:	d107      	bne.n	8003ec8 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d007      	beq.n	8003ee6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eee:	d867      	bhi.n	8003fc0 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ef0:	e030      	b.n	8003f54 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d117      	bne.n	8003f30 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f103 020c 	add.w	r2, r3, #12
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f2e:	e011      	b.n	8003f54 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f30:	f7fd fa8a 	bl	8001448 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d803      	bhi.n	8003f48 <HAL_SPI_Receive+0x18c>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Receive+0x192>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f52:	e04e      	b.n	8003ff2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1c8      	bne.n	8003ef2 <HAL_SPI_Receive+0x136>
 8003f60:	e034      	b.n	8003fcc <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d115      	bne.n	8003f9c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	1c9a      	adds	r2, r3, #2
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f9a:	e011      	b.n	8003fc0 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9c:	f7fd fa54 	bl	8001448 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d803      	bhi.n	8003fb4 <HAL_SPI_Receive+0x1f8>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Receive+0x1fe>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fbe:	e018      	b.n	8003ff2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ca      	bne.n	8003f62 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb05 	bl	80045e0 <SPI_EndRxTransaction>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
 8003fee:	e000      	b.n	8003ff2 <HAL_SPI_Receive+0x236>
  }

error :
 8003ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x26>
 800402e:	2302      	movs	r3, #2
 8004030:	e1fb      	b.n	800442a <HAL_SPI_TransmitReceive+0x41e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403a:	f7fd fa05 	bl	8001448 <HAL_GetTick>
 800403e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004046:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004056:	7efb      	ldrb	r3, [r7, #27]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d00e      	beq.n	800407a <HAL_SPI_TransmitReceive+0x6e>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004062:	d106      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x66>
 800406c:	7efb      	ldrb	r3, [r7, #27]
 800406e:	2b04      	cmp	r3, #4
 8004070:	d003      	beq.n	800407a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004078:	e1cd      	b.n	8004416 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_SPI_TransmitReceive+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_TransmitReceive+0x80>
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004092:	e1c0      	b.n	8004416 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b04      	cmp	r3, #4
 800409e:	d003      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	887a      	ldrh	r2, [r7, #2]
 80040ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ea:	d802      	bhi.n	80040f2 <HAL_SPI_TransmitReceive+0xe6>
 80040ec:	8a3b      	ldrh	r3, [r7, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d908      	bls.n	8004104 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	e007      	b.n	8004114 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d007      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004130:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800413a:	d97c      	bls.n	8004236 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_SPI_TransmitReceive+0x13e>
 8004144:	8a7b      	ldrh	r3, [r7, #18]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d169      	bne.n	800421e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	1c9a      	adds	r2, r3, #2
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	e056      	b.n	800421e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d11b      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1aa>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d016      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1aa>
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	2b01      	cmp	r3, #1
 800418c:	d113      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11c      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x1f2>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d016      	beq.n	80041fe <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	b292      	uxth	r2, r2
 80041dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041fe:	f7fd f923 	bl	8001448 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420a:	429a      	cmp	r2, r3
 800420c:	d807      	bhi.n	800421e <HAL_SPI_TransmitReceive+0x212>
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d003      	beq.n	800421e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800421c:	e0fb      	b.n	8004416 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1a3      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x164>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d19d      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x164>
 8004234:	e0df      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_SPI_TransmitReceive+0x23a>
 800423e:	8a7b      	ldrh	r3, [r7, #18]
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 80cb 	bne.w	80043dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d912      	bls.n	8004276 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b02      	subs	r3, #2
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004274:	e0b2      	b.n	80043dc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	e09e      	b.n	80043dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d134      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x30a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02f      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x30a>
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d12c      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d912      	bls.n	80042ec <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b02      	subs	r3, #2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ea:	e012      	b.n	8004312 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	7812      	ldrb	r2, [r2, #0]
 80042f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d148      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x3aa>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d042      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d923      	bls.n	8004384 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	b292      	uxth	r2, r2
 8004348:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b02      	subs	r3, #2
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d81f      	bhi.n	80043b2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e016      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f103 020c 	add.w	r2, r3, #12
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b2:	2301      	movs	r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043b6:	f7fd f847 	bl	8001448 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_TransmitReceive+0x3c2>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x3c8>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043da:	e01c      	b.n	8004416 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f47f af5b 	bne.w	800429e <HAL_SPI_TransmitReceive+0x292>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f af54 	bne.w	800429e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f948 	bl	8004690 <SPI_EndRxTxTransaction>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	661a      	str	r2, [r3, #96]	; 0x60
 8004412:	e000      	b.n	8004416 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004414:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	e04c      	b.n	80044de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d048      	beq.n	80044de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800444c:	f7fc fffc 	bl	8001448 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d902      	bls.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x30>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13d      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447a:	d111      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d004      	beq.n	8004490 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d107      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a8:	d10f      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1a3      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004514:	e057      	b.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800451c:	d106      	bne.n	800452c <SPI_WaitFifoStateUntilTimeout+0x26>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d048      	beq.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004534:	f7fc ff88 	bl	8001448 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d902      	bls.n	800454a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d13d      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004562:	d111      	bne.n	8004588 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456c:	d004      	beq.n	8004578 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d107      	bne.n	8004588 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d10f      	bne.n	80045b2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e008      	b.n	80045d8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d19f      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f4:	d111      	bne.n	800461a <SPI_EndRxTransaction+0x3a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fe:	d004      	beq.n	800460a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004608:	d107      	bne.n	800461a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff ff04 	bl	8004432 <SPI_WaitFlagStateUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e023      	b.n	8004688 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004648:	d11d      	bne.n	8004686 <SPI_EndRxTransaction+0xa6>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004652:	d004      	beq.n	800465e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d113      	bne.n	8004686 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff4b 	bl	8004506 <SPI_WaitFifoStateUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e000      	b.n	8004688 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff ff2c 	bl	8004506 <SPI_WaitFifoStateUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e027      	b.n	8004714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff feaf 	bl	8004432 <SPI_WaitFlagStateUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e014      	b.n	8004714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ff05 	bl	8004506 <SPI_WaitFifoStateUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e000      	b.n	8004714 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4798      	blx	r3
   WIZCHIP.CS._select();
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <WIZCHIP_READ+0x94>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004730:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <WIZCHIP_READ+0x24>
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <WIZCHIP_READ+0x94>)
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d114      	bne.n	800476a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	0c12      	lsrs	r2, r2, #16
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	4610      	mov	r0, r2
 800474c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	0a12      	lsrs	r2, r2, #8
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800475c:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <WIZCHIP_READ+0x94>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
 8004768:	e011      	b.n	800478e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	b2db      	uxtb	r3, r3
 8004770:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	b2db      	uxtb	r3, r3
 8004778:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f107 020c 	add.w	r2, r7, #12
 8004788:	2103      	movs	r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <WIZCHIP_READ+0x94>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <WIZCHIP_READ+0x94>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <WIZCHIP_READ+0x94>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4798      	blx	r3
   return ret;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c

080047b4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80047c0:	4b22      	ldr	r3, [pc, #136]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80047c6:	4b21      	ldr	r3, [pc, #132]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d119      	bne.n	8004810 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	0c12      	lsrs	r2, r2, #16
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	4610      	mov	r0, r2
 80047e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	0a12      	lsrs	r2, r2, #8
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <WIZCHIP_WRITE+0x98>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <WIZCHIP_WRITE+0x98>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	4610      	mov	r0, r2
 800480c:	4798      	blx	r3
 800480e:	e013      	b.n	8004838 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	b2db      	uxtb	r3, r3
 8004816:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b2db      	uxtb	r3, r3
 800481e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <WIZCHIP_WRITE+0x98>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f107 020c 	add.w	r2, r7, #12
 8004832:	2104      	movs	r1, #4
 8004834:	4610      	mov	r0, r2
 8004836:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <WIZCHIP_WRITE+0x98>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800483e:	4b03      	ldr	r3, [pc, #12]	; (800484c <WIZCHIP_WRITE+0x98>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	4798      	blx	r3
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	2000000c 	.word	0x2000000c

08004850 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004864:	4b29      	ldr	r3, [pc, #164]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <WIZCHIP_READ_BUF+0x2a>
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d126      	bne.n	80048c8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	0c12      	lsrs	r2, r2, #16
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	0a12      	lsrs	r2, r2, #8
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	4610      	mov	r0, r2
 8004894:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	4610      	mov	r0, r2
 80048a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	82fb      	strh	r3, [r7, #22]
 80048a6:	e00a      	b.n	80048be <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80048a8:	4b18      	ldr	r3, [pc, #96]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	8afa      	ldrh	r2, [r7, #22]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	188c      	adds	r4, r1, r2
 80048b2:	4798      	blx	r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80048b8:	8afb      	ldrh	r3, [r7, #22]
 80048ba:	3301      	adds	r3, #1
 80048bc:	82fb      	strh	r3, [r7, #22]
 80048be:	8afa      	ldrh	r2, [r7, #22]
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3f0      	bcc.n	80048a8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80048c6:	e017      	b.n	80048f8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0c1b      	lsrs	r3, r3, #16
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f107 0210 	add.w	r2, r7, #16
 80048e6:	2103      	movs	r1, #3
 80048e8:	4610      	mov	r0, r2
 80048ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	4611      	mov	r1, r2
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <WIZCHIP_READ_BUF+0xbc>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	4798      	blx	r3
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd90      	pop	{r4, r7, pc}
 800490c:	2000000c 	.word	0x2000000c

08004910 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d126      	bne.n	8004988 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	0c12      	lsrs	r2, r2, #16
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	4610      	mov	r0, r2
 8004946:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	0a12      	lsrs	r2, r2, #8
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	4610      	mov	r0, r2
 8004960:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	82fb      	strh	r3, [r7, #22]
 8004966:	e00a      	b.n	800497e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	8afa      	ldrh	r2, [r7, #22]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	440a      	add	r2, r1
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004978:	8afb      	ldrh	r3, [r7, #22]
 800497a:	3301      	adds	r3, #1
 800497c:	82fb      	strh	r3, [r7, #22]
 800497e:	8afa      	ldrh	r2, [r7, #22]
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	429a      	cmp	r2, r3
 8004984:	d3f0      	bcc.n	8004968 <WIZCHIP_WRITE_BUF+0x58>
 8004986:	e017      	b.n	80049b8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	b2db      	uxtb	r3, r3
 800498e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b2db      	uxtb	r3, r3
 8004996:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f107 0210 	add.w	r2, r7, #16
 80049a6:	2103      	movs	r1, #3
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	4611      	mov	r1, r2
 80049b4:	68b8      	ldr	r0, [r7, #8]
 80049b6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80049be:	4b03      	ldr	r3, [pc, #12]	; (80049cc <WIZCHIP_WRITE_BUF+0xbc>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4798      	blx	r3
}
 80049c4:	bf00      	nop
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80049da:	2300      	movs	r3, #0
 80049dc:	81fb      	strh	r3, [r7, #14]
 80049de:	2300      	movs	r3, #0
 80049e0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3301      	adds	r3, #1
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fe94 	bl	800471c <WIZCHIP_READ>
 80049f4:	4603      	mov	r3, r0
 80049f6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80049f8:	89bb      	ldrh	r3, [r7, #12]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b29c      	uxth	r4, r3
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	3301      	adds	r3, #1
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fe86 	bl	800471c <WIZCHIP_READ>
 8004a10:	4603      	mov	r3, r0
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4423      	add	r3, r4
 8004a16:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004a18:	89bb      	ldrh	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	3301      	adds	r3, #1
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe76 	bl	800471c <WIZCHIP_READ>
 8004a30:	4603      	mov	r3, r0
 8004a32:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004a34:	89fb      	ldrh	r3, [r7, #14]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	b29c      	uxth	r4, r3
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fe68 	bl	800471c <WIZCHIP_READ>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4423      	add	r3, r4
 8004a52:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004a54:	89fa      	ldrh	r2, [r7, #14]
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1c2      	bne.n	80049e2 <getSn_TX_FSR+0x12>
   return val;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}

08004a66 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004a66:	b590      	push	{r4, r7, lr}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	6039      	str	r1, [r7, #0]
 8004a70:	71fb      	strb	r3, [r7, #7]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8004a7e:	88bb      	ldrh	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d048      	beq.n	8004b16 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3301      	adds	r3, #1
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fe43 	bl	800471c <WIZCHIP_READ>
 8004a96:	4603      	mov	r3, r0
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	b29c      	uxth	r4, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fe36 	bl	800471c <WIZCHIP_READ>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4423      	add	r3, r4
 8004ab6:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	79fa      	ldrb	r2, [r7, #7]
 8004abe:	0092      	lsls	r2, r2, #2
 8004ac0:	3202      	adds	r2, #2
 8004ac2:	00d2      	lsls	r2, r2, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004ac8:	88bb      	ldrh	r3, [r7, #4]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f7ff ff1e 	bl	8004910 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8004ad4:	89fa      	ldrh	r2, [r7, #14]
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004ae8:	461a      	mov	r2, r3
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7ff fe5d 	bl	80047b4 <WIZCHIP_WRITE>
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3301      	adds	r3, #1
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004b06:	461a      	mov	r2, r3
 8004b08:	89fb      	ldrh	r3, [r7, #14]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7ff fe50 	bl	80047b4 <WIZCHIP_WRITE>
 8004b14:	e000      	b.n	8004b18 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004b16:	bf00      	nop
}
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd90      	pop	{r4, r7, pc}
	...

08004b20 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	71fb      	strb	r3, [r7, #7]
 8004b32:	4603      	mov	r3, r0
 8004b34:	71bb      	strb	r3, [r7, #6]
 8004b36:	460b      	mov	r3, r1
 8004b38:	80bb      	strh	r3, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d902      	bls.n	8004b4a <socket+0x2a>
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	e0f1      	b.n	8004d2e <socket+0x20e>
	switch(protocol)
 8004b4a:	79bb      	ldrb	r3, [r7, #6]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d004      	beq.n	8004b5a <socket+0x3a>
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	db10      	blt.n	8004b76 <socket+0x56>
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	dc0e      	bgt.n	8004b76 <socket+0x56>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004b58:	e011      	b.n	8004b7e <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	2204      	movs	r2, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b66:	f7ff fe73 	bl	8004850 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <socket+0x5c>
 8004b70:	f06f 0302 	mvn.w	r3, #2
 8004b74:	e0db      	b.n	8004d2e <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004b76:	f06f 0304 	mvn.w	r3, #4
 8004b7a:	e0d8      	b.n	8004d2e <socket+0x20e>
	    break;
 8004b7c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <socket+0x6e>
 8004b88:	f06f 0305 	mvn.w	r3, #5
 8004b8c:	e0cf      	b.n	8004d2e <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d025      	beq.n	8004be0 <socket+0xc0>
	{
   	switch(protocol)
 8004b94:	79bb      	ldrb	r3, [r7, #6]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d002      	beq.n	8004ba0 <socket+0x80>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d008      	beq.n	8004bb0 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004b9e:	e024      	b.n	8004bea <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11c      	bne.n	8004be4 <socket+0xc4>
 8004baa:	f06f 0305 	mvn.w	r3, #5
 8004bae:	e0be      	b.n	8004d2e <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db02      	blt.n	8004bc8 <socket+0xa8>
 8004bc2:	f06f 0305 	mvn.w	r3, #5
 8004bc6:	e0b2      	b.n	8004d2e <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db06      	blt.n	8004be8 <socket+0xc8>
 8004bda:	f06f 0305 	mvn.w	r3, #5
 8004bde:	e0a6      	b.n	8004d2e <socket+0x20e>
   	}
   }
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <socket+0xca>
   	      break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <socket+0xca>
   	      break;
 8004be8:	bf00      	nop
	close(sn);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f8ad 	bl	8004d4c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c00:	f023 030f 	bic.w	r3, r3, #15
 8004c04:	b25a      	sxtb	r2, r3
 8004c06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7ff fdcf 	bl	80047b4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004c16:	88bb      	ldrh	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d110      	bne.n	8004c3e <socket+0x11e>
	{
	   port = sock_any_port++;
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <socket+0x218>)
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	b291      	uxth	r1, r2
 8004c24:	4a44      	ldr	r2, [pc, #272]	; (8004d38 <socket+0x218>)
 8004c26:	8011      	strh	r1, [r2, #0]
 8004c28:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004c2a:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <socket+0x218>)
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d103      	bne.n	8004c3e <socket+0x11e>
 8004c36:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <socket+0x218>)
 8004c38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004c3c:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3301      	adds	r3, #1
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	88bb      	ldrh	r3, [r7, #4]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7ff fdac 	bl	80047b4 <WIZCHIP_WRITE>
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	3301      	adds	r3, #1
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	461a      	mov	r2, r3
 8004c6a:	88bb      	ldrh	r3, [r7, #4]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7ff fd9f 	bl	80047b4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c82:	2101      	movs	r1, #1
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fd95 	bl	80047b4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004c8a:	bf00      	nop
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3301      	adds	r3, #1
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fd3f 	bl	800471c <WIZCHIP_READ>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f3      	bne.n	8004c8c <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <socket+0x21c>)
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <socket+0x21c>)
 8004cc0:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	f003 0201 	and.w	r2, r3, #1
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	b21a      	sxth	r2, r3
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <socket+0x21c>)
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b21b      	sxth	r3, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <socket+0x21c>)
 8004cde:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	b21b      	sxth	r3, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	b21a      	sxth	r2, r3
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <socket+0x220>)
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b21b      	sxth	r3, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <socket+0x220>)
 8004cfc:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <socket+0x224>)
 8004d02:	2100      	movs	r1, #0
 8004d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <socket+0x228>)
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004d10:	bf00      	nop
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	3301      	adds	r3, #1
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fcfc 	bl	800471c <WIZCHIP_READ>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f3      	beq.n	8004d12 <socket+0x1f2>
   return (int8_t)sn;
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd90      	pop	{r4, r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2000000a 	.word	0x2000000a
 8004d3c:	20000228 	.word	0x20000228
 8004d40:	2000022a 	.word	0x2000022a
 8004d44:	2000022c 	.word	0x2000022c
 8004d48:	2000023c 	.word	0x2000023c

08004d4c <close>:

int8_t close(uint8_t sn)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d902      	bls.n	8004d62 <close+0x16>
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	e055      	b.n	8004e0e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3301      	adds	r3, #1
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d6e:	2110      	movs	r1, #16
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fd1f 	bl	80047b4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004d76:	bf00      	nop
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fcc9 	bl	800471c <WIZCHIP_READ>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f3      	bne.n	8004d78 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	3301      	adds	r3, #1
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004d9c:	211f      	movs	r1, #31
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fd08 	bl	80047b4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	2201      	movs	r2, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	b21b      	sxth	r3, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	b21a      	sxth	r2, r3
 8004db2:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <close+0xcc>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	4013      	ands	r3, r2
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <close+0xcc>)
 8004dc0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	b21a      	sxth	r2, r3
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <close+0xd0>)
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b21b      	sxth	r3, r3
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b21b      	sxth	r3, r3
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <close+0xd0>)
 8004dde:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <close+0xd4>)
 8004de4:	2100      	movs	r1, #0
 8004de6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <close+0xd8>)
 8004dee:	2100      	movs	r1, #0
 8004df0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004df2:	bf00      	nop
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3301      	adds	r3, #1
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fc8b 	bl	800471c <WIZCHIP_READ>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f3      	bne.n	8004df4 <close+0xa8>
	return SOCK_OK;
 8004e0c:	2301      	movs	r3, #1
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000228 	.word	0x20000228
 8004e1c:	2000022a 	.word	0x2000022a
 8004e20:	2000022c 	.word	0x2000022c
 8004e24:	2000023c 	.word	0x2000023c

08004e28 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
 8004e34:	4613      	mov	r3, r2
 8004e36:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d902      	bls.n	8004e44 <connect+0x1c>
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	e0c6      	b.n	8004fd2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3301      	adds	r3, #1
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fc65 	bl	800471c <WIZCHIP_READ>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <connect+0x3a>
 8004e5c:	f06f 0304 	mvn.w	r3, #4
 8004e60:	e0b7      	b.n	8004fd2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3301      	adds	r3, #1
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fc54 	bl	800471c <WIZCHIP_READ>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b13      	cmp	r3, #19
 8004e78:	d002      	beq.n	8004e80 <connect+0x58>
 8004e7a:	f06f 0302 	mvn.w	r3, #2
 8004e7e:	e0a8      	b.n	8004fd2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	4413      	add	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	3202      	adds	r2, #2
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	3203      	adds	r2, #3
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d002      	beq.n	8004ebe <connect+0x96>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <connect+0x9c>
 8004ebe:	f06f 030b 	mvn.w	r3, #11
 8004ec2:	e086      	b.n	8004fd2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004ec4:	88bb      	ldrh	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <connect+0xa8>
 8004eca:	f06f 030a 	mvn.w	r3, #10
 8004ece:	e080      	b.n	8004fd2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004edc:	2204      	movs	r2, #4
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fd15 	bl	8004910 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	3301      	adds	r3, #1
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7ff fc58 	bl	80047b4 <WIZCHIP_WRITE>
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	3301      	adds	r3, #1
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f10:	461a      	mov	r2, r3
 8004f12:	88bb      	ldrh	r3, [r7, #4]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7ff fc4b 	bl	80047b4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	3301      	adds	r3, #1
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fc41 	bl	80047b4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004f32:	bf00      	nop
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	3301      	adds	r3, #1
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fbeb 	bl	800471c <WIZCHIP_READ>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f3      	bne.n	8004f34 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004f4c:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <connect+0x1b4>)
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	fa42 f303 	asr.w	r3, r2, r3
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02b      	beq.n	8004fb8 <connect+0x190>
 8004f60:	2300      	movs	r3, #0
 8004f62:	e036      	b.n	8004fd2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3301      	adds	r3, #1
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fbd3 	bl	800471c <WIZCHIP_READ>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	3301      	adds	r3, #1
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f8c:	2108      	movs	r1, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fc10 	bl	80047b4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004f94:	f06f 030c 	mvn.w	r3, #12
 8004f98:	e01b      	b.n	8004fd2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fbb8 	bl	800471c <WIZCHIP_READ>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004fb2:	f06f 0303 	mvn.w	r3, #3
 8004fb6:	e00c      	b.n	8004fd2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fba9 	bl	800471c <WIZCHIP_READ>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b17      	cmp	r3, #23
 8004fce:	d1c9      	bne.n	8004f64 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004fd0:	2301      	movs	r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000228 	.word	0x20000228

08004fe0 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	6039      	str	r1, [r7, #0]
 8004fea:	71fb      	strb	r3, [r7, #7]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d902      	bls.n	8005004 <send+0x24>
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8005002:	e0de      	b.n	80051c2 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	3301      	adds	r3, #1
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fb85 	bl	800471c <WIZCHIP_READ>
 8005012:	4603      	mov	r3, r0
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2b01      	cmp	r3, #1
 800501a:	d002      	beq.n	8005022 <send+0x42>
 800501c:	f06f 0304 	mvn.w	r3, #4
 8005020:	e0cf      	b.n	80051c2 <send+0x1e2>
   CHECK_SOCKDATA();
 8005022:	88bb      	ldrh	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <send+0x4e>
 8005028:	f06f 030d 	mvn.w	r3, #13
 800502c:	e0c9      	b.n	80051c2 <send+0x1e2>
   tmp = getSn_SR(sn);
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	3301      	adds	r3, #1
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fb6e 	bl	800471c <WIZCHIP_READ>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b17      	cmp	r3, #23
 8005048:	d005      	beq.n	8005056 <send+0x76>
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b1c      	cmp	r3, #28
 800504e:	d002      	beq.n	8005056 <send+0x76>
 8005050:	f06f 0306 	mvn.w	r3, #6
 8005054:	e0b5      	b.n	80051c2 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8005056:	4b5d      	ldr	r3, [pc, #372]	; (80051cc <send+0x1ec>)
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	fa42 f303 	asr.w	r3, r2, r3
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d039      	beq.n	80050de <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	3301      	adds	r3, #1
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fb50 	bl	800471c <WIZCHIP_READ>
 800507c:	4603      	mov	r3, r0
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d019      	beq.n	80050c2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	3301      	adds	r3, #1
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800509a:	2110      	movs	r1, #16
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fb89 	bl	80047b4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2201      	movs	r2, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	b21a      	sxth	r2, r3
 80050b0:	4b46      	ldr	r3, [pc, #280]	; (80051cc <send+0x1ec>)
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	4013      	ands	r3, r2
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	4b43      	ldr	r3, [pc, #268]	; (80051cc <send+0x1ec>)
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e00d      	b.n	80050de <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <send+0xfa>
      {
         close(sn);
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe3c 	bl	8004d4c <close>
         return SOCKERR_TIMEOUT;
 80050d4:	f06f 030c 	mvn.w	r3, #12
 80050d8:	e073      	b.n	80051c2 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80050da:	2300      	movs	r3, #0
 80050dc:	e071      	b.n	80051c2 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	3301      	adds	r3, #1
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fb16 	bl	800471c <WIZCHIP_READ>
 80050f0:	4603      	mov	r3, r0
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	029b      	lsls	r3, r3, #10
 80050f6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80050f8:	88ba      	ldrh	r2, [r7, #4]
 80050fa:	89bb      	ldrh	r3, [r7, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d901      	bls.n	8005104 <send+0x124>
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fc62 	bl	80049d0 <getSn_TX_FSR>
 800510c:	4603      	mov	r3, r0
 800510e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	3301      	adds	r3, #1
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fafd 	bl	800471c <WIZCHIP_READ>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b17      	cmp	r3, #23
 800512a:	d009      	beq.n	8005140 <send+0x160>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b1c      	cmp	r3, #28
 8005130:	d006      	beq.n	8005140 <send+0x160>
      {
         close(sn);
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fe09 	bl	8004d4c <close>
         return SOCKERR_SOCKSTATUS;
 800513a:	f06f 0306 	mvn.w	r3, #6
 800513e:	e040      	b.n	80051c2 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005140:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <send+0x1f0>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	fa42 f303 	asr.w	r3, r2, r3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <send+0x180>
 8005154:	88ba      	ldrh	r2, [r7, #4]
 8005156:	89bb      	ldrh	r3, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d901      	bls.n	8005160 <send+0x180>
 800515c:	2300      	movs	r3, #0
 800515e:	e030      	b.n	80051c2 <send+0x1e2>
      if(len <= freesize) break;
 8005160:	88ba      	ldrh	r2, [r7, #4]
 8005162:	89bb      	ldrh	r3, [r7, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d900      	bls.n	800516a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8005168:	e7cc      	b.n	8005104 <send+0x124>
      if(len <= freesize) break;
 800516a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800516c:	88ba      	ldrh	r2, [r7, #4]
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fc77 	bl	8004a66 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	3301      	adds	r3, #1
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005184:	2120      	movs	r1, #32
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fb14 	bl	80047b4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800518c:	bf00      	nop
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	3301      	adds	r3, #1
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fabe 	bl	800471c <WIZCHIP_READ>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f3      	bne.n	800518e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	b21a      	sxth	r2, r3
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <send+0x1ec>)
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <send+0x1ec>)
 80051be:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80051c0:	88bb      	ldrh	r3, [r7, #4]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2000022a 	.word	0x2000022a
 80051d0:	20000228 	.word	0x20000228

080051d4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
 8005248:	2300      	movs	r3, #0
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <reg_wizchip_cs_cbfunc+0x16>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8005284:	4a09      	ldr	r2, [pc, #36]	; (80052ac <reg_wizchip_cs_cbfunc+0x40>)
 8005286:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <reg_wizchip_cs_cbfunc+0x3c>)
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <reg_wizchip_cs_cbfunc+0x44>)
 800528c:	619a      	str	r2, [r3, #24]
 800528e:	e005      	b.n	800529c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005290:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005296:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <reg_wizchip_cs_cbfunc+0x3c>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6193      	str	r3, [r2, #24]
   }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	080051f1 	.word	0x080051f1
 80052b0:	080051ff 	.word	0x080051ff

080052b4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80052be:	bf00      	nop
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <reg_wizchip_spi_cbfunc+0x4c>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f9      	beq.n	80052c0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <reg_wizchip_spi_cbfunc+0x24>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <reg_wizchip_spi_cbfunc+0x4c>)
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <reg_wizchip_spi_cbfunc+0x50>)
 80052dc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <reg_wizchip_spi_cbfunc+0x4c>)
 80052e0:	4a09      	ldr	r2, [pc, #36]	; (8005308 <reg_wizchip_spi_cbfunc+0x54>)
 80052e2:	621a      	str	r2, [r3, #32]
 80052e4:	e005      	b.n	80052f2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80052e6:	4a06      	ldr	r2, [pc, #24]	; (8005300 <reg_wizchip_spi_cbfunc+0x4c>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <reg_wizchip_spi_cbfunc+0x4c>)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6213      	str	r3, [r2, #32]
   }
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	2000000c 	.word	0x2000000c
 8005304:	08005245 	.word	0x08005245
 8005308:	08005255 	.word	0x08005255

0800530c <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	6039      	str	r1, [r7, #0]
 8005316:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d82c      	bhi.n	8005378 <ctlnetwork+0x6c>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <ctlnetwork+0x18>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	0800535b 	.word	0x0800535b
 8005334:	08005369 	.word	0x08005369
 8005338:	08005371 	.word	0x08005371
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800533c:	6838      	ldr	r0, [r7, #0]
 800533e:	f000 f8fb 	bl	8005538 <wizchip_setnetinfo>
         break;
 8005342:	e01c      	b.n	800537e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005344:	6838      	ldr	r0, [r7, #0]
 8005346:	f000 f937 	bl	80055b8 <wizchip_getnetinfo>
         break;
 800534a:	e018      	b.n	800537e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f971 	bl	8005638 <wizchip_setnetmode>
 8005356:	4603      	mov	r3, r0
 8005358:	e012      	b.n	8005380 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800535a:	f000 f98f 	bl	800567c <wizchip_getnetmode>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	701a      	strb	r2, [r3, #0]
         break;
 8005366:	e00a      	b.n	800537e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	f000 f98f 	bl	800568c <wizchip_settimeout>
         break;
 800536e:	e006      	b.n	800537e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005370:	6838      	ldr	r0, [r7, #0]
 8005372:	f000 f9ac 	bl	80056ce <wizchip_gettimeout>
         break;
 8005376:	e002      	b.n	800537e <ctlnetwork+0x72>
      default:
         return -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e000      	b.n	8005380 <ctlnetwork+0x74>
   }
   return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	2206      	movs	r2, #6
 8005392:	4619      	mov	r1, r3
 8005394:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8005398:	f7ff fa5a 	bl	8004850 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	2204      	movs	r2, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053a8:	f7ff fa52 	bl	8004850 <WIZCHIP_READ_BUF>
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	2204      	movs	r2, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80053b8:	f7ff fa4a 	bl	8004850 <WIZCHIP_READ_BUF>
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	2204      	movs	r2, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80053c8:	f7ff fa42 	bl	8004850 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7ff f9f0 	bl	80047b4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80053d4:	2000      	movs	r0, #0
 80053d6:	f7ff f9a1 	bl	800471c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	2206      	movs	r2, #6
 80053de:	4619      	mov	r1, r3
 80053e0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80053e4:	f7ff fa94 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	2204      	movs	r2, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053f4:	f7ff fa8c 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	2204      	movs	r2, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005404:	f7ff fa84 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	2204      	movs	r2, #4
 800540e:	4619      	mov	r1, r3
 8005410:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005414:	f7ff fa7c 	bl	8004910 <WIZCHIP_WRITE_BUF>
}
 8005418:	bf00      	nop
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800542e:	f7ff ffab 	bl	8005388 <wizchip_sw_reset>
   if(txsize)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d03b      	beq.n	80054b0 <wizchip_init+0x90>
   {
      tmp = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e015      	b.n	800546e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	4413      	add	r3, r2
 8005450:	b2db      	uxtb	r3, r3
 8005452:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8005454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005458:	2b10      	cmp	r3, #16
 800545a:	dd02      	ble.n	8005462 <wizchip_init+0x42>
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	e066      	b.n	8005530 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	3301      	adds	r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	73fb      	strb	r3, [r7, #15]
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	2b07      	cmp	r3, #7
 8005474:	dde5      	ble.n	8005442 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	e015      	b.n	80054a8 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800547c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	3301      	adds	r3, #1
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800548a:	4618      	mov	r0, r3
 800548c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	f7ff f98c 	bl	80047b4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800549c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	3301      	adds	r3, #1
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ac:	2b07      	cmp	r3, #7
 80054ae:	dde5      	ble.n	800547c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03b      	beq.n	800552e <wizchip_init+0x10e>
   {
      tmp = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	e015      	b.n	80054ec <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80054c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	4413      	add	r3, r2
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80054d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	dd02      	ble.n	80054e0 <wizchip_init+0xc0>
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	e027      	b.n	8005530 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80054e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	73fb      	strb	r3, [r7, #15]
 80054ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	dde5      	ble.n	80054c0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e015      	b.n	8005526 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80054fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	3301      	adds	r3, #1
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005508:	4618      	mov	r0, r3
 800550a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	f7ff f94d 	bl	80047b4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	73fb      	strb	r3, [r7, #15]
 8005526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552a:	2b07      	cmp	r3, #7
 800552c:	dde5      	ble.n	80054fa <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2206      	movs	r2, #6
 8005544:	4619      	mov	r1, r3
 8005546:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800554a:	f7ff f9e1 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	330e      	adds	r3, #14
 8005552:	2204      	movs	r2, #4
 8005554:	4619      	mov	r1, r3
 8005556:	f44f 7080 	mov.w	r0, #256	; 0x100
 800555a:	f7ff f9d9 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	330a      	adds	r3, #10
 8005562:	2204      	movs	r2, #4
 8005564:	4619      	mov	r1, r3
 8005566:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800556a:	f7ff f9d1 	bl	8004910 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3306      	adds	r3, #6
 8005572:	2204      	movs	r2, #4
 8005574:	4619      	mov	r1, r3
 8005576:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800557a:	f7ff f9c9 	bl	8004910 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7c9a      	ldrb	r2, [r3, #18]
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <wizchip_setnetinfo+0x78>)
 8005584:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	7cda      	ldrb	r2, [r3, #19]
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <wizchip_setnetinfo+0x78>)
 800558c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7d1a      	ldrb	r2, [r3, #20]
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <wizchip_setnetinfo+0x78>)
 8005594:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7d5a      	ldrb	r2, [r3, #21]
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <wizchip_setnetinfo+0x78>)
 800559c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	7d9a      	ldrb	r2, [r3, #22]
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <wizchip_setnetinfo+0x7c>)
 80055a4:	701a      	strb	r2, [r3, #0]
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000244 	.word	0x20000244
 80055b4:	20000248 	.word	0x20000248

080055b8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2206      	movs	r2, #6
 80055c4:	4619      	mov	r1, r3
 80055c6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80055ca:	f7ff f941 	bl	8004850 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	330e      	adds	r3, #14
 80055d2:	2204      	movs	r2, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055da:	f7ff f939 	bl	8004850 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	330a      	adds	r3, #10
 80055e2:	2204      	movs	r2, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80055ea:	f7ff f931 	bl	8004850 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3306      	adds	r3, #6
 80055f2:	2204      	movs	r2, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80055fa:	f7ff f929 	bl	8004850 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <wizchip_getnetinfo+0x78>)
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <wizchip_getnetinfo+0x78>)
 8005608:	785a      	ldrb	r2, [r3, #1]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800560e:	4b08      	ldr	r3, [pc, #32]	; (8005630 <wizchip_getnetinfo+0x78>)
 8005610:	789a      	ldrb	r2, [r3, #2]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <wizchip_getnetinfo+0x78>)
 8005618:	78da      	ldrb	r2, [r3, #3]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <wizchip_getnetinfo+0x7c>)
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	759a      	strb	r2, [r3, #22]
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000244 	.word	0x20000244
 8005634:	20000248 	.word	0x20000248

08005638 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <wizchip_setnetmode+0x1e>
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	e00e      	b.n	8005674 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8005656:	2000      	movs	r0, #0
 8005658:	f7ff f860 	bl	800471c <WIZCHIP_READ>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	4313      	orrs	r3, r2
 8005666:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	4619      	mov	r1, r3
 800566c:	2000      	movs	r0, #0
 800566e:	f7ff f8a1 	bl	80047b4 <WIZCHIP_WRITE>
   return 0;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8005680:	2000      	movs	r0, #0
 8005682:	f7ff f84b 	bl	800471c <WIZCHIP_READ>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd80      	pop	{r7, pc}

0800568c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	4619      	mov	r1, r3
 800569a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800569e:	f7ff f889 	bl	80047b4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	885b      	ldrh	r3, [r3, #2]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80056b2:	f7ff f87f 	bl	80047b4 <WIZCHIP_WRITE>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4619      	mov	r1, r3
 80056be:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80056c2:	f7ff f877 	bl	80047b4 <WIZCHIP_WRITE>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80056ce:	b590      	push	{r4, r7, lr}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80056d6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80056da:	f7ff f81f 	bl	800471c <WIZCHIP_READ>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80056e6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80056ea:	f7ff f817 	bl	800471c <WIZCHIP_READ>
 80056ee:	4603      	mov	r3, r0
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	b29c      	uxth	r4, r3
 80056f6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80056fa:	f7ff f80f 	bl	800471c <WIZCHIP_READ>
 80056fe:	4603      	mov	r3, r0
 8005700:	b29b      	uxth	r3, r3
 8005702:	4423      	add	r3, r4
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	805a      	strh	r2, [r3, #2]
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bd90      	pop	{r4, r7, pc}

08005712 <FlashInit>:
#include "string.h"

extern SPI_HandleTypeDef hspi1;

unsigned char FlashInit(Mem_Handle_t* Mem_Control)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 	  EXTFLASHCSPIN_HIGH;
 800571a:	2201      	movs	r2, #1
 800571c:	2101      	movs	r1, #1
 800571e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005722:	f7fc f92f 	bl	8001984 <HAL_GPIO_WritePin>

 	 	uint8_t k ;
 	 	for(k=0;k<=16;k++)
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e080      	b.n	800582e <FlashInit+0x11c>
 	 	{
 	 		Mem_Control->block[0][k]  = ((unsigned int)block0_add0)+((unsigned int)mem_offset*k)  ;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	0319      	lsls	r1, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[1][k]  = ((unsigned int)block1_add0)+((unsigned int)mem_offset*k)  ;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	3310      	adds	r3, #16
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	0319      	lsls	r1, r3, #12
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3210      	adds	r2, #16
 8005744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[2][k]  = ((unsigned int)block2_add0)+((unsigned int)mem_offset*k)  ;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	3320      	adds	r3, #32
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	0319      	lsls	r1, r3, #12
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3220      	adds	r2, #32
 8005754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[3][k]  = ((unsigned int)block3_add0)+((unsigned int)mem_offset*k)  ;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	3330      	adds	r3, #48	; 0x30
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	0319      	lsls	r1, r3, #12
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3230      	adds	r2, #48	; 0x30
 8005764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[4][k]  = ((unsigned int)block4_add0)+((unsigned int)mem_offset*k)  ;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	3340      	adds	r3, #64	; 0x40
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	0319      	lsls	r1, r3, #12
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3240      	adds	r2, #64	; 0x40
 8005774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[5][k]  = ((unsigned int)block5_add0)+((unsigned int)mem_offset*k)  ;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	3350      	adds	r3, #80	; 0x50
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	0319      	lsls	r1, r3, #12
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3250      	adds	r2, #80	; 0x50
 8005784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[6][k]  = ((unsigned int)block6_add0)+((unsigned int)mem_offset*k)  ;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	3360      	adds	r3, #96	; 0x60
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	0319      	lsls	r1, r3, #12
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3260      	adds	r2, #96	; 0x60
 8005794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[7][k]  = ((unsigned int)block7_add0)+((unsigned int)mem_offset*k)  ;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	3370      	adds	r3, #112	; 0x70
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	0319      	lsls	r1, r3, #12
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3270      	adds	r2, #112	; 0x70
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[8][k]  = ((unsigned int)block8_add0)+((unsigned int)mem_offset*k)  ;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	3380      	adds	r3, #128	; 0x80
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	0319      	lsls	r1, r3, #12
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3280      	adds	r2, #128	; 0x80
 80057b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[9][k]  = ((unsigned int)block9_add0)+((unsigned int)mem_offset*k)  ;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	3390      	adds	r3, #144	; 0x90
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	0319      	lsls	r1, r3, #12
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3290      	adds	r2, #144	; 0x90
 80057c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[10][k] = ((unsigned int)block10_add0)+((unsigned int)mem_offset*k) ;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	33a0      	adds	r3, #160	; 0xa0
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	0319      	lsls	r1, r3, #12
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	32a0      	adds	r2, #160	; 0xa0
 80057d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[11][k] = ((unsigned int)block11_add0)+((unsigned int)mem_offset*k) ;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	33b0      	adds	r3, #176	; 0xb0
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	0319      	lsls	r1, r3, #12
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	32b0      	adds	r2, #176	; 0xb0
 80057e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[12][k] = ((unsigned int)block12_add0)+((unsigned int)mem_offset*k) ;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	33c0      	adds	r3, #192	; 0xc0
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	0319      	lsls	r1, r3, #12
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	32c0      	adds	r2, #192	; 0xc0
 80057f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[13][k] = ((unsigned int)block13_add0)+((unsigned int)mem_offset*k) ;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	33d0      	adds	r3, #208	; 0xd0
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	0319      	lsls	r1, r3, #12
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	32d0      	adds	r2, #208	; 0xd0
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[14][k] = ((unsigned int)block14_add0)+((unsigned int)mem_offset*k) ;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	33e0      	adds	r3, #224	; 0xe0
 800580c:	7bfa      	ldrb	r2, [r7, #15]
 800580e:	0319      	lsls	r1, r3, #12
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	32e0      	adds	r2, #224	; 0xe0
 8005814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 		Mem_Control->block[15][k] = ((unsigned int)block15_add0)+((unsigned int)mem_offset*k) ;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	33f0      	adds	r3, #240	; 0xf0
 800581c:	7bfa      	ldrb	r2, [r7, #15]
 800581e:	0319      	lsls	r1, r3, #12
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	32f0      	adds	r2, #240	; 0xf0
 8005824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 	 	for(k=0;k<=16;k++)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	3301      	adds	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b10      	cmp	r3, #16
 8005832:	f67f af7b 	bls.w	800572c <FlashInit+0x1a>

 	 	}
 	 	Mem_Control->page_counter =  0 ;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 	 	Mem_Control->block_counter = 0 ;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
 	 	memset(Mem_Control->tx_buf,0,260);   // clear send buffer
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f001 f84a 	bl	80068ec <memset>

 	 	for(k=0;k<=16;k++){
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e009      	b.n	8005872 <FlashInit+0x160>
 	 		SectorErase(Mem_Control->block[0][k]); // Clear all blocks
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f904 	bl	8005a74 <SectorErase>
 	 	for(k=0;k<=16;k++){
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	3301      	adds	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b10      	cmp	r3, #16
 8005876:	d9f2      	bls.n	800585e <FlashInit+0x14c>

 	 	}


    return 1;
 8005878:	2301      	movs	r3, #1
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <FlashIsReady>:
unsigned char FlashIsReady()
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
   unsigned char transferOK;
   memset(spi_rx_buf,0,RxBufferSize);
 800588a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800588e:	2100      	movs	r1, #0
 8005890:	480f      	ldr	r0, [pc, #60]	; (80058d0 <FlashIsReady+0x4c>)
 8005892:	f001 f82b 	bl	80068ec <memset>
   transferOK=WriteCommand(0x9F,4);
 8005896:	2104      	movs	r1, #4
 8005898:	209f      	movs	r0, #159	; 0x9f
 800589a:	f000 f829 	bl	80058f0 <WriteCommand>
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
   if(transferOK==HAL_OK && spi_rx_buf[1]==0xC2 && spi_rx_buf[2]== 0x28 && spi_rx_buf[3]==0x14)
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <FlashIsReady+0x40>
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <FlashIsReady+0x4c>)
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2bc2      	cmp	r3, #194	; 0xc2
 80058ae:	d109      	bne.n	80058c4 <FlashIsReady+0x40>
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <FlashIsReady+0x4c>)
 80058b2:	789b      	ldrb	r3, [r3, #2]
 80058b4:	2b28      	cmp	r3, #40	; 0x28
 80058b6:	d105      	bne.n	80058c4 <FlashIsReady+0x40>
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <FlashIsReady+0x4c>)
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	2b14      	cmp	r3, #20
 80058be:	d101      	bne.n	80058c4 <FlashIsReady+0x40>
       return 1;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <FlashIsReady+0x42>
   else return 0;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000990 	.word	0x20000990

080058d4 <WREN>:

unsigned char WREN()
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
    unsigned char transferOK;
    transferOK=WriteCommand(0x06,1);
 80058da:	2101      	movs	r1, #1
 80058dc:	2006      	movs	r0, #6
 80058de:	f000 f807 	bl	80058f0 <WriteCommand>
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
    return transferOK;
 80058e6:	79fb      	ldrb	r3, [r7, #7]

}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <WriteCommand>:

unsigned char WriteCommand(unsigned char command,unsigned short size)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	4603      	mov	r3, r0
 80058f8:	460a      	mov	r2, r1
 80058fa:	71fb      	strb	r3, [r7, #7]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80bb      	strh	r3, [r7, #4]
    unsigned char transferOK;
    spi_tx_buf[0]=command;
 8005900:	4a12      	ldr	r2, [pc, #72]	; (800594c <WriteCommand+0x5c>)
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	7013      	strb	r3, [r2, #0]


    EXTFLASHCSPIN_LOW;
 8005906:	2200      	movs	r2, #0
 8005908:	2101      	movs	r1, #1
 800590a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800590e:	f7fc f839 	bl	8001984 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005912:	2064      	movs	r0, #100	; 0x64
 8005914:	f7fb fda4 	bl	8001460 <HAL_Delay>
    //transferOK = SPI_transfer(spi_handle, &spiTransaction);
	  transferOK=HAL_SPI_TransmitReceive(&hspi1,&spi_tx_buf[0],&spi_rx_buf[0],size,500);
 8005918:	88ba      	ldrh	r2, [r7, #4]
 800591a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <WriteCommand+0x60>)
 8005924:	4909      	ldr	r1, [pc, #36]	; (800594c <WriteCommand+0x5c>)
 8005926:	480b      	ldr	r0, [pc, #44]	; (8005954 <WriteCommand+0x64>)
 8005928:	f7fe fb70 	bl	800400c <HAL_SPI_TransmitReceive>
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(100);
 8005930:	2064      	movs	r0, #100	; 0x64
 8005932:	f7fb fd95 	bl	8001460 <HAL_Delay>
	EXTFLASHCSPIN_HIGH;
 8005936:	2201      	movs	r2, #1
 8005938:	2101      	movs	r1, #1
 800593a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800593e:	f7fc f821 	bl	8001984 <HAL_GPIO_WritePin>
    return transferOK;
 8005942:	7bfb      	ldrb	r3, [r7, #15]

}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000260 	.word	0x20000260
 8005950:	20000990 	.word	0x20000990
 8005954:	2000092c 	.word	0x2000092c

08005958 <ReadStatusRegister>:
unsigned char ReadStatusRegister(StatusRegister_t* Status)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    unsigned char transferOK;
    memset(spi_rx_buf,0,RxBufferSize);
 8005960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005964:	2100      	movs	r1, #0
 8005966:	481b      	ldr	r0, [pc, #108]	; (80059d4 <ReadStatusRegister+0x7c>)
 8005968:	f000 ffc0 	bl	80068ec <memset>
    transferOK=WriteCommand(0x05,2);
 800596c:	2102      	movs	r1, #2
 800596e:	2005      	movs	r0, #5
 8005970:	f7ff ffbe 	bl	80058f0 <WriteCommand>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
    if(transferOK==HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d124      	bne.n	80059c8 <ReadStatusRegister+0x70>
    {
        Status->BPbits=(spi_rx_buf[1]>>2)&0xFF;
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <ReadStatusRegister+0x7c>)
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	b2da      	uxtb	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	709a      	strb	r2, [r3, #2]
        Status->QE=(spi_rx_buf[1]>>6)&0x01;
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <ReadStatusRegister+0x7c>)
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	70da      	strb	r2, [r3, #3]
        Status->SRWD=(spi_rx_buf[1]>>7)&0x01;
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <ReadStatusRegister+0x7c>)
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	09db      	lsrs	r3, r3, #7
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	711a      	strb	r2, [r3, #4]
        Status->WEL=(spi_rx_buf[1]>>1)&0x01;
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <ReadStatusRegister+0x7c>)
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	085b      	lsrs	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	705a      	strb	r2, [r3, #1]
        Status->WIP=spi_rx_buf[1]&0x01;
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <ReadStatusRegister+0x7c>)
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	701a      	strb	r2, [r3, #0]
    }
    return transferOK;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]

}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000990 	.word	0x20000990

080059d8 <ReadSecurityRegister>:

unsigned char ReadSecurityRegister(SecurityRegister_t* Status)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    unsigned char transferOK;
    memset(spi_rx_buf,0,RxBufferSize);
 80059e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059e4:	2100      	movs	r1, #0
 80059e6:	4822      	ldr	r0, [pc, #136]	; (8005a70 <ReadSecurityRegister+0x98>)
 80059e8:	f000 ff80 	bl	80068ec <memset>
    transferOK=WriteCommand(0x2B,2);
 80059ec:	2102      	movs	r1, #2
 80059ee:	202b      	movs	r0, #43	; 0x2b
 80059f0:	f7ff ff7e 	bl	80058f0 <WriteCommand>
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
    if(transferOK==HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d133      	bne.n	8005a66 <ReadSecurityRegister+0x8e>
    {
        Status->EFAIL=(spi_rx_buf[1]>>6)&0x01;
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	715a      	strb	r2, [r3, #5]
        Status->PFAIL=(spi_rx_buf[1]>>5)&0x01;
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	711a      	strb	r2, [r3, #4]
        Status->ESB=(spi_rx_buf[1]>>3)&0x01;
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	70da      	strb	r2, [r3, #3]
        Status->PSB=(spi_rx_buf[1]>>2)&0x01;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	709a      	strb	r2, [r3, #2]
        Status->LDSO=(spi_rx_buf[1]>>1)&0x01;
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	705a      	strb	r2, [r3, #1]
        Status->SOTP=spi_rx_buf[1]&0x01;
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <ReadSecurityRegister+0x98>)
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	701a      	strb	r2, [r3, #0]
    }
    return transferOK;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]

}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000990 	.word	0x20000990

08005a74 <SectorErase>:
unsigned char SectorErase(unsigned int Add)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
    StatusRegister_t FlashStatus;
    SecurityRegister_t SecurityReg;
    unsigned char i=0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]
    unsigned char transferOK;
    memset(spi_rx_buf,0,RxBufferSize);
 8005a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a84:	2100      	movs	r1, #0
 8005a86:	4836      	ldr	r0, [pc, #216]	; (8005b60 <SectorErase+0xec>)
 8005a88:	f000 ff30 	bl	80068ec <memset>
    transferOK=WREN();
 8005a8c:	f7ff ff22 	bl	80058d4 <WREN>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75bb      	strb	r3, [r7, #22]
    FlashStatus.WEL=0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	747b      	strb	r3, [r7, #17]
    while(FlashStatus.WEL==0)
 8005a98:	e011      	b.n	8005abe <SectorErase+0x4a>
    {
        HAL_Delay(20);
 8005a9a:	2014      	movs	r0, #20
 8005a9c:	f7fb fce0 	bl	8001460 <HAL_Delay>
        transferOK=ReadStatusRegister(&FlashStatus);
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ff57 	bl	8005958 <ReadStatusRegister>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75bb      	strb	r3, [r7, #22]
        i++;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
        if(i==200)
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ab8:	d101      	bne.n	8005abe <SectorErase+0x4a>
        {
            return 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e04c      	b.n	8005b58 <SectorErase+0xe4>
    while(FlashStatus.WEL==0)
 8005abe:	7c7b      	ldrb	r3, [r7, #17]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ea      	beq.n	8005a9a <SectorErase+0x26>
        }
    }
    i=0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	75fb      	strb	r3, [r7, #23]
    spi_tx_buf[1]=(Add>>16)&0xFF;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <SectorErase+0xf0>)
 8005ad0:	705a      	strb	r2, [r3, #1]
    spi_tx_buf[2]=(Add>>8)&0xFF;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <SectorErase+0xf0>)
 8005ada:	709a      	strb	r2, [r3, #2]
    spi_tx_buf[3]=Add&0xFF;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <SectorErase+0xf0>)
 8005ae2:	70da      	strb	r2, [r3, #3]

    transferOK=WriteCommand(0x20,4);
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	2020      	movs	r0, #32
 8005ae8:	f7ff ff02 	bl	80058f0 <WriteCommand>
 8005aec:	4603      	mov	r3, r0
 8005aee:	75bb      	strb	r3, [r7, #22]
    FlashStatus.WIP=1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	743b      	strb	r3, [r7, #16]
    while(FlashStatus.WIP==1)
 8005af4:	e011      	b.n	8005b1a <SectorErase+0xa6>
    {
        HAL_Delay(20);
 8005af6:	2014      	movs	r0, #20
 8005af8:	f7fb fcb2 	bl	8001460 <HAL_Delay>
        transferOK=ReadStatusRegister(&FlashStatus);
 8005afc:	f107 0310 	add.w	r3, r7, #16
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ff29 	bl	8005958 <ReadStatusRegister>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75bb      	strb	r3, [r7, #22]
        i++;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
        if(i==200)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2bc8      	cmp	r3, #200	; 0xc8
 8005b14:	d101      	bne.n	8005b1a <SectorErase+0xa6>
        {
            return 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e01e      	b.n	8005b58 <SectorErase+0xe4>
    while(FlashStatus.WIP==1)
 8005b1a:	7c3b      	ldrb	r3, [r7, #16]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0ea      	beq.n	8005af6 <SectorErase+0x82>
        }
    }
    i=0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	75fb      	strb	r3, [r7, #23]
    transferOK=ReadStatusRegister(&FlashStatus);
 8005b24:	f107 0310 	add.w	r3, r7, #16
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff15 	bl	8005958 <ReadStatusRegister>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75bb      	strb	r3, [r7, #22]
    transferOK=ReadSecurityRegister(&SecurityReg);
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ff4e 	bl	80059d8 <ReadSecurityRegister>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	75bb      	strb	r3, [r7, #22]
    if(transferOK==HAL_OK && SecurityReg.EFAIL==0 && SecurityReg.PFAIL==0)
 8005b40:	7dbb      	ldrb	r3, [r7, #22]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <SectorErase+0xe2>
 8005b46:	7b7b      	ldrb	r3, [r7, #13]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <SectorErase+0xe2>
 8005b4c:	7b3b      	ldrb	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <SectorErase+0xe2>
    {
        return 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <SectorErase+0xe4>
    }
    else
        return 0;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000990 	.word	0x20000990
 8005b64:	20000260 	.word	0x20000260

08005b68 <PageProgram>:

unsigned char PageProgram(unsigned Add , unsigned char* buf){
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
	StatusRegister_t FlashStatus;
	SecurityRegister_t SecurityReg;
	uint32_t i ;
	unsigned char transferOK;
	WREN();		// Write mode
 8005b72:	f7ff feaf 	bl	80058d4 <WREN>
	memset(spi_rx_buf,0,RxBufferSize); // sıfır ile dolduruldu rx buffer
 8005b76:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	483d      	ldr	r0, [pc, #244]	; (8005c74 <PageProgram+0x10c>)
 8005b7e:	f000 feb5 	bl	80068ec <memset>
	memset(spi_tx_buf,0,RxBufferSize); // sıfır ile dolduruldu rx buffer
 8005b82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b86:	2100      	movs	r1, #0
 8005b88:	483b      	ldr	r0, [pc, #236]	; (8005c78 <PageProgram+0x110>)
 8005b8a:	f000 feaf 	bl	80068ec <memset>

	spi_tx_buf[0]= 0x02;
 8005b8e:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <PageProgram+0x110>)
 8005b90:	2202      	movs	r2, #2
 8005b92:	701a      	strb	r2, [r3, #0]
	spi_tx_buf[1]=(Add>>16)&0xFF;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0c1b      	lsrs	r3, r3, #16
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <PageProgram+0x110>)
 8005b9c:	705a      	strb	r2, [r3, #1]
    spi_tx_buf[2]=(Add>>8)&0xFF;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <PageProgram+0x110>)
 8005ba6:	709a      	strb	r2, [r3, #2]
    spi_tx_buf[3]=Add&0xFF;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <PageProgram+0x110>)
 8005bae:	70da      	strb	r2, [r3, #3]

    for(i=4;i<257;i++)
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e00c      	b.n	8005bd0 <PageProgram+0x68>
    {
    	spi_tx_buf[i] = *buf;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	7819      	ldrb	r1, [r3, #0]
 8005bba:	4a2f      	ldr	r2, [pc, #188]	; (8005c78 <PageProgram+0x110>)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	701a      	strb	r2, [r3, #0]
    	buf++;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	603b      	str	r3, [r7, #0]
    for(i=4;i<257;i++)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	d9ee      	bls.n	8005bb6 <PageProgram+0x4e>
    }

    EXTFLASHCSPIN_LOW; 																// cs select
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2101      	movs	r1, #1
 8005bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005be0:	f7fb fed0 	bl	8001984 <HAL_GPIO_WritePin>
    transferOK = HAL_SPI_Transmit(&hspi1, &spi_tx_buf[0], 260, HAL_MAX_DELAY);		//komut ve adres
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005bec:	4922      	ldr	r1, [pc, #136]	; (8005c78 <PageProgram+0x110>)
 8005bee:	4823      	ldr	r0, [pc, #140]	; (8005c7c <PageProgram+0x114>)
 8005bf0:	f7fd ff7e 	bl	8003af0 <HAL_SPI_Transmit>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	76fb      	strb	r3, [r7, #27]
	EXTFLASHCSPIN_HIGH; 															// cs deselect
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c00:	f7fb fec0 	bl	8001984 <HAL_GPIO_WritePin>

	FlashStatus.WIP=1;
 8005c04:	2301      	movs	r3, #1
 8005c06:	753b      	strb	r3, [r7, #20]
    while(FlashStatus.WIP==1)
 8005c08:	e011      	b.n	8005c2e <PageProgram+0xc6>
    {
    	HAL_Delay(20);
 8005c0a:	2014      	movs	r0, #20
 8005c0c:	f7fb fc28 	bl	8001460 <HAL_Delay>
    	transferOK=ReadStatusRegister(&FlashStatus);
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fe9f 	bl	8005958 <ReadStatusRegister>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	76fb      	strb	r3, [r7, #27]
    	i++;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3301      	adds	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
    	if(i==200)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2bc8      	cmp	r3, #200	; 0xc8
 8005c28:	d101      	bne.n	8005c2e <PageProgram+0xc6>
    	{
    		return 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e01e      	b.n	8005c6c <PageProgram+0x104>
    while(FlashStatus.WIP==1)
 8005c2e:	7d3b      	ldrb	r3, [r7, #20]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d0ea      	beq.n	8005c0a <PageProgram+0xa2>
    	}
    }
    i=0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
    transferOK=ReadStatusRegister(&FlashStatus);
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fe8b 	bl	8005958 <ReadStatusRegister>
 8005c42:	4603      	mov	r3, r0
 8005c44:	76fb      	strb	r3, [r7, #27]
    transferOK=ReadSecurityRegister(&SecurityReg);
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fec4 	bl	80059d8 <ReadSecurityRegister>
 8005c50:	4603      	mov	r3, r0
 8005c52:	76fb      	strb	r3, [r7, #27]
    if(transferOK==HAL_OK && SecurityReg.EFAIL==0 && SecurityReg.PFAIL==0)
 8005c54:	7efb      	ldrb	r3, [r7, #27]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <PageProgram+0x102>
 8005c5a:	7c7b      	ldrb	r3, [r7, #17]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <PageProgram+0x102>
 8005c60:	7c3b      	ldrb	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <PageProgram+0x102>
    {

    	return 1;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <PageProgram+0x104>
    }
    else
        return 0;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000990 	.word	0x20000990
 8005c78:	20000260 	.word	0x20000260
 8005c7c:	2000092c 	.word	0x2000092c

08005c80 <CheckPage>:
unsigned char CheckPage(unsigned Add){
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	unsigned char transferOK ;

	memset(spi_rx_buf,0,RxBufferSize); //rx buferı 0 ile dolduruldu
 8005c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	481c      	ldr	r0, [pc, #112]	; (8005d00 <CheckPage+0x80>)
 8005c90:	f000 fe2c 	bl	80068ec <memset>
	spi_tx_buf[0]=0x03;
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <CheckPage+0x84>)
 8005c96:	2203      	movs	r2, #3
 8005c98:	701a      	strb	r2, [r3, #0]
	spi_tx_buf[1]=(Add>>16)&0xFF;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <CheckPage+0x84>)
 8005ca2:	705a      	strb	r2, [r3, #1]
    spi_tx_buf[2]=(Add>>8)&0xFF;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <CheckPage+0x84>)
 8005cac:	709a      	strb	r2, [r3, #2]
    spi_tx_buf[3]=Add&0xFF;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <CheckPage+0x84>)
 8005cb4:	70da      	strb	r2, [r3, #3]

    EXTFLASHCSPIN_LOW; 									// cs select
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cbe:	f7fb fe61 	bl	8001984 <HAL_GPIO_WritePin>

    transferOK = HAL_SPI_Transmit(&hspi1, &spi_tx_buf[0], 4, 500);	//komut ve adres
 8005cc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <CheckPage+0x84>)
 8005cca:	480f      	ldr	r0, [pc, #60]	; (8005d08 <CheckPage+0x88>)
 8005ccc:	f7fd ff10 	bl	8003af0 <HAL_SPI_Transmit>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
    transferOK = HAL_SPI_Receive(&hspi1, &spi_rx_buf[0], 260, 500);	//read
 8005cd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cdc:	4908      	ldr	r1, [pc, #32]	; (8005d00 <CheckPage+0x80>)
 8005cde:	480a      	ldr	r0, [pc, #40]	; (8005d08 <CheckPage+0x88>)
 8005ce0:	f7fe f86c 	bl	8003dbc <HAL_SPI_Receive>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
	EXTFLASHCSPIN_HIGH; // cs deselect
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2101      	movs	r1, #1
 8005cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cf0:	f7fb fe48 	bl	8001984 <HAL_GPIO_WritePin>
	return transferOK;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000990 	.word	0x20000990
 8005d04:	20000260 	.word	0x20000260
 8005d08:	2000092c 	.word	0x2000092c

08005d0c <ReadFlash>:

uint8_t ReadFlash(Mem_Handle_t* Mem_Control,SHT21_Handle_t* SHT21_1){
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	if(SHT21_1->Data_Ready==1){
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d139      	bne.n	8005d94 <ReadFlash+0x88>


	HAL_Delay(2500);
 8005d20:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005d24:	f7fb fb9c 	bl	8001460 <HAL_Delay>
	uint8_t counter_1 = 0 ;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]
	uint8_t counter_2 = 0 ;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73bb      	strb	r3, [r7, #14]
	uint8_t a=0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	737b      	strb	r3, [r7, #13]

	while(counter_1 != 50){
 8005d34:	e024      	b.n	8005d80 <ReadFlash+0x74>
		if((a = FlashIsReady()) == 1){
 8005d36:	f7ff fda5 	bl	8005884 <FlashIsReady>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	737b      	strb	r3, [r7, #13]
 8005d3e:	7b7b      	ldrb	r3, [r7, #13]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d11a      	bne.n	8005d7a <ReadFlash+0x6e>

			CheckPage((unsigned int )Mem_Control->block[Mem_Control->block_counter][Mem_Control->page_counter]);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005d52:	4619      	mov	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	440a      	add	r2, r1
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff8e 	bl	8005c80 <CheckPage>
			a=0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	737b      	strb	r3, [r7, #13]
			counter_1 = 50;
 8005d68:	2332      	movs	r3, #50	; 0x32
 8005d6a:	73fb      	strb	r3, [r7, #15]
			counter_2 = 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73bb      	strb	r3, [r7, #14]
			HAL_Delay(1000);
 8005d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d74:	f7fb fb74 	bl	8001460 <HAL_Delay>
 8005d78:	e002      	b.n	8005d80 <ReadFlash+0x74>
		}else
		{
			counter_1++;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
	while(counter_1 != 50){
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b32      	cmp	r3, #50	; 0x32
 8005d84:	d1d7      	bne.n	8005d36 <ReadFlash+0x2a>
		}
	}

	if(counter_2){
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <ReadFlash+0x84>
		return 1 ;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e002      	b.n	8005d96 <ReadFlash+0x8a>
	}else{
		return 0  ;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <ReadFlash+0x8a>
	}
	}
	return 0 ;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <WriteFlash>:

uint8_t WriteFlash(Mem_Handle_t* Mem_Control,SHT21_Handle_t* SHT21_1){
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
	if(SHT21_1->Data_Ready==1){
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d139      	bne.n	8005e26 <WriteFlash+0x88>


	HAL_Delay(2500);
 8005db2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005db6:	f7fb fb53 	bl	8001460 <HAL_Delay>
	uint8_t counter_1 = 0 ;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
	uint8_t counter_2 = 0 ;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73bb      	strb	r3, [r7, #14]
	uint8_t b = 0 ;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	737b      	strb	r3, [r7, #13]
	while(counter_1 != 50 ) {
 8005dc6:	e024      	b.n	8005e12 <WriteFlash+0x74>
		if((b = FlashIsReady()) == 1){
 8005dc8:	f7ff fd5c 	bl	8005884 <FlashIsReady>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	737b      	strb	r3, [r7, #13]
 8005dd0:	7b7b      	ldrb	r3, [r7, #13]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11a      	bne.n	8005e0c <WriteFlash+0x6e>
			//SectorErase(Mem_Control->block[Mem_Control->block_counter][Mem_Control->page_counter]);
			PageProgram(Mem_Control->block[Mem_Control->block_counter][Mem_Control->page_counter], &(Mem_Control->tx_buf[0])) ;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005de4:	4619      	mov	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0112      	lsls	r2, r2, #4
 8005dea:	440a      	add	r2, r1
 8005dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7ff feb5 	bl	8005b68 <PageProgram>
			b=0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	737b      	strb	r3, [r7, #13]
			counter_1 = 50 ;
 8005e02:	2332      	movs	r3, #50	; 0x32
 8005e04:	73fb      	strb	r3, [r7, #15]
			counter_2 = 1 ;								}
 8005e06:	2301      	movs	r3, #1
 8005e08:	73bb      	strb	r3, [r7, #14]
 8005e0a:	e002      	b.n	8005e12 <WriteFlash+0x74>
		else{
				counter_1 ++ ;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
	while(counter_1 != 50 ) {
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b32      	cmp	r3, #50	; 0x32
 8005e16:	d1d7      	bne.n	8005dc8 <WriteFlash+0x2a>
		    }

			}

if(counter_2)
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <WriteFlash+0x84>
	{
	return 1 ;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e002      	b.n	8005e28 <WriteFlash+0x8a>

	}else
	{
	return 0 ;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <WriteFlash+0x8a>
	}

	}
	return 0 ;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <NextPage>:


void NextPage(Mem_Handle_t* Mem_Control , SHT21_Handle_t* SHT21_1){
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	if(SHT21_1->Data_Ready==1){
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d159      	bne.n	8005ef8 <NextPage+0xc8>

	if((Mem_Control->page_counter < 15) & (Mem_Control->block_counter < 15)){
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005e4a:	2b0e      	cmp	r3, #14
 8005e4c:	bf94      	ite	ls
 8005e4e:	2301      	movls	r3, #1
 8005e50:	2300      	movhi	r3, #0
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005e5a:	2b0e      	cmp	r3, #14
 8005e5c:	bf94      	ite	ls
 8005e5e:	2301      	movls	r3, #1
 8005e60:	2300      	movhi	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4013      	ands	r3, r2
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <NextPage+0x4e>

		Mem_Control->page_counter++;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005e72:	3301      	adds	r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504

		Mem_Control->page_counter  = 0;
		Mem_Control->block_counter = 0;
	}
	}
}
 8005e7c:	e03c      	b.n	8005ef8 <NextPage+0xc8>
	}else  if((Mem_Control->page_counter == 15) & (Mem_Control->block_counter < 15))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005e84:	2b0f      	cmp	r3, #15
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005e94:	2b0e      	cmp	r3, #14
 8005e96:	bf94      	ite	ls
 8005e98:	2301      	movls	r3, #1
 8005e9a:	2300      	movhi	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <NextPage+0x90>
		Mem_Control->page_counter = 0;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		Mem_Control->block_counter++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
}
 8005ebe:	e01b      	b.n	8005ef8 <NextPage+0xc8>
	}else if((Mem_Control->page_counter == 15) & (Mem_Control->block_counter == 15)){
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3505 	ldrb.w	r3, [r3, #1285]	; 0x505
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <NextPage+0xc8>
		Mem_Control->page_counter  = 0;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		Mem_Control->block_counter = 0;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2505 	strb.w	r2, [r3, #1285]	; 0x505
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <Accumulation_Init>:

void Accumulation_Init(SHT21_Handle_t* SHT21_1){
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	SHT21_1->FlashData_Cnt=0; // counter 0dan 12 ye kadar sayar ve 12ye(12 dahil) gelinceye kadar arada bir buffera biriktirilir datalar .
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	SHT21_1->Data_Ready = 0 ;  // Data dolana kadar 0 kalıcak olan counter .
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <Accumulation>:
void Accumulation(SHT21_Handle_t *SHT21_1, Mem_Handle_t *Mem_Control) {
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	uint16_t i;
	char AraData[10];
	memset(AraData, 0, 10);
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	220a      	movs	r2, #10
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fcd6 	bl	80068ec <memset>
	if (SHT21_1->FlashData_Cnt <= 16) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d830      	bhi.n	8005fac <Accumulation+0x84>
		sprintf(AraData, "T=%.2lf", SHT21_1->son_sicaklik); //sicaklik ara dataya alındı
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005f50:	f107 000c 	add.w	r0, r7, #12
 8005f54:	461a      	mov	r2, r3
 8005f56:	4623      	mov	r3, r4
 8005f58:	492b      	ldr	r1, [pc, #172]	; (8006008 <Accumulation+0xe0>)
 8005f5a:	f001 fb13 	bl	8007584 <siprintf>
		strcat(SHT21_1->FlashData, AraData);		//sicaklik ana dataya alındı
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3348      	adds	r3, #72	; 0x48
 8005f62:	f107 020c 	add.w	r2, r7, #12
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 fb2b 	bl	80075c4 <strcat>
		sprintf(AraData, "H=%.2lf", SHT21_1->son_nem);	 //nem ara dataya alındı
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8005f74:	f107 000c 	add.w	r0, r7, #12
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	4923      	ldr	r1, [pc, #140]	; (800600c <Accumulation+0xe4>)
 8005f7e:	f001 fb01 	bl	8007584 <siprintf>
		strcat(SHT21_1->FlashData, AraData);			//nem ana dataya alındı
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3348      	adds	r3, #72	; 0x48
 8005f86:	f107 020c 	add.w	r2, r7, #12
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fb19 	bl	80075c4 <strcat>
		SHT21_1->FlashData_Cnt++;//buffer'ı dolduracak sayıda counter arttırıyoruz
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		SHT21_1->Data_Ready = 0;						 //biriktirmeye devam et
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
			Mem_Control->tx_buf[i] = SHT21_1->FlashData[i];	// tx bufferına biriktirilen veri alındı
		}
		memset(SHT21_1->FlashData, 0, 260);				//datayı geçici olarak saklayan buffer resetlendi
		SHT21_1->Data_Ready = 1; 						//biriktirme yeterli veriyi yolla
	}
}
 8005faa:	e029      	b.n	8006000 <Accumulation+0xd8>
	} else if (SHT21_1->FlashData_Cnt > 16) {				// doluluğa ulaştı
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d924      	bls.n	8006000 <Accumulation+0xd8>
		SHT21_1->FlashData_Cnt = 0;						    //counter sıfırlandı
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		for (i = 0; i < 260; i++) {
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	82fb      	strh	r3, [r7, #22]
 8005fc2:	e00d      	b.n	8005fe0 <Accumulation+0xb8>
			Mem_Control->tx_buf[i] = SHT21_1->FlashData[i];	// tx bufferına biriktirilen veri alındı
 8005fc4:	8afa      	ldrh	r2, [r7, #22]
 8005fc6:	8afb      	ldrh	r3, [r7, #22]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	460a      	mov	r2, r1
 8005fd6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		for (i = 0; i < 260; i++) {
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	82fb      	strh	r3, [r7, #22]
 8005fe0:	8afb      	ldrh	r3, [r7, #22]
 8005fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe6:	d3ed      	bcc.n	8005fc4 <Accumulation+0x9c>
		memset(SHT21_1->FlashData, 0, 260);				//datayı geçici olarak saklayan buffer resetlendi
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3348      	adds	r3, #72	; 0x48
 8005fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fc7a 	bl	80068ec <memset>
		SHT21_1->Data_Ready = 1; 						//biriktirme yeterli veriyi yolla
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd90      	pop	{r4, r7, pc}
 8006008:	0800a3b0 	.word	0x0800a3b0
 800600c:	0800a3b8 	.word	0x0800a3b8

08006010 <Send_Flash>:
void Send_Flash(Mem_Handle_t *Mem_Control, SHT21_Handle_t *SHT21_1){
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]

	Accumulation((SHT21_Handle_t *)SHT21_1, (Mem_Handle_t *)Mem_Control); //biriktirme
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f7ff ff83 	bl	8005f28 <Accumulation>
	WriteFlash((Mem_Handle_t *)Mem_Control, (SHT21_Handle_t *)SHT21_1); //yazma
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff feba 	bl	8005d9e <WriteFlash>
	ReadFlash((Mem_Handle_t *)Mem_Control, (SHT21_Handle_t *)SHT21_1); //okuma
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fe6d 	bl	8005d0c <ReadFlash>
	NextPage((Mem_Handle_t *)Mem_Control, (SHT21_Handle_t *)SHT21_1);//page ilerleme
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fefb 	bl	8005e30 <NextPage>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HY2004A8_Init>:
#define HY2004A8_1LINE               0x00
#define HY2004A8_5x8DOTS             0x00



void HY2004A8_Init(uint8_t cols, uint8_t rows) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	460a      	mov	r2, r1
 800604e:	71fb      	strb	r3, [r7, #7]
 8006050:	4613      	mov	r3, r2
 8006052:	71bb      	strb	r3, [r7, #6]

	/* Pinout Aktivasyonu */
	HY2004A8_InitPins();
 8006054:	f000 f99e 	bl	8006394 <HY2004A8_InitPins>

	/* En az 40ms */
	HY2004A8_Delay(45000);
 8006058:	202d      	movs	r0, #45	; 0x2d
 800605a:	f7fb fa01 	bl	8001460 <HAL_Delay>

	/* LCD Genislik ve yükseklik ayarlama */
	HY2004A8_Opts.Rows = rows;
 800605e:	4a29      	ldr	r2, [pc, #164]	; (8006104 <HY2004A8_Init+0xc0>)
 8006060:	79bb      	ldrb	r3, [r7, #6]
 8006062:	70d3      	strb	r3, [r2, #3]
	HY2004A8_Opts.Cols = cols;
 8006064:	4a27      	ldr	r2, [pc, #156]	; (8006104 <HY2004A8_Init+0xc0>)
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	7113      	strb	r3, [r2, #4]

	/* Imleci baslangica getirmek */
	HY2004A8_Opts.currentX = 0;
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <HY2004A8_Init+0xc0>)
 800606c:	2200      	movs	r2, #0
 800606e:	715a      	strb	r2, [r3, #5]
	HY2004A8_Opts.currentY = 0;
 8006070:	4b24      	ldr	r3, [pc, #144]	; (8006104 <HY2004A8_Init+0xc0>)
 8006072:	2200      	movs	r2, #0
 8006074:	719a      	strb	r2, [r3, #6]

	HY2004A8_Opts.DisplayFunction = HY2004A8_4BITMODE | HY2004A8_5x8DOTS | HY2004A8_1LINE;
 8006076:	4b23      	ldr	r3, [pc, #140]	; (8006104 <HY2004A8_Init+0xc0>)
 8006078:	2200      	movs	r2, #0
 800607a:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 800607c:	79bb      	ldrb	r3, [r7, #6]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d906      	bls.n	8006090 <HY2004A8_Init+0x4c>
		HY2004A8_Opts.DisplayFunction |= HY2004A8_2LINE;
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <HY2004A8_Init+0xc0>)
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HY2004A8_Init+0xc0>)
 800608e:	705a      	strb	r2, [r3, #1]
	}

	/* 4bit mod aktivasyon 1 */
	HY2004A8_Cmd4bit(0x03);
 8006090:	2003      	movs	r0, #3
 8006092:	f000 f8ed 	bl	8006270 <HY2004A8_Cmd4bit>
	HY2004A8_Delay(4500);
 8006096:	2004      	movs	r0, #4
 8006098:	f7fb f9e2 	bl	8001460 <HAL_Delay>

	/* 4bit mod aktivasyon 2 */
	HY2004A8_Cmd4bit(0x03);
 800609c:	2003      	movs	r0, #3
 800609e:	f000 f8e7 	bl	8006270 <HY2004A8_Cmd4bit>
	HY2004A8_Delay(4500);
 80060a2:	2004      	movs	r0, #4
 80060a4:	f7fb f9dc 	bl	8001460 <HAL_Delay>

	/* 4bit mod aktivasyon 3 */
	HY2004A8_Cmd4bit(0x03);
 80060a8:	2003      	movs	r0, #3
 80060aa:	f000 f8e1 	bl	8006270 <HY2004A8_Cmd4bit>
	HY2004A8_Delay(4500);
 80060ae:	2004      	movs	r0, #4
 80060b0:	f7fb f9d6 	bl	8001460 <HAL_Delay>

	/* 4-bit arayüzü ayarlama */
	HY2004A8_Cmd4bit(0x02);
 80060b4:	2002      	movs	r0, #2
 80060b6:	f000 f8db 	bl	8006270 <HY2004A8_Cmd4bit>
	HY2004A8_Delay(100);
 80060ba:	2000      	movs	r0, #0
 80060bc:	f7fb f9d0 	bl	8001460 <HAL_Delay>

	/* Satir, yazi tipi ayarlari */
	HY2004A8_Cmd(HY2004A8_FUNCTIONSET | HY2004A8_Opts.DisplayFunction);
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HY2004A8_Init+0xc0>)
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	f043 0320 	orr.w	r3, r3, #32
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f898 	bl	8006200 <HY2004A8_Cmd>

	/* Cursorsuz ekran defaultu ayarlama */
	HY2004A8_Opts.DisplayControl = HY2004A8_DISPLAYON;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <HY2004A8_Init+0xc0>)
 80060d2:	2204      	movs	r2, #4
 80060d4:	701a      	strb	r2, [r3, #0]
	HY2004A8_DisplayOn();
 80060d6:	f000 f87d 	bl	80061d4 <HY2004A8_DisplayOn>

	/* LCD Temizleme */
	HY2004A8_Clear();
 80060da:	f000 f815 	bl	8006108 <HY2004A8_Clear>

	/* Varsayilan yazitipi yönergeleri */
	HY2004A8_Opts.DisplayMode = HY2004A8_ENTRYLEFT | HY2004A8_ENTRYSHIFTDECREMENT;
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HY2004A8_Init+0xc0>)
 80060e0:	2202      	movs	r2, #2
 80060e2:	709a      	strb	r2, [r3, #2]
	HY2004A8_Cmd(HY2004A8_ENTRYMODESET | HY2004A8_Opts.DisplayMode);
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HY2004A8_Init+0xc0>)
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	f043 0304 	orr.w	r3, r3, #4
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f886 	bl	8006200 <HY2004A8_Cmd>

	/* 4,5ms delay */
	HY2004A8_Delay(4500);
 80060f4:	2004      	movs	r0, #4
 80060f6:	f7fb f9b3 	bl	8001460 <HAL_Delay>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000024c 	.word	0x2000024c

08006108 <HY2004A8_Clear>:

void HY2004A8_Clear(void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
	HY2004A8_Cmd(HY2004A8_CLEARDISPLAY);
 800610c:	2001      	movs	r0, #1
 800610e:	f000 f877 	bl	8006200 <HY2004A8_Cmd>
	HY2004A8_Delay(3000);
 8006112:	2003      	movs	r0, #3
 8006114:	f7fb f9a4 	bl	8001460 <HAL_Delay>
}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}

0800611c <HY2004A8_Puts>:

void HY2004A8_Puts(uint8_t x, uint8_t y, char* str) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	603a      	str	r2, [r7, #0]
 8006126:	71fb      	strb	r3, [r7, #7]
 8006128:	460b      	mov	r3, r1
 800612a:	71bb      	strb	r3, [r7, #6]
	HY2004A8_CursorSet(x, y);
 800612c:	79ba      	ldrb	r2, [r7, #6]
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f8fc 	bl	8006330 <HY2004A8_CursorSet>
	while (*str) {
 8006138:	e042      	b.n	80061c0 <HY2004A8_Puts+0xa4>
		if (HY2004A8_Opts.currentX >= HY2004A8_Opts.Cols) {
 800613a:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800613c:	795a      	ldrb	r2, [r3, #5]
 800613e:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006140:	791b      	ldrb	r3, [r3, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d310      	bcc.n	8006168 <HY2004A8_Puts+0x4c>
			HY2004A8_Opts.currentX = 0;
 8006146:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006148:	2200      	movs	r2, #0
 800614a:	715a      	strb	r2, [r3, #5]
			HY2004A8_Opts.currentY++;
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800614e:	799b      	ldrb	r3, [r3, #6]
 8006150:	3301      	adds	r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006156:	719a      	strb	r2, [r3, #6]
			HY2004A8_CursorSet(HY2004A8_Opts.currentX, HY2004A8_Opts.currentY);
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800615a:	795a      	ldrb	r2, [r3, #5]
 800615c:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800615e:	799b      	ldrb	r3, [r3, #6]
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 f8e4 	bl	8006330 <HY2004A8_CursorSet>
		}
		if (*str == '\n') {
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b0a      	cmp	r3, #10
 800616e:	d10e      	bne.n	800618e <HY2004A8_Puts+0x72>
			HY2004A8_Opts.currentY++;
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006172:	799b      	ldrb	r3, [r3, #6]
 8006174:	3301      	adds	r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800617a:	719a      	strb	r2, [r3, #6]
			HY2004A8_CursorSet(HY2004A8_Opts.currentX, HY2004A8_Opts.currentY);
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <HY2004A8_Puts+0xb4>)
 800617e:	795a      	ldrb	r2, [r3, #5]
 8006180:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006182:	799b      	ldrb	r3, [r3, #6]
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f000 f8d2 	bl	8006330 <HY2004A8_CursorSet>
 800618c:	e015      	b.n	80061ba <HY2004A8_Puts+0x9e>
		} else if (*str == '\r') {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b0d      	cmp	r3, #13
 8006194:	d106      	bne.n	80061a4 <HY2004A8_Puts+0x88>
			HY2004A8_CursorSet(0, HY2004A8_Opts.currentY);
 8006196:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <HY2004A8_Puts+0xb4>)
 8006198:	799b      	ldrb	r3, [r3, #6]
 800619a:	4619      	mov	r1, r3
 800619c:	2000      	movs	r0, #0
 800619e:	f000 f8c7 	bl	8006330 <HY2004A8_CursorSet>
 80061a2:	e00a      	b.n	80061ba <HY2004A8_Puts+0x9e>
		} else {
			HY2004A8_Data(*str);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f845 	bl	8006238 <HY2004A8_Data>
			HY2004A8_Opts.currentX++;
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HY2004A8_Puts+0xb4>)
 80061b0:	795b      	ldrb	r3, [r3, #5]
 80061b2:	3301      	adds	r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HY2004A8_Puts+0xb4>)
 80061b8:	715a      	strb	r2, [r3, #5]
		}
		str++;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	3301      	adds	r3, #1
 80061be:	603b      	str	r3, [r7, #0]
	while (*str) {
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1b8      	bne.n	800613a <HY2004A8_Puts+0x1e>
	}
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2000024c 	.word	0x2000024c

080061d4 <HY2004A8_DisplayOn>:

void HY2004A8_DisplayOn(void) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	HY2004A8_Opts.DisplayControl |= HY2004A8_DISPLAYON;
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <HY2004A8_DisplayOn+0x28>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f043 0304 	orr.w	r3, r3, #4
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <HY2004A8_DisplayOn+0x28>)
 80061e4:	701a      	strb	r2, [r3, #0]
	HY2004A8_Cmd(HY2004A8_DISPLAYCONTROL | HY2004A8_Opts.DisplayControl);
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HY2004A8_DisplayOn+0x28>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	f043 0308 	orr.w	r3, r3, #8
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f805 	bl	8006200 <HY2004A8_Cmd>
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2000024c 	.word	0x2000024c

08006200 <HY2004A8_Cmd>:
	HY2004A8_CursorSet(x, y);
	HY2004A8_Data(location);
}

/* Özel fonksyionlar */
static void HY2004A8_Cmd(uint8_t cmd) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
	/* Komut Modu */
	HY2004A8_RS_LOW;
 800620a:	2200      	movs	r2, #0
 800620c:	2104      	movs	r1, #4
 800620e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006212:	f7fb fbb7 	bl	8001984 <HAL_GPIO_WritePin>

	/* High nibble */
	HY2004A8_Cmd4bit(cmd >> 4);
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	b2db      	uxtb	r3, r3
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f827 	bl	8006270 <HY2004A8_Cmd4bit>
	/* Low nibble */
	HY2004A8_Cmd4bit(cmd & 0x0F);
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	b2db      	uxtb	r3, r3
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f820 	bl	8006270 <HY2004A8_Cmd4bit>
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HY2004A8_Data>:

static void HY2004A8_Data(uint8_t data) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
	/* Data Modu */
	HY2004A8_RS_HIGH;
 8006242:	2201      	movs	r2, #1
 8006244:	2104      	movs	r1, #4
 8006246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800624a:	f7fb fb9b 	bl	8001984 <HAL_GPIO_WritePin>

	/* High nibble */
	HY2004A8_Cmd4bit(data >> 4);
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f80b 	bl	8006270 <HY2004A8_Cmd4bit>
	/* Low nibble */
	HY2004A8_Cmd4bit(data & 0x0F);
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	b2db      	uxtb	r3, r3
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f804 	bl	8006270 <HY2004A8_Cmd4bit>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HY2004A8_Cmd4bit>:

static void HY2004A8_Cmd4bit(uint8_t cmd) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
	/* Çikis portlari */
	if((cmd & 0x08))HAL_GPIO_WritePin(HY2004A8_D7_GPIO_Port, HY2004A8_D7_Pin, GPIO_PIN_SET); else HAL_GPIO_WritePin(HY2004A8_D7_GPIO_Port, HY2004A8_D7_Pin, GPIO_PIN_RESET);
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <HY2004A8_Cmd4bit+0x22>
 8006284:	2201      	movs	r2, #1
 8006286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800628a:	4828      	ldr	r0, [pc, #160]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 800628c:	f7fb fb7a 	bl	8001984 <HAL_GPIO_WritePin>
 8006290:	e005      	b.n	800629e <HY2004A8_Cmd4bit+0x2e>
 8006292:	2200      	movs	r2, #0
 8006294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006298:	4824      	ldr	r0, [pc, #144]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 800629a:	f7fb fb73 	bl	8001984 <HAL_GPIO_WritePin>
	if((cmd & 0x04))HAL_GPIO_WritePin(HY2004A8_D6_GPIO_Port, HY2004A8_D6_Pin, GPIO_PIN_SET); else HAL_GPIO_WritePin(HY2004A8_D6_GPIO_Port, HY2004A8_D6_Pin, GPIO_PIN_RESET);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HY2004A8_Cmd4bit+0x44>
 80062a8:	2201      	movs	r2, #1
 80062aa:	2140      	movs	r1, #64	; 0x40
 80062ac:	481f      	ldr	r0, [pc, #124]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062ae:	f7fb fb69 	bl	8001984 <HAL_GPIO_WritePin>
 80062b2:	e004      	b.n	80062be <HY2004A8_Cmd4bit+0x4e>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2140      	movs	r1, #64	; 0x40
 80062b8:	481c      	ldr	r0, [pc, #112]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062ba:	f7fb fb63 	bl	8001984 <HAL_GPIO_WritePin>
	if((cmd & 0x02))HAL_GPIO_WritePin(HY2004A8_D5_GPIO_Port, HY2004A8_D5_Pin, GPIO_PIN_SET); else HAL_GPIO_WritePin(HY2004A8_D5_GPIO_Port, HY2004A8_D5_Pin, GPIO_PIN_RESET);
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HY2004A8_Cmd4bit+0x64>
 80062c8:	2201      	movs	r2, #1
 80062ca:	2120      	movs	r1, #32
 80062cc:	4817      	ldr	r0, [pc, #92]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062ce:	f7fb fb59 	bl	8001984 <HAL_GPIO_WritePin>
 80062d2:	e004      	b.n	80062de <HY2004A8_Cmd4bit+0x6e>
 80062d4:	2200      	movs	r2, #0
 80062d6:	2120      	movs	r1, #32
 80062d8:	4814      	ldr	r0, [pc, #80]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062da:	f7fb fb53 	bl	8001984 <HAL_GPIO_WritePin>
	if((cmd & 0x01))HAL_GPIO_WritePin(HY2004A8_D4_GPIO_Port, HY2004A8_D4_Pin, GPIO_PIN_SET); else HAL_GPIO_WritePin(HY2004A8_D4_GPIO_Port, HY2004A8_D4_Pin, GPIO_PIN_RESET);
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HY2004A8_Cmd4bit+0x84>
 80062e8:	2201      	movs	r2, #1
 80062ea:	2110      	movs	r1, #16
 80062ec:	480f      	ldr	r0, [pc, #60]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062ee:	f7fb fb49 	bl	8001984 <HAL_GPIO_WritePin>
 80062f2:	e004      	b.n	80062fe <HY2004A8_Cmd4bit+0x8e>
 80062f4:	2200      	movs	r2, #0
 80062f6:	2110      	movs	r1, #16
 80062f8:	480c      	ldr	r0, [pc, #48]	; (800632c <HY2004A8_Cmd4bit+0xbc>)
 80062fa:	f7fb fb43 	bl	8001984 <HAL_GPIO_WritePin>
	HY2004A8_E_BLINK;
 80062fe:	2201      	movs	r2, #1
 8006300:	2102      	movs	r1, #2
 8006302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006306:	f7fb fb3d 	bl	8001984 <HAL_GPIO_WritePin>
 800630a:	2000      	movs	r0, #0
 800630c:	f7fb f8a8 	bl	8001460 <HAL_Delay>
 8006310:	2200      	movs	r2, #0
 8006312:	2102      	movs	r1, #2
 8006314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006318:	f7fb fb34 	bl	8001984 <HAL_GPIO_WritePin>
 800631c:	2000      	movs	r0, #0
 800631e:	f7fb f89f 	bl	8001460 <HAL_Delay>
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	48000400 	.word	0x48000400

08006330 <HY2004A8_CursorSet>:

static void HY2004A8_CursorSet(uint8_t col, uint8_t row) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	460a      	mov	r2, r1
 800633a:	71fb      	strb	r3, [r7, #7]
 800633c:	4613      	mov	r3, r2
 800633e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <HY2004A8_CursorSet+0x5c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]

	/* Baslangica dön */
	if (row >= HY2004A8_Opts.Rows) {
 8006346:	4b12      	ldr	r3, [pc, #72]	; (8006390 <HY2004A8_CursorSet+0x60>)
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	79ba      	ldrb	r2, [r7, #6]
 800634c:	429a      	cmp	r2, r3
 800634e:	d301      	bcc.n	8006354 <HY2004A8_CursorSet+0x24>
		row = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	71bb      	strb	r3, [r7, #6]
	}

	/* satir/sütun atama */
	HY2004A8_Opts.currentX = col;
 8006354:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HY2004A8_CursorSet+0x60>)
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	7153      	strb	r3, [r2, #5]
	HY2004A8_Opts.currentY = row;
 800635a:	4a0d      	ldr	r2, [pc, #52]	; (8006390 <HY2004A8_CursorSet+0x60>)
 800635c:	79bb      	ldrb	r3, [r7, #6]
 800635e:	7193      	strb	r3, [r2, #6]

	/* location adress atama */
	HY2004A8_Cmd(HY2004A8_SETDDRAMADDR | (col + row_offsets[row]));
 8006360:	79bb      	ldrb	r3, [r7, #6]
 8006362:	f107 0210 	add.w	r2, r7, #16
 8006366:	4413      	add	r3, r2
 8006368:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	4413      	add	r3, r2
 8006370:	b2db      	uxtb	r3, r3
 8006372:	b25b      	sxtb	r3, r3
 8006374:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006378:	b25b      	sxtb	r3, r3
 800637a:	b2db      	uxtb	r3, r3
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff ff3f 	bl	8006200 <HY2004A8_Cmd>
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	0800a3c0 	.word	0x0800a3c0
 8006390:	2000024c 	.word	0x2000024c

08006394 <HY2004A8_InitPins>:

static void HY2004A8_InitPins(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
	/* low seviye pin atama */
	HAL_GPIO_WritePin(HY2004A8_RS_GPIO_Port, HY2004A8_RS_Pin,GPIO_PIN_RESET);
 8006398:	2200      	movs	r2, #0
 800639a:	2104      	movs	r1, #4
 800639c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a0:	f7fb faf0 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HY2004A8_E_GPIO_Port, HY2004A8_E_Pin,GPIO_PIN_RESET);
 80063a4:	2200      	movs	r2, #0
 80063a6:	2102      	movs	r1, #2
 80063a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063ac:	f7fb faea 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HY2004A8_D4_GPIO_Port, HY2004A8_D4_Pin,GPIO_PIN_RESET);
 80063b0:	2200      	movs	r2, #0
 80063b2:	2110      	movs	r1, #16
 80063b4:	480a      	ldr	r0, [pc, #40]	; (80063e0 <HY2004A8_InitPins+0x4c>)
 80063b6:	f7fb fae5 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HY2004A8_D5_GPIO_Port, HY2004A8_D5_Pin,GPIO_PIN_RESET);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2120      	movs	r1, #32
 80063be:	4808      	ldr	r0, [pc, #32]	; (80063e0 <HY2004A8_InitPins+0x4c>)
 80063c0:	f7fb fae0 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HY2004A8_D6_GPIO_Port, HY2004A8_D6_Pin,GPIO_PIN_RESET);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2140      	movs	r1, #64	; 0x40
 80063c8:	4805      	ldr	r0, [pc, #20]	; (80063e0 <HY2004A8_InitPins+0x4c>)
 80063ca:	f7fb fadb 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HY2004A8_D7_GPIO_Port, HY2004A8_D7_Pin,GPIO_PIN_RESET);
 80063ce:	2200      	movs	r2, #0
 80063d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063d4:	4802      	ldr	r0, [pc, #8]	; (80063e0 <HY2004A8_InitPins+0x4c>)
 80063d6:	f7fb fad5 	bl	8001984 <HAL_GPIO_WritePin>
}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	48000400 	.word	0x48000400

080063e4 <Send_Lcd>:
/*
 * @brief: sending data to lcd
 * note: Testini yapmadın. YAP
 */
void Send_Lcd(SHT21_Handle_t* sht21_1){
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	sprintf(sht21_1->data_T, "Sicaklik :%.2lf\n", sht21_1->son_sicaklik);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f103 0010 	add.w	r0, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80063f8:	461a      	mov	r2, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	4913      	ldr	r1, [pc, #76]	; (800644c <Send_Lcd+0x68>)
 80063fe:	f001 f8c1 	bl	8007584 <siprintf>
	HY2004A8_Puts(1, 0, sht21_1->data_T);				//send data to LCD
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3310      	adds	r3, #16
 8006406:	461a      	mov	r2, r3
 8006408:	2100      	movs	r1, #0
 800640a:	2001      	movs	r0, #1
 800640c:	f7ff fe86 	bl	800611c <HY2004A8_Puts>
	HAL_Delay(500);
 8006410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006414:	f7fb f824 	bl	8001460 <HAL_Delay>

	sprintf(sht21_1->data_H, "Nem :%% %.2lf\n ", sht21_1->son_nem);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006424:	461a      	mov	r2, r3
 8006426:	4623      	mov	r3, r4
 8006428:	4909      	ldr	r1, [pc, #36]	; (8006450 <Send_Lcd+0x6c>)
 800642a:	f001 f8ab 	bl	8007584 <siprintf>
	HY2004A8_Puts(1, 1, sht21_1->data_H);				//send data to LCD
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	461a      	mov	r2, r3
 8006434:	2101      	movs	r1, #1
 8006436:	2001      	movs	r0, #1
 8006438:	f7ff fe70 	bl	800611c <HY2004A8_Puts>
	HAL_Delay(500);
 800643c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006440:	f7fb f80e 	bl	8001460 <HAL_Delay>

}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bd90      	pop	{r4, r7, pc}
 800644c:	0800a3c4 	.word	0x0800a3c4
 8006450:	0800a3d8 	.word	0x0800a3d8

08006454 <sht21_start_RH_HM>:
#include "main.h"
#include "sht21.h"

extern I2C_HandleTypeDef hi2c1;

void sht21_start_RH_HM(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af02      	add	r7, sp, #8

	uint8_t data[] = { START_HUM_HM };
 800645a:	23e5      	movs	r3, #229	; 0xe5
 800645c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, data, 1,
 800645e:	1d3a      	adds	r2, r7, #4
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2301      	movs	r3, #1
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	4805      	ldr	r0, [pc, #20]	; (8006480 <sht21_start_RH_HM+0x2c>)
 800646c:	f7fb fb32 	bl	8001ad4 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(200);
 8006470:	20c8      	movs	r0, #200	; 0xc8
 8006472:	f7fa fff5 	bl	8001460 <HAL_Delay>

}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000364 	.word	0x20000364

08006484 <sht21_start_T_HM>:
void sht21_start_T_HM(void) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af02      	add	r7, sp, #8

	uint8_t data[] = { START_TEMP_HM };
 800648a:	23e3      	movs	r3, #227	; 0xe3
 800648c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, data, 1,
 800648e:	1d3a      	adds	r2, r7, #4
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	2301      	movs	r3, #1
 8006498:	2180      	movs	r1, #128	; 0x80
 800649a:	4805      	ldr	r0, [pc, #20]	; (80064b0 <sht21_start_T_HM+0x2c>)
 800649c:	f7fb fb1a 	bl	8001ad4 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(200);
 80064a0:	20c8      	movs	r0, #200	; 0xc8
 80064a2:	f7fa ffdd 	bl	8001460 <HAL_Delay>

}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000364 	.word	0x20000364

080064b4 <sht21_read_RH_HM>:
void sht21_read_RH_HM(SHT21_Handle_t *sht21_1) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
	uint8_t data[1];
	data[1] = READ_ADDRESS;
 80064bc:	2381      	movs	r3, #129	; 0x81
 80064be:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, (uint8_t*) data, 1,
 80064c0:	f107 020c 	add.w	r2, r7, #12
 80064c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2301      	movs	r3, #1
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	4819      	ldr	r0, [pc, #100]	; (8006534 <sht21_read_RH_HM+0x80>)
 80064d0:	f7fb fb00 	bl	8001ad4 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, (uint8_t) READ_ADDRESS, sht21_1->RH_DATA, 2,
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2302      	movs	r3, #2
 80064de:	2181      	movs	r1, #129	; 0x81
 80064e0:	4814      	ldr	r0, [pc, #80]	; (8006534 <sht21_read_RH_HM+0x80>)
 80064e2:	f7fb fbeb 	bl	8001cbc <HAL_I2C_Master_Receive>
			1000);
	HAL_Delay(200);
 80064e6:	20c8      	movs	r0, #200	; 0xc8
 80064e8:	f7fa ffba 	bl	8001460 <HAL_Delay>

	sht21_1->Humidity_Value[0] = sht21_1->RH_DATA[0]; //MSB
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	811a      	strh	r2, [r3, #8]
	sht21_1->Humidity_Value[0] = sht21_1->Humidity_Value[0] << 8;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	891b      	ldrh	r3, [r3, #8]
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	811a      	strh	r2, [r3, #8]
	sht21_1->Humidity_Value[1] = sht21_1->RH_DATA[1]; //LSB
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	815a      	strh	r2, [r3, #10]
	sht21_1->Humidity_Value[1] = sht21_1->Humidity_Value[1]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	895b      	ldrh	r3, [r3, #10]
			& ((uint16_t) LSB_CONFIG);
 8006510:	f023 030f 	bic.w	r3, r3, #15
 8006514:	b29a      	uxth	r2, r3
	sht21_1->Humidity_Value[1] = sht21_1->Humidity_Value[1]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	815a      	strh	r2, [r3, #10]
	sht21_1->Humidity = sht21_1->Humidity_Value[0] | sht21_1->Humidity_Value[1];
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	891a      	ldrh	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	895b      	ldrh	r3, [r3, #10]
 8006522:	4313      	orrs	r3, r2
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	81da      	strh	r2, [r3, #14]

}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000364 	.word	0x20000364

08006538 <sht21_read_T_HM>:

void sht21_read_T_HM(SHT21_Handle_t *sht21_1) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]

	uint8_t data[1];
	data[1] = READ_ADDRESS;
 8006540:	2381      	movs	r3, #129	; 0x81
 8006542:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t) WRITE_ADDRESS, (uint8_t*) data, 1,
 8006544:	f107 020c 	add.w	r2, r7, #12
 8006548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2301      	movs	r3, #1
 8006550:	2180      	movs	r1, #128	; 0x80
 8006552:	4819      	ldr	r0, [pc, #100]	; (80065b8 <sht21_read_T_HM+0x80>)
 8006554:	f7fb fabe 	bl	8001ad4 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, (uint8_t) READ_ADDRESS, sht21_1->T_DATA, 2,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	2302      	movs	r3, #2
 8006564:	2181      	movs	r1, #129	; 0x81
 8006566:	4814      	ldr	r0, [pc, #80]	; (80065b8 <sht21_read_T_HM+0x80>)
 8006568:	f7fb fba8 	bl	8001cbc <HAL_I2C_Master_Receive>
			1000);
	HAL_Delay(200);
 800656c:	20c8      	movs	r0, #200	; 0xc8
 800656e:	f7fa ff77 	bl	8001460 <HAL_Delay>

	sht21_1->Temperature_Value[0] = sht21_1->T_DATA[0]; //MSB
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	789b      	ldrb	r3, [r3, #2]
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	809a      	strh	r2, [r3, #4]
	sht21_1->Temperature_Value[0] = sht21_1->Temperature_Value[0] << 8;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	889b      	ldrh	r3, [r3, #4]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	809a      	strh	r2, [r3, #4]
	sht21_1->Temperature_Value[1] = sht21_1->T_DATA[1]; //LSB
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	78db      	ldrb	r3, [r3, #3]
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	80da      	strh	r2, [r3, #6]
	sht21_1->Temperature_Value[1] = sht21_1->Temperature_Value[1]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	88db      	ldrh	r3, [r3, #6]
			& ((uint16_t) LSB_CONFIG);
 8006596:	f023 030f 	bic.w	r3, r3, #15
 800659a:	b29a      	uxth	r2, r3
	sht21_1->Temperature_Value[1] = sht21_1->Temperature_Value[1]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	80da      	strh	r2, [r3, #6]
	sht21_1->Temperature = sht21_1->Temperature_Value[0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	889a      	ldrh	r2, [r3, #4]
			| sht21_1->Temperature_Value[1];
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	88db      	ldrh	r3, [r3, #6]
	sht21_1->Temperature = sht21_1->Temperature_Value[0]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	819a      	strh	r2, [r3, #12]

}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000364 	.word	0x20000364
 80065bc:	00000000 	.word	0x00000000

080065c0 <sht21_cal_temp>:

void sht21_cal_temp(SHT21_Handle_t *sht21_1) {
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	sht21_1->son_sicaklik = (-46.85)
			+ (175.2 * (double) sht21_1->Temperature / 65536); //Calculate Temperature
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	899b      	ldrh	r3, [r3, #12]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7f9 ffa1 	bl	8000514 <__aeabi_ui2d>
 80065d2:	a314      	add	r3, pc, #80	; (adr r3, 8006624 <sht21_cal_temp+0x64>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7fa f816 	bl	8000608 <__aeabi_dmul>
 80065dc:	4603      	mov	r3, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4618      	mov	r0, r3
 80065e2:	4621      	mov	r1, r4
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <sht21_cal_temp+0x60>)
 80065ea:	f7fa f937 	bl	800085c <__aeabi_ddiv>
 80065ee:	4603      	mov	r3, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	4618      	mov	r0, r3
 80065f4:	4621      	mov	r1, r4
 80065f6:	a308      	add	r3, pc, #32	; (adr r3, 8006618 <sht21_cal_temp+0x58>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7f9 fe4c 	bl	8000298 <__aeabi_dsub>
 8006600:	4603      	mov	r3, r0
 8006602:	460c      	mov	r4, r1
	sht21_1->son_sicaklik = (-46.85)
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	bd90      	pop	{r4, r7, pc}
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
 8006618:	cccccccd 	.word	0xcccccccd
 800661c:	40476ccc 	.word	0x40476ccc
 8006620:	40f00000 	.word	0x40f00000
 8006624:	66666666 	.word	0x66666666
 8006628:	4065e666 	.word	0x4065e666

0800662c <sht21_cal_hum>:

void sht21_cal_hum(SHT21_Handle_t *sht21_1) {
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	sht21_1->son_nem = (125 * sht21_1->Humidity / 65536) - 6; //Calculate Humanity
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	89db      	ldrh	r3, [r3, #14]
 8006638:	461a      	mov	r2, r3
 800663a:	4613      	mov	r3, r2
 800663c:	015b      	lsls	r3, r3, #5
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	da02      	bge.n	800664e <sht21_cal_hum+0x22>
 8006648:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800664c:	33ff      	adds	r3, #255	; 0xff
 800664e:	141b      	asrs	r3, r3, #16
 8006650:	3b06      	subs	r3, #6
 8006652:	4618      	mov	r0, r3
 8006654:	f7f9 ff6e 	bl	8000534 <__aeabi_i2d>
 8006658:	4603      	mov	r3, r0
 800665a:	460c      	mov	r4, r1
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}

0800666a <Temp_Measure>:

void Temp_Measure(SHT21_Handle_t *sht21_1){
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]

	sht21_start_T_HM();
 8006672:	f7ff ff07 	bl	8006484 <sht21_start_T_HM>
	sht21_read_T_HM((SHT21_Handle_t *)sht21_1);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff ff5e 	bl	8006538 <sht21_read_T_HM>
	sht21_cal_temp ((SHT21_Handle_t *)sht21_1);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff9f 	bl	80065c0 <sht21_cal_temp>

}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <Hum_Measure>:

void Hum_Measure(SHT21_Handle_t *sht21_1){
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]

	sht21_start_RH_HM();
 8006692:	f7ff fedf 	bl	8006454 <sht21_start_RH_HM>
	sht21_read_RH_HM((SHT21_Handle_t *)sht21_1);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ff0c 	bl	80064b4 <sht21_read_RH_HM>
	sht21_cal_hum((SHT21_Handle_t *)sht21_1);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ffc5 	bl	800662c <sht21_cal_hum>

}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <cs_sel>:


extern SPI_HandleTypeDef hspi3;


void cs_sel() {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Wiznet_CS_GPIO_Port, Wiznet_CS_Pin, GPIO_PIN_RESET); //CS LOW
 80066b0:	2200      	movs	r2, #0
 80066b2:	2101      	movs	r1, #1
 80066b4:	4802      	ldr	r0, [pc, #8]	; (80066c0 <cs_sel+0x14>)
 80066b6:	f7fb f965 	bl	8001984 <HAL_GPIO_WritePin>
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	48000400 	.word	0x48000400

080066c4 <cs_desel>:

void cs_desel() {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Wiznet_CS_GPIO_Port, Wiznet_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80066c8:	2201      	movs	r2, #1
 80066ca:	2101      	movs	r1, #1
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <cs_desel+0x14>)
 80066ce:	f7fb f959 	bl	8001984 <HAL_GPIO_WritePin>
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	48000400 	.word	0x48000400

080066dc <spi_rb>:

uint8_t spi_rb(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xFFFFFFFF);
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	2201      	movs	r2, #1
 80066e6:	4904      	ldr	r1, [pc, #16]	; (80066f8 <spi_rb+0x1c>)
 80066e8:	4804      	ldr	r0, [pc, #16]	; (80066fc <spi_rb+0x20>)
 80066ea:	f7fd fb67 	bl	8003dbc <HAL_SPI_Receive>
	return rbuf;
 80066ee:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <spi_rb+0x1c>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200003b6 	.word	0x200003b6
 80066fc:	200003b8 	.word	0x200003b8

08006700 <spi_wb>:

void spi_wb(uint8_t b) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xFFFFFFFF);
 800670a:	1df9      	adds	r1, r7, #7
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
 8006710:	2201      	movs	r2, #1
 8006712:	4803      	ldr	r0, [pc, #12]	; (8006720 <spi_wb+0x20>)
 8006714:	f7fd f9ec 	bl	8003af0 <HAL_SPI_Transmit>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200003b8 	.word	0x200003b8

08006724 <timeout_config>:

void timeout_config(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
	wiz_NetTimeout gWIZNETTIME = {.retry_cnt = 3,       		    //RCR = 3
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <timeout_config+0x28>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	607b      	str	r3, [r7, #4]
	      	                        .time_100us = 2000};     		//RTR = 2000

	  ctlnetwork(CN_SET_TIMEOUT,(void*)&gWIZNETTIME); 				//set timeout w5500
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	4619      	mov	r1, r3
 8006734:	2004      	movs	r0, #4
 8006736:	f7fe fde9 	bl	800530c <ctlnetwork>
	  ctlnetwork(CN_GET_TIMEOUT,(void*)&gWIZNETTIME); 				//set timeout w5500
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	4619      	mov	r1, r3
 800673e:	2005      	movs	r0, #5
 8006740:	f7fe fde4 	bl	800530c <ctlnetwork>
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	0800a3e8 	.word	0x0800a3e8

08006750 <client_config>:
void client_config(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0

	  wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},		// Mac address
 8006756:	463b      	mov	r3, r7
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	609a      	str	r2, [r3, #8]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	611a      	str	r2, [r3, #16]
 8006764:	f8c3 2013 	str.w	r2, [r3, #19]
 8006768:	2308      	movs	r3, #8
 800676a:	707b      	strb	r3, [r7, #1]
 800676c:	23dc      	movs	r3, #220	; 0xdc
 800676e:	70bb      	strb	r3, [r7, #2]
 8006770:	23ab      	movs	r3, #171	; 0xab
 8006772:	70fb      	strb	r3, [r7, #3]
 8006774:	23cd      	movs	r3, #205	; 0xcd
 8006776:	713b      	strb	r3, [r7, #4]
 8006778:	23ef      	movs	r3, #239	; 0xef
 800677a:	717b      	strb	r3, [r7, #5]
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	71bb      	strb	r3, [r7, #6]
 8006780:	23a8      	movs	r3, #168	; 0xa8
 8006782:	71fb      	strb	r3, [r7, #7]
 8006784:	2301      	movs	r3, #1
 8006786:	723b      	strb	r3, [r7, #8]
 8006788:	230a      	movs	r3, #10
 800678a:	727b      	strb	r3, [r7, #9]
 800678c:	23ff      	movs	r3, #255	; 0xff
 800678e:	72bb      	strb	r3, [r7, #10]
 8006790:	23ff      	movs	r3, #255	; 0xff
 8006792:	72fb      	strb	r3, [r7, #11]
 8006794:	23ff      	movs	r3, #255	; 0xff
 8006796:	733b      	strb	r3, [r7, #12]
 8006798:	23c0      	movs	r3, #192	; 0xc0
 800679a:	73bb      	strb	r3, [r7, #14]
 800679c:	23a8      	movs	r3, #168	; 0xa8
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	2301      	movs	r3, #1
 80067a2:	743b      	strb	r3, [r7, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	747b      	strb	r3, [r7, #17]
	                           .ip 	= {192, 168, 1, 10},						// w5500's IP address
	                           .sn 	= {255, 255, 255,0},						// Subnet mask
	                           .gw 	= {192, 168, 1,1}};							// Gateway address

	  wizchip_setnetinfo(&netInfo); //set IP address
 80067a8:	463b      	mov	r3, r7
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fec4 	bl	8005538 <wizchip_setnetinfo>
	  wizchip_getnetinfo(&netInfo); //set IP address
 80067b0:	463b      	mov	r3, r7
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe ff00 	bl	80055b8 <wizchip_getnetinfo>

}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <Close_Server>:
void Close_Server(W5500_Handle_t *w5500_ports)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	w5500_ports->close_cnt  = 0;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	709a      	strb	r2, [r3, #2]
	w5500_ports->socket_num = 0;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	705a      	strb	r2, [r3, #1]


	while(SOCK_OK != w5500_ports->close_cnt)
 80067d4:	e008      	b.n	80067e8 <Close_Server+0x28>
		{
			w5500_ports->close_cnt = close(w5500_ports->socket_num); 							//close to server
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fab6 	bl	8004d4c <close>
 80067e0:	4603      	mov	r3, r0
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	709a      	strb	r2, [r3, #2]
	while(SOCK_OK != w5500_ports->close_cnt)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	789b      	ldrb	r3, [r3, #2]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d1f2      	bne.n	80067d6 <Close_Server+0x16>
		}

	HAL_Delay(2500);
 80067f0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80067f4:	f7fa fe34 	bl	8001460 <HAL_Delay>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <Connect_Server>:
void Connect_Server(W5500_Handle_t *w5500_ports)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]


	w5500_ports->close_cnt = 10 ;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	220a      	movs	r2, #10
 800680c:	709a      	strb	r2, [r3, #2]
	w5500_ports->connect_cnt = 0 ;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
	w5500_ports->server_port = 5656 ;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f241 6218 	movw	r2, #5656	; 0x1618
 800681a:	809a      	strh	r2, [r3, #4]
	w5500_ports->socket_cnt = 10 ;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	220a      	movs	r2, #10
 8006820:	70da      	strb	r2, [r3, #3]
	w5500_ports->socket_num = 0 ;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	705a      	strb	r2, [r3, #1]
	w5500_ports->socket_port = 5656 ;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f241 6218 	movw	r2, #5656	; 0x1618
 800682e:	80da      	strh	r2, [r3, #6]

	uint8_t server_ip[4] = {192,168,1,6} ; 							// Server's IP Address
 8006830:	4b18      	ldr	r3, [pc, #96]	; (8006894 <Connect_Server+0x94>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]


	if((w5500_ports->socket_cnt = socket(w5500_ports->socket_num,Sn_MR_TCP,w5500_ports->socket_port,SF_TCP_NODELAY))==w5500_ports->socket_num)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7858      	ldrb	r0, [r3, #1]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	88da      	ldrh	r2, [r3, #6]
 800683e:	2320      	movs	r3, #32
 8006840:	2101      	movs	r1, #1
 8006842:	f7fe f96d 	bl	8004b20 <socket>
 8006846:	4603      	mov	r3, r0
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	70da      	strb	r2, [r3, #3]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	78da      	ldrb	r2, [r3, #3]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	429a      	cmp	r2, r3
 8006858:	d117      	bne.n	800688a <Connect_Server+0x8a>
		{
			HAL_Delay(250);
 800685a:	20fa      	movs	r0, #250	; 0xfa
 800685c:	f7fa fe00 	bl	8001460 <HAL_Delay>
			while(w5500_ports->connect_cnt != SOCK_OK ) 								// When Return == SOCK_OK
 8006860:	e00f      	b.n	8006882 <Connect_Server+0x82>
				{

					w5500_ports->connect_cnt = connect((uint8_t )w5500_ports->socket_num,(uint8_t *)server_ip,(uint16_t )w5500_ports->server_port); // Connect to server
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7858      	ldrb	r0, [r3, #1]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	889a      	ldrh	r2, [r3, #4]
 800686a:	f107 030c 	add.w	r3, r7, #12
 800686e:	4619      	mov	r1, r3
 8006870:	f7fe fada 	bl	8004e28 <connect>
 8006874:	4603      	mov	r3, r0
 8006876:	b2da      	uxtb	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	701a      	strb	r2, [r3, #0]
					HAL_Delay(250);
 800687c:	20fa      	movs	r0, #250	; 0xfa
 800687e:	f7fa fdef 	bl	8001460 <HAL_Delay>
			while(w5500_ports->connect_cnt != SOCK_OK ) 								// When Return == SOCK_OK
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d1eb      	bne.n	8006862 <Connect_Server+0x62>
				}
		}



}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	0800a3ec 	.word	0x0800a3ec

08006898 <__errno>:
 8006898:	4b01      	ldr	r3, [pc, #4]	; (80068a0 <__errno+0x8>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000038 	.word	0x20000038

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4e0d      	ldr	r6, [pc, #52]	; (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	; (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1ba4      	subs	r4, r4, r6
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2500      	movs	r5, #0
 80068b0:	42a5      	cmp	r5, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4e0b      	ldr	r6, [pc, #44]	; (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	; (80068e8 <__libc_init_array+0x44>)
 80068b8:	f003 fd68 	bl	800a38c <_init>
 80068bc:	1ba4      	subs	r4, r4, r6
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2500      	movs	r5, #0
 80068c2:	42a5      	cmp	r5, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068cc:	4798      	blx	r3
 80068ce:	3501      	adds	r5, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068d6:	4798      	blx	r3
 80068d8:	3501      	adds	r5, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	0800a740 	.word	0x0800a740
 80068e0:	0800a740 	.word	0x0800a740
 80068e4:	0800a740 	.word	0x0800a740
 80068e8:	0800a744 	.word	0x0800a744

080068ec <memset>:
 80068ec:	4402      	add	r2, r0
 80068ee:	4603      	mov	r3, r0
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d100      	bne.n	80068f6 <memset+0xa>
 80068f4:	4770      	bx	lr
 80068f6:	f803 1b01 	strb.w	r1, [r3], #1
 80068fa:	e7f9      	b.n	80068f0 <memset+0x4>

080068fc <__cvt>:
 80068fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006900:	ec55 4b10 	vmov	r4, r5, d0
 8006904:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006906:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800690a:	2d00      	cmp	r5, #0
 800690c:	460e      	mov	r6, r1
 800690e:	4691      	mov	r9, r2
 8006910:	4619      	mov	r1, r3
 8006912:	bfb8      	it	lt
 8006914:	4622      	movlt	r2, r4
 8006916:	462b      	mov	r3, r5
 8006918:	f027 0720 	bic.w	r7, r7, #32
 800691c:	bfbb      	ittet	lt
 800691e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006922:	461d      	movlt	r5, r3
 8006924:	2300      	movge	r3, #0
 8006926:	232d      	movlt	r3, #45	; 0x2d
 8006928:	bfb8      	it	lt
 800692a:	4614      	movlt	r4, r2
 800692c:	2f46      	cmp	r7, #70	; 0x46
 800692e:	700b      	strb	r3, [r1, #0]
 8006930:	d004      	beq.n	800693c <__cvt+0x40>
 8006932:	2f45      	cmp	r7, #69	; 0x45
 8006934:	d100      	bne.n	8006938 <__cvt+0x3c>
 8006936:	3601      	adds	r6, #1
 8006938:	2102      	movs	r1, #2
 800693a:	e000      	b.n	800693e <__cvt+0x42>
 800693c:	2103      	movs	r1, #3
 800693e:	ab03      	add	r3, sp, #12
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	ab02      	add	r3, sp, #8
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4632      	mov	r2, r6
 8006948:	4653      	mov	r3, sl
 800694a:	ec45 4b10 	vmov	d0, r4, r5
 800694e:	f001 fd87 	bl	8008460 <_dtoa_r>
 8006952:	2f47      	cmp	r7, #71	; 0x47
 8006954:	4680      	mov	r8, r0
 8006956:	d102      	bne.n	800695e <__cvt+0x62>
 8006958:	f019 0f01 	tst.w	r9, #1
 800695c:	d026      	beq.n	80069ac <__cvt+0xb0>
 800695e:	2f46      	cmp	r7, #70	; 0x46
 8006960:	eb08 0906 	add.w	r9, r8, r6
 8006964:	d111      	bne.n	800698a <__cvt+0x8e>
 8006966:	f898 3000 	ldrb.w	r3, [r8]
 800696a:	2b30      	cmp	r3, #48	; 0x30
 800696c:	d10a      	bne.n	8006984 <__cvt+0x88>
 800696e:	2200      	movs	r2, #0
 8006970:	2300      	movs	r3, #0
 8006972:	4620      	mov	r0, r4
 8006974:	4629      	mov	r1, r5
 8006976:	f7fa f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800697a:	b918      	cbnz	r0, 8006984 <__cvt+0x88>
 800697c:	f1c6 0601 	rsb	r6, r6, #1
 8006980:	f8ca 6000 	str.w	r6, [sl]
 8006984:	f8da 3000 	ldr.w	r3, [sl]
 8006988:	4499      	add	r9, r3
 800698a:	2200      	movs	r2, #0
 800698c:	2300      	movs	r3, #0
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7fa f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006996:	b938      	cbnz	r0, 80069a8 <__cvt+0xac>
 8006998:	2230      	movs	r2, #48	; 0x30
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	454b      	cmp	r3, r9
 800699e:	d205      	bcs.n	80069ac <__cvt+0xb0>
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	9103      	str	r1, [sp, #12]
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e7f8      	b.n	800699a <__cvt+0x9e>
 80069a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069b0:	eba3 0308 	sub.w	r3, r3, r8
 80069b4:	4640      	mov	r0, r8
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	b004      	add	sp, #16
 80069ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080069be <__exponent>:
 80069be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c0:	2900      	cmp	r1, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	bfba      	itte	lt
 80069c6:	4249      	neglt	r1, r1
 80069c8:	232d      	movlt	r3, #45	; 0x2d
 80069ca:	232b      	movge	r3, #43	; 0x2b
 80069cc:	2909      	cmp	r1, #9
 80069ce:	f804 2b02 	strb.w	r2, [r4], #2
 80069d2:	7043      	strb	r3, [r0, #1]
 80069d4:	dd20      	ble.n	8006a18 <__exponent+0x5a>
 80069d6:	f10d 0307 	add.w	r3, sp, #7
 80069da:	461f      	mov	r7, r3
 80069dc:	260a      	movs	r6, #10
 80069de:	fb91 f5f6 	sdiv	r5, r1, r6
 80069e2:	fb06 1115 	mls	r1, r6, r5, r1
 80069e6:	3130      	adds	r1, #48	; 0x30
 80069e8:	2d09      	cmp	r5, #9
 80069ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80069f2:	4629      	mov	r1, r5
 80069f4:	dc09      	bgt.n	8006a0a <__exponent+0x4c>
 80069f6:	3130      	adds	r1, #48	; 0x30
 80069f8:	3b02      	subs	r3, #2
 80069fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80069fe:	42bb      	cmp	r3, r7
 8006a00:	4622      	mov	r2, r4
 8006a02:	d304      	bcc.n	8006a0e <__exponent+0x50>
 8006a04:	1a10      	subs	r0, r2, r0
 8006a06:	b003      	add	sp, #12
 8006a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	e7e7      	b.n	80069de <__exponent+0x20>
 8006a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a12:	f804 2b01 	strb.w	r2, [r4], #1
 8006a16:	e7f2      	b.n	80069fe <__exponent+0x40>
 8006a18:	2330      	movs	r3, #48	; 0x30
 8006a1a:	4419      	add	r1, r3
 8006a1c:	7083      	strb	r3, [r0, #2]
 8006a1e:	1d02      	adds	r2, r0, #4
 8006a20:	70c1      	strb	r1, [r0, #3]
 8006a22:	e7ef      	b.n	8006a04 <__exponent+0x46>

08006a24 <_printf_float>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	b08d      	sub	sp, #52	; 0x34
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006a30:	4616      	mov	r6, r2
 8006a32:	461f      	mov	r7, r3
 8006a34:	4605      	mov	r5, r0
 8006a36:	f002 fdf7 	bl	8009628 <_localeconv_r>
 8006a3a:	6803      	ldr	r3, [r0, #0]
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7f9 fbce 	bl	80001e0 <strlen>
 8006a44:	2300      	movs	r3, #0
 8006a46:	930a      	str	r3, [sp, #40]	; 0x28
 8006a48:	f8d8 3000 	ldr.w	r3, [r8]
 8006a4c:	9005      	str	r0, [sp, #20]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	f103 0208 	add.w	r2, r3, #8
 8006a58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8006a60:	f8c8 2000 	str.w	r2, [r8]
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7e:	4ba7      	ldr	r3, [pc, #668]	; (8006d1c <_printf_float+0x2f8>)
 8006a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a84:	f7fa f85a 	bl	8000b3c <__aeabi_dcmpun>
 8006a88:	bb70      	cbnz	r0, 8006ae8 <_printf_float+0xc4>
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	4ba3      	ldr	r3, [pc, #652]	; (8006d1c <_printf_float+0x2f8>)
 8006a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a94:	f7fa f834 	bl	8000b00 <__aeabi_dcmple>
 8006a98:	bb30      	cbnz	r0, 8006ae8 <_printf_float+0xc4>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	f7fa f823 	bl	8000aec <__aeabi_dcmplt>
 8006aa6:	b110      	cbz	r0, 8006aae <_printf_float+0x8a>
 8006aa8:	232d      	movs	r3, #45	; 0x2d
 8006aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aae:	4a9c      	ldr	r2, [pc, #624]	; (8006d20 <_printf_float+0x2fc>)
 8006ab0:	4b9c      	ldr	r3, [pc, #624]	; (8006d24 <_printf_float+0x300>)
 8006ab2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006ab6:	bf8c      	ite	hi
 8006ab8:	4690      	movhi	r8, r2
 8006aba:	4698      	movls	r8, r3
 8006abc:	2303      	movs	r3, #3
 8006abe:	f02b 0204 	bic.w	r2, fp, #4
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	f04f 0900 	mov.w	r9, #0
 8006aca:	9700      	str	r7, [sp, #0]
 8006acc:	4633      	mov	r3, r6
 8006ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f9e6 	bl	8006ea4 <_printf_common>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f040 808d 	bne.w	8006bf8 <_printf_float+0x1d4>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	b00d      	add	sp, #52	; 0x34
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	4640      	mov	r0, r8
 8006aee:	4649      	mov	r1, r9
 8006af0:	f7fa f824 	bl	8000b3c <__aeabi_dcmpun>
 8006af4:	b110      	cbz	r0, 8006afc <_printf_float+0xd8>
 8006af6:	4a8c      	ldr	r2, [pc, #560]	; (8006d28 <_printf_float+0x304>)
 8006af8:	4b8c      	ldr	r3, [pc, #560]	; (8006d2c <_printf_float+0x308>)
 8006afa:	e7da      	b.n	8006ab2 <_printf_float+0x8e>
 8006afc:	6861      	ldr	r1, [r4, #4]
 8006afe:	1c4b      	adds	r3, r1, #1
 8006b00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006b04:	a80a      	add	r0, sp, #40	; 0x28
 8006b06:	d13e      	bne.n	8006b86 <_printf_float+0x162>
 8006b08:	2306      	movs	r3, #6
 8006b0a:	6063      	str	r3, [r4, #4]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b12:	ab09      	add	r3, sp, #36	; 0x24
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	ec49 8b10 	vmov	d0, r8, r9
 8006b1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b1e:	6022      	str	r2, [r4, #0]
 8006b20:	f8cd a004 	str.w	sl, [sp, #4]
 8006b24:	6861      	ldr	r1, [r4, #4]
 8006b26:	4628      	mov	r0, r5
 8006b28:	f7ff fee8 	bl	80068fc <__cvt>
 8006b2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006b30:	2b47      	cmp	r3, #71	; 0x47
 8006b32:	4680      	mov	r8, r0
 8006b34:	d109      	bne.n	8006b4a <_printf_float+0x126>
 8006b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b38:	1cd8      	adds	r0, r3, #3
 8006b3a:	db02      	blt.n	8006b42 <_printf_float+0x11e>
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	dd47      	ble.n	8006bd2 <_printf_float+0x1ae>
 8006b42:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b46:	fa5f fa8a 	uxtb.w	sl, sl
 8006b4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b50:	d824      	bhi.n	8006b9c <_printf_float+0x178>
 8006b52:	3901      	subs	r1, #1
 8006b54:	4652      	mov	r2, sl
 8006b56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b5a:	9109      	str	r1, [sp, #36]	; 0x24
 8006b5c:	f7ff ff2f 	bl	80069be <__exponent>
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	1813      	adds	r3, r2, r0
 8006b64:	2a01      	cmp	r2, #1
 8006b66:	4681      	mov	r9, r0
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	dc02      	bgt.n	8006b72 <_printf_float+0x14e>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	07d1      	lsls	r1, r2, #31
 8006b70:	d501      	bpl.n	8006b76 <_printf_float+0x152>
 8006b72:	3301      	adds	r3, #1
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0a5      	beq.n	8006aca <_printf_float+0xa6>
 8006b7e:	232d      	movs	r3, #45	; 0x2d
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b84:	e7a1      	b.n	8006aca <_printf_float+0xa6>
 8006b86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006b8a:	f000 8177 	beq.w	8006e7c <_printf_float+0x458>
 8006b8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b92:	d1bb      	bne.n	8006b0c <_printf_float+0xe8>
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d1b9      	bne.n	8006b0c <_printf_float+0xe8>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7b6      	b.n	8006b0a <_printf_float+0xe6>
 8006b9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006ba0:	d119      	bne.n	8006bd6 <_printf_float+0x1b2>
 8006ba2:	2900      	cmp	r1, #0
 8006ba4:	6863      	ldr	r3, [r4, #4]
 8006ba6:	dd0c      	ble.n	8006bc2 <_printf_float+0x19e>
 8006ba8:	6121      	str	r1, [r4, #16]
 8006baa:	b913      	cbnz	r3, 8006bb2 <_printf_float+0x18e>
 8006bac:	6822      	ldr	r2, [r4, #0]
 8006bae:	07d2      	lsls	r2, r2, #31
 8006bb0:	d502      	bpl.n	8006bb8 <_printf_float+0x194>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	440b      	add	r3, r1
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bba:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bbc:	f04f 0900 	mov.w	r9, #0
 8006bc0:	e7d9      	b.n	8006b76 <_printf_float+0x152>
 8006bc2:	b913      	cbnz	r3, 8006bca <_printf_float+0x1a6>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	07d0      	lsls	r0, r2, #31
 8006bc8:	d501      	bpl.n	8006bce <_printf_float+0x1aa>
 8006bca:	3302      	adds	r3, #2
 8006bcc:	e7f3      	b.n	8006bb6 <_printf_float+0x192>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7f1      	b.n	8006bb6 <_printf_float+0x192>
 8006bd2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006bd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	db05      	blt.n	8006bea <_printf_float+0x1c6>
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	07d1      	lsls	r1, r2, #31
 8006be4:	d5e8      	bpl.n	8006bb8 <_printf_float+0x194>
 8006be6:	3301      	adds	r3, #1
 8006be8:	e7e5      	b.n	8006bb6 <_printf_float+0x192>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfd4      	ite	le
 8006bee:	f1c3 0302 	rsble	r3, r3, #2
 8006bf2:	2301      	movgt	r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	e7de      	b.n	8006bb6 <_printf_float+0x192>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	055a      	lsls	r2, r3, #21
 8006bfc:	d407      	bmi.n	8006c0e <_printf_float+0x1ea>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	4642      	mov	r2, r8
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d12b      	bne.n	8006c64 <_printf_float+0x240>
 8006c0c:	e767      	b.n	8006ade <_printf_float+0xba>
 8006c0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c12:	f240 80dc 	bls.w	8006dce <_printf_float+0x3aa>
 8006c16:	2200      	movs	r2, #0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c1e:	f7f9 ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d033      	beq.n	8006c8e <_printf_float+0x26a>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4a41      	ldr	r2, [pc, #260]	; (8006d30 <_printf_float+0x30c>)
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	f43f af54 	beq.w	8006ade <_printf_float+0xba>
 8006c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	db02      	blt.n	8006c44 <_printf_float+0x220>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	07d8      	lsls	r0, r3, #31
 8006c42:	d50f      	bpl.n	8006c64 <_printf_float+0x240>
 8006c44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f af45 	beq.w	8006ade <_printf_float+0xba>
 8006c54:	f04f 0800 	mov.w	r8, #0
 8006c58:	f104 091a 	add.w	r9, r4, #26
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	4543      	cmp	r3, r8
 8006c62:	dc09      	bgt.n	8006c78 <_printf_float+0x254>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	079b      	lsls	r3, r3, #30
 8006c68:	f100 8103 	bmi.w	8006e72 <_printf_float+0x44e>
 8006c6c:	68e0      	ldr	r0, [r4, #12]
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c70:	4298      	cmp	r0, r3
 8006c72:	bfb8      	it	lt
 8006c74:	4618      	movlt	r0, r3
 8006c76:	e734      	b.n	8006ae2 <_printf_float+0xbe>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f af2b 	beq.w	8006ade <_printf_float+0xba>
 8006c88:	f108 0801 	add.w	r8, r8, #1
 8006c8c:	e7e6      	b.n	8006c5c <_printf_float+0x238>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc2b      	bgt.n	8006cec <_printf_float+0x2c8>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <_printf_float+0x30c>)
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f43f af1d 	beq.w	8006ade <_printf_float+0xba>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	b923      	cbnz	r3, 8006cb2 <_printf_float+0x28e>
 8006ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006caa:	b913      	cbnz	r3, 8006cb2 <_printf_float+0x28e>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d5d8      	bpl.n	8006c64 <_printf_float+0x240>
 8006cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f af0e 	beq.w	8006ade <_printf_float+0xba>
 8006cc2:	f04f 0900 	mov.w	r9, #0
 8006cc6:	f104 0a1a 	add.w	sl, r4, #26
 8006cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ccc:	425b      	negs	r3, r3
 8006cce:	454b      	cmp	r3, r9
 8006cd0:	dc01      	bgt.n	8006cd6 <_printf_float+0x2b2>
 8006cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd4:	e794      	b.n	8006c00 <_printf_float+0x1dc>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f aefc 	beq.w	8006ade <_printf_float+0xba>
 8006ce6:	f109 0901 	add.w	r9, r9, #1
 8006cea:	e7ee      	b.n	8006cca <_printf_float+0x2a6>
 8006cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	bfa8      	it	ge
 8006cf4:	461a      	movge	r2, r3
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	4691      	mov	r9, r2
 8006cfa:	dd07      	ble.n	8006d0c <_printf_float+0x2e8>
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4642      	mov	r2, r8
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f aee9 	beq.w	8006ade <_printf_float+0xba>
 8006d0c:	f104 031a 	add.w	r3, r4, #26
 8006d10:	f04f 0b00 	mov.w	fp, #0
 8006d14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d18:	9306      	str	r3, [sp, #24]
 8006d1a:	e015      	b.n	8006d48 <_printf_float+0x324>
 8006d1c:	7fefffff 	.word	0x7fefffff
 8006d20:	0800a424 	.word	0x0800a424
 8006d24:	0800a420 	.word	0x0800a420
 8006d28:	0800a42c 	.word	0x0800a42c
 8006d2c:	0800a428 	.word	0x0800a428
 8006d30:	0800a430 	.word	0x0800a430
 8006d34:	2301      	movs	r3, #1
 8006d36:	9a06      	ldr	r2, [sp, #24]
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f aecd 	beq.w	8006ade <_printf_float+0xba>
 8006d44:	f10b 0b01 	add.w	fp, fp, #1
 8006d48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006d4c:	ebaa 0309 	sub.w	r3, sl, r9
 8006d50:	455b      	cmp	r3, fp
 8006d52:	dcef      	bgt.n	8006d34 <_printf_float+0x310>
 8006d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	44d0      	add	r8, sl
 8006d5c:	db15      	blt.n	8006d8a <_printf_float+0x366>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	07da      	lsls	r2, r3, #31
 8006d62:	d412      	bmi.n	8006d8a <_printf_float+0x366>
 8006d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d68:	eba3 020a 	sub.w	r2, r3, sl
 8006d6c:	eba3 0a01 	sub.w	sl, r3, r1
 8006d70:	4592      	cmp	sl, r2
 8006d72:	bfa8      	it	ge
 8006d74:	4692      	movge	sl, r2
 8006d76:	f1ba 0f00 	cmp.w	sl, #0
 8006d7a:	dc0e      	bgt.n	8006d9a <_printf_float+0x376>
 8006d7c:	f04f 0800 	mov.w	r8, #0
 8006d80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d84:	f104 091a 	add.w	r9, r4, #26
 8006d88:	e019      	b.n	8006dbe <_printf_float+0x39a>
 8006d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	d1e5      	bne.n	8006d64 <_printf_float+0x340>
 8006d98:	e6a1      	b.n	8006ade <_printf_float+0xba>
 8006d9a:	4653      	mov	r3, sl
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	d1e9      	bne.n	8006d7c <_printf_float+0x358>
 8006da8:	e699      	b.n	8006ade <_printf_float+0xba>
 8006daa:	2301      	movs	r3, #1
 8006dac:	464a      	mov	r2, r9
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f ae92 	beq.w	8006ade <_printf_float+0xba>
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	eba3 030a 	sub.w	r3, r3, sl
 8006dc8:	4543      	cmp	r3, r8
 8006dca:	dcee      	bgt.n	8006daa <_printf_float+0x386>
 8006dcc:	e74a      	b.n	8006c64 <_printf_float+0x240>
 8006dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd0:	2a01      	cmp	r2, #1
 8006dd2:	dc01      	bgt.n	8006dd8 <_printf_float+0x3b4>
 8006dd4:	07db      	lsls	r3, r3, #31
 8006dd6:	d53a      	bpl.n	8006e4e <_printf_float+0x42a>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4642      	mov	r2, r8
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f ae7b 	beq.w	8006ade <_printf_float+0xba>
 8006de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f108 0801 	add.w	r8, r8, #1
 8006df8:	f43f ae71 	beq.w	8006ade <_printf_float+0xba>
 8006dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f103 3aff 	add.w	sl, r3, #4294967295
 8006e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f7f9 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e0e:	b9c8      	cbnz	r0, 8006e44 <_printf_float+0x420>
 8006e10:	4653      	mov	r3, sl
 8006e12:	4642      	mov	r2, r8
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d10e      	bne.n	8006e3c <_printf_float+0x418>
 8006e1e:	e65e      	b.n	8006ade <_printf_float+0xba>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4652      	mov	r2, sl
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f ae57 	beq.w	8006ade <_printf_float+0xba>
 8006e30:	f108 0801 	add.w	r8, r8, #1
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	3b01      	subs	r3, #1
 8006e38:	4543      	cmp	r3, r8
 8006e3a:	dcf1      	bgt.n	8006e20 <_printf_float+0x3fc>
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e42:	e6de      	b.n	8006c02 <_printf_float+0x1de>
 8006e44:	f04f 0800 	mov.w	r8, #0
 8006e48:	f104 0a1a 	add.w	sl, r4, #26
 8006e4c:	e7f2      	b.n	8006e34 <_printf_float+0x410>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e7df      	b.n	8006e12 <_printf_float+0x3ee>
 8006e52:	2301      	movs	r3, #1
 8006e54:	464a      	mov	r2, r9
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b8      	blx	r7
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	f43f ae3e 	beq.w	8006ade <_printf_float+0xba>
 8006e62:	f108 0801 	add.w	r8, r8, #1
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	4543      	cmp	r3, r8
 8006e6e:	dcf0      	bgt.n	8006e52 <_printf_float+0x42e>
 8006e70:	e6fc      	b.n	8006c6c <_printf_float+0x248>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	f104 0919 	add.w	r9, r4, #25
 8006e7a:	e7f4      	b.n	8006e66 <_printf_float+0x442>
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	f43f ae8b 	beq.w	8006b98 <_printf_float+0x174>
 8006e82:	2300      	movs	r3, #0
 8006e84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006e88:	ab09      	add	r3, sp, #36	; 0x24
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	ec49 8b10 	vmov	d0, r8, r9
 8006e90:	6022      	str	r2, [r4, #0]
 8006e92:	f8cd a004 	str.w	sl, [sp, #4]
 8006e96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f7ff fd2e 	bl	80068fc <__cvt>
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	e648      	b.n	8006b36 <_printf_float+0x112>

08006ea4 <_printf_common>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	4691      	mov	r9, r2
 8006eaa:	461f      	mov	r7, r3
 8006eac:	688a      	ldr	r2, [r1, #8]
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bfb8      	it	lt
 8006eb8:	4613      	movlt	r3, r2
 8006eba:	f8c9 3000 	str.w	r3, [r9]
 8006ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	b112      	cbz	r2, 8006ece <_printf_common+0x2a>
 8006ec8:	3301      	adds	r3, #1
 8006eca:	f8c9 3000 	str.w	r3, [r9]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	0699      	lsls	r1, r3, #26
 8006ed2:	bf42      	ittt	mi
 8006ed4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ed8:	3302      	addmi	r3, #2
 8006eda:	f8c9 3000 	strmi.w	r3, [r9]
 8006ede:	6825      	ldr	r5, [r4, #0]
 8006ee0:	f015 0506 	ands.w	r5, r5, #6
 8006ee4:	d107      	bne.n	8006ef6 <_printf_common+0x52>
 8006ee6:	f104 0a19 	add.w	sl, r4, #25
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	f8d9 2000 	ldr.w	r2, [r9]
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	42ab      	cmp	r3, r5
 8006ef4:	dc28      	bgt.n	8006f48 <_printf_common+0xa4>
 8006ef6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	3300      	adds	r3, #0
 8006efe:	bf18      	it	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	0692      	lsls	r2, r2, #26
 8006f04:	d42d      	bmi.n	8006f62 <_printf_common+0xbe>
 8006f06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	47c0      	blx	r8
 8006f10:	3001      	adds	r0, #1
 8006f12:	d020      	beq.n	8006f56 <_printf_common+0xb2>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	68e5      	ldr	r5, [r4, #12]
 8006f18:	f8d9 2000 	ldr.w	r2, [r9]
 8006f1c:	f003 0306 	and.w	r3, r3, #6
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	bf08      	it	eq
 8006f24:	1aad      	subeq	r5, r5, r2
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	6922      	ldr	r2, [r4, #16]
 8006f2a:	bf0c      	ite	eq
 8006f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f30:	2500      	movne	r5, #0
 8006f32:	4293      	cmp	r3, r2
 8006f34:	bfc4      	itt	gt
 8006f36:	1a9b      	subgt	r3, r3, r2
 8006f38:	18ed      	addgt	r5, r5, r3
 8006f3a:	f04f 0900 	mov.w	r9, #0
 8006f3e:	341a      	adds	r4, #26
 8006f40:	454d      	cmp	r5, r9
 8006f42:	d11a      	bne.n	8006f7a <_printf_common+0xd6>
 8006f44:	2000      	movs	r0, #0
 8006f46:	e008      	b.n	8006f5a <_printf_common+0xb6>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4652      	mov	r2, sl
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	4630      	mov	r0, r6
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d103      	bne.n	8006f5e <_printf_common+0xba>
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	3501      	adds	r5, #1
 8006f60:	e7c3      	b.n	8006eea <_printf_common+0x46>
 8006f62:	18e1      	adds	r1, r4, r3
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	2030      	movs	r0, #48	; 0x30
 8006f68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f6c:	4422      	add	r2, r4
 8006f6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f76:	3302      	adds	r3, #2
 8006f78:	e7c5      	b.n	8006f06 <_printf_common+0x62>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4630      	mov	r0, r6
 8006f82:	47c0      	blx	r8
 8006f84:	3001      	adds	r0, #1
 8006f86:	d0e6      	beq.n	8006f56 <_printf_common+0xb2>
 8006f88:	f109 0901 	add.w	r9, r9, #1
 8006f8c:	e7d8      	b.n	8006f40 <_printf_common+0x9c>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f98:	460c      	mov	r4, r1
 8006f9a:	7e09      	ldrb	r1, [r1, #24]
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	296e      	cmp	r1, #110	; 0x6e
 8006fa0:	4617      	mov	r7, r2
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	4698      	mov	r8, r3
 8006fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fa8:	f000 80b3 	beq.w	8007112 <_printf_i+0x182>
 8006fac:	d822      	bhi.n	8006ff4 <_printf_i+0x64>
 8006fae:	2963      	cmp	r1, #99	; 0x63
 8006fb0:	d036      	beq.n	8007020 <_printf_i+0x90>
 8006fb2:	d80a      	bhi.n	8006fca <_printf_i+0x3a>
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	f000 80b9 	beq.w	800712c <_printf_i+0x19c>
 8006fba:	2958      	cmp	r1, #88	; 0x58
 8006fbc:	f000 8083 	beq.w	80070c6 <_printf_i+0x136>
 8006fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fc8:	e032      	b.n	8007030 <_printf_i+0xa0>
 8006fca:	2964      	cmp	r1, #100	; 0x64
 8006fcc:	d001      	beq.n	8006fd2 <_printf_i+0x42>
 8006fce:	2969      	cmp	r1, #105	; 0x69
 8006fd0:	d1f6      	bne.n	8006fc0 <_printf_i+0x30>
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	0605      	lsls	r5, r0, #24
 8006fd8:	f103 0104 	add.w	r1, r3, #4
 8006fdc:	d52a      	bpl.n	8007034 <_printf_i+0xa4>
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	da03      	bge.n	8006fee <_printf_i+0x5e>
 8006fe6:	222d      	movs	r2, #45	; 0x2d
 8006fe8:	425b      	negs	r3, r3
 8006fea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fee:	486f      	ldr	r0, [pc, #444]	; (80071ac <_printf_i+0x21c>)
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	e039      	b.n	8007068 <_printf_i+0xd8>
 8006ff4:	2973      	cmp	r1, #115	; 0x73
 8006ff6:	f000 809d 	beq.w	8007134 <_printf_i+0x1a4>
 8006ffa:	d808      	bhi.n	800700e <_printf_i+0x7e>
 8006ffc:	296f      	cmp	r1, #111	; 0x6f
 8006ffe:	d020      	beq.n	8007042 <_printf_i+0xb2>
 8007000:	2970      	cmp	r1, #112	; 0x70
 8007002:	d1dd      	bne.n	8006fc0 <_printf_i+0x30>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	f043 0320 	orr.w	r3, r3, #32
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	e003      	b.n	8007016 <_printf_i+0x86>
 800700e:	2975      	cmp	r1, #117	; 0x75
 8007010:	d017      	beq.n	8007042 <_printf_i+0xb2>
 8007012:	2978      	cmp	r1, #120	; 0x78
 8007014:	d1d4      	bne.n	8006fc0 <_printf_i+0x30>
 8007016:	2378      	movs	r3, #120	; 0x78
 8007018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800701c:	4864      	ldr	r0, [pc, #400]	; (80071b0 <_printf_i+0x220>)
 800701e:	e055      	b.n	80070cc <_printf_i+0x13c>
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	1d19      	adds	r1, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6011      	str	r1, [r2, #0]
 8007028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800702c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007030:	2301      	movs	r3, #1
 8007032:	e08c      	b.n	800714e <_printf_i+0x1be>
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6011      	str	r1, [r2, #0]
 8007038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800703c:	bf18      	it	ne
 800703e:	b21b      	sxthne	r3, r3
 8007040:	e7cf      	b.n	8006fe2 <_printf_i+0x52>
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	6825      	ldr	r5, [r4, #0]
 8007046:	1d18      	adds	r0, r3, #4
 8007048:	6010      	str	r0, [r2, #0]
 800704a:	0628      	lsls	r0, r5, #24
 800704c:	d501      	bpl.n	8007052 <_printf_i+0xc2>
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	e002      	b.n	8007058 <_printf_i+0xc8>
 8007052:	0668      	lsls	r0, r5, #25
 8007054:	d5fb      	bpl.n	800704e <_printf_i+0xbe>
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	4854      	ldr	r0, [pc, #336]	; (80071ac <_printf_i+0x21c>)
 800705a:	296f      	cmp	r1, #111	; 0x6f
 800705c:	bf14      	ite	ne
 800705e:	220a      	movne	r2, #10
 8007060:	2208      	moveq	r2, #8
 8007062:	2100      	movs	r1, #0
 8007064:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007068:	6865      	ldr	r5, [r4, #4]
 800706a:	60a5      	str	r5, [r4, #8]
 800706c:	2d00      	cmp	r5, #0
 800706e:	f2c0 8095 	blt.w	800719c <_printf_i+0x20c>
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	f021 0104 	bic.w	r1, r1, #4
 8007078:	6021      	str	r1, [r4, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d13d      	bne.n	80070fa <_printf_i+0x16a>
 800707e:	2d00      	cmp	r5, #0
 8007080:	f040 808e 	bne.w	80071a0 <_printf_i+0x210>
 8007084:	4665      	mov	r5, ip
 8007086:	2a08      	cmp	r2, #8
 8007088:	d10b      	bne.n	80070a2 <_printf_i+0x112>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	07db      	lsls	r3, r3, #31
 800708e:	d508      	bpl.n	80070a2 <_printf_i+0x112>
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	6862      	ldr	r2, [r4, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	bfde      	ittt	le
 8007098:	2330      	movle	r3, #48	; 0x30
 800709a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800709e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070a2:	ebac 0305 	sub.w	r3, ip, r5
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	f8cd 8000 	str.w	r8, [sp]
 80070ac:	463b      	mov	r3, r7
 80070ae:	aa03      	add	r2, sp, #12
 80070b0:	4621      	mov	r1, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff fef6 	bl	8006ea4 <_printf_common>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d14d      	bne.n	8007158 <_printf_i+0x1c8>
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	b005      	add	sp, #20
 80070c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c6:	4839      	ldr	r0, [pc, #228]	; (80071ac <_printf_i+0x21c>)
 80070c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070cc:	6813      	ldr	r3, [r2, #0]
 80070ce:	6821      	ldr	r1, [r4, #0]
 80070d0:	1d1d      	adds	r5, r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6015      	str	r5, [r2, #0]
 80070d6:	060a      	lsls	r2, r1, #24
 80070d8:	d50b      	bpl.n	80070f2 <_printf_i+0x162>
 80070da:	07ca      	lsls	r2, r1, #31
 80070dc:	bf44      	itt	mi
 80070de:	f041 0120 	orrmi.w	r1, r1, #32
 80070e2:	6021      	strmi	r1, [r4, #0]
 80070e4:	b91b      	cbnz	r3, 80070ee <_printf_i+0x15e>
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	f022 0220 	bic.w	r2, r2, #32
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	2210      	movs	r2, #16
 80070f0:	e7b7      	b.n	8007062 <_printf_i+0xd2>
 80070f2:	064d      	lsls	r5, r1, #25
 80070f4:	bf48      	it	mi
 80070f6:	b29b      	uxthmi	r3, r3
 80070f8:	e7ef      	b.n	80070da <_printf_i+0x14a>
 80070fa:	4665      	mov	r5, ip
 80070fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007100:	fb02 3311 	mls	r3, r2, r1, r3
 8007104:	5cc3      	ldrb	r3, [r0, r3]
 8007106:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800710a:	460b      	mov	r3, r1
 800710c:	2900      	cmp	r1, #0
 800710e:	d1f5      	bne.n	80070fc <_printf_i+0x16c>
 8007110:	e7b9      	b.n	8007086 <_printf_i+0xf6>
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	6825      	ldr	r5, [r4, #0]
 8007116:	6961      	ldr	r1, [r4, #20]
 8007118:	1d18      	adds	r0, r3, #4
 800711a:	6010      	str	r0, [r2, #0]
 800711c:	0628      	lsls	r0, r5, #24
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	d501      	bpl.n	8007126 <_printf_i+0x196>
 8007122:	6019      	str	r1, [r3, #0]
 8007124:	e002      	b.n	800712c <_printf_i+0x19c>
 8007126:	066a      	lsls	r2, r5, #25
 8007128:	d5fb      	bpl.n	8007122 <_printf_i+0x192>
 800712a:	8019      	strh	r1, [r3, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	4665      	mov	r5, ip
 8007132:	e7b9      	b.n	80070a8 <_printf_i+0x118>
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	681d      	ldr	r5, [r3, #0]
 800713c:	6862      	ldr	r2, [r4, #4]
 800713e:	2100      	movs	r1, #0
 8007140:	4628      	mov	r0, r5
 8007142:	f7f9 f855 	bl	80001f0 <memchr>
 8007146:	b108      	cbz	r0, 800714c <_printf_i+0x1bc>
 8007148:	1b40      	subs	r0, r0, r5
 800714a:	6060      	str	r0, [r4, #4]
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	2300      	movs	r3, #0
 8007152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007156:	e7a7      	b.n	80070a8 <_printf_i+0x118>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	462a      	mov	r2, r5
 800715c:	4639      	mov	r1, r7
 800715e:	4630      	mov	r0, r6
 8007160:	47c0      	blx	r8
 8007162:	3001      	adds	r0, #1
 8007164:	d0aa      	beq.n	80070bc <_printf_i+0x12c>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	079b      	lsls	r3, r3, #30
 800716a:	d413      	bmi.n	8007194 <_printf_i+0x204>
 800716c:	68e0      	ldr	r0, [r4, #12]
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	4298      	cmp	r0, r3
 8007172:	bfb8      	it	lt
 8007174:	4618      	movlt	r0, r3
 8007176:	e7a3      	b.n	80070c0 <_printf_i+0x130>
 8007178:	2301      	movs	r3, #1
 800717a:	464a      	mov	r2, r9
 800717c:	4639      	mov	r1, r7
 800717e:	4630      	mov	r0, r6
 8007180:	47c0      	blx	r8
 8007182:	3001      	adds	r0, #1
 8007184:	d09a      	beq.n	80070bc <_printf_i+0x12c>
 8007186:	3501      	adds	r5, #1
 8007188:	68e3      	ldr	r3, [r4, #12]
 800718a:	9a03      	ldr	r2, [sp, #12]
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	42ab      	cmp	r3, r5
 8007190:	dcf2      	bgt.n	8007178 <_printf_i+0x1e8>
 8007192:	e7eb      	b.n	800716c <_printf_i+0x1dc>
 8007194:	2500      	movs	r5, #0
 8007196:	f104 0919 	add.w	r9, r4, #25
 800719a:	e7f5      	b.n	8007188 <_printf_i+0x1f8>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ac      	bne.n	80070fa <_printf_i+0x16a>
 80071a0:	7803      	ldrb	r3, [r0, #0]
 80071a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071aa:	e76c      	b.n	8007086 <_printf_i+0xf6>
 80071ac:	0800a432 	.word	0x0800a432
 80071b0:	0800a443 	.word	0x0800a443

080071b4 <_scanf_float>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	469a      	mov	sl, r3
 80071ba:	688b      	ldr	r3, [r1, #8]
 80071bc:	4616      	mov	r6, r2
 80071be:	1e5a      	subs	r2, r3, #1
 80071c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80071c4:	b087      	sub	sp, #28
 80071c6:	bf83      	ittte	hi
 80071c8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80071cc:	189b      	addhi	r3, r3, r2
 80071ce:	9301      	strhi	r3, [sp, #4]
 80071d0:	2300      	movls	r3, #0
 80071d2:	bf86      	itte	hi
 80071d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80071d8:	608b      	strhi	r3, [r1, #8]
 80071da:	9301      	strls	r3, [sp, #4]
 80071dc:	680b      	ldr	r3, [r1, #0]
 80071de:	4688      	mov	r8, r1
 80071e0:	f04f 0b00 	mov.w	fp, #0
 80071e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80071e8:	f848 3b1c 	str.w	r3, [r8], #28
 80071ec:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80071f0:	4607      	mov	r7, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4645      	mov	r5, r8
 80071f6:	465a      	mov	r2, fp
 80071f8:	46d9      	mov	r9, fp
 80071fa:	f8cd b008 	str.w	fp, [sp, #8]
 80071fe:	68a1      	ldr	r1, [r4, #8]
 8007200:	b181      	cbz	r1, 8007224 <_scanf_float+0x70>
 8007202:	6833      	ldr	r3, [r6, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b49      	cmp	r3, #73	; 0x49
 8007208:	d071      	beq.n	80072ee <_scanf_float+0x13a>
 800720a:	d84d      	bhi.n	80072a8 <_scanf_float+0xf4>
 800720c:	2b39      	cmp	r3, #57	; 0x39
 800720e:	d840      	bhi.n	8007292 <_scanf_float+0xde>
 8007210:	2b31      	cmp	r3, #49	; 0x31
 8007212:	f080 8088 	bcs.w	8007326 <_scanf_float+0x172>
 8007216:	2b2d      	cmp	r3, #45	; 0x2d
 8007218:	f000 8090 	beq.w	800733c <_scanf_float+0x188>
 800721c:	d815      	bhi.n	800724a <_scanf_float+0x96>
 800721e:	2b2b      	cmp	r3, #43	; 0x2b
 8007220:	f000 808c 	beq.w	800733c <_scanf_float+0x188>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	d003      	beq.n	8007232 <_scanf_float+0x7e>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	3a01      	subs	r2, #1
 8007234:	2a01      	cmp	r2, #1
 8007236:	f200 80ea 	bhi.w	800740e <_scanf_float+0x25a>
 800723a:	4545      	cmp	r5, r8
 800723c:	f200 80dc 	bhi.w	80073f8 <_scanf_float+0x244>
 8007240:	2601      	movs	r6, #1
 8007242:	4630      	mov	r0, r6
 8007244:	b007      	add	sp, #28
 8007246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724a:	2b2e      	cmp	r3, #46	; 0x2e
 800724c:	f000 809f 	beq.w	800738e <_scanf_float+0x1da>
 8007250:	2b30      	cmp	r3, #48	; 0x30
 8007252:	d1e7      	bne.n	8007224 <_scanf_float+0x70>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	f410 7f80 	tst.w	r0, #256	; 0x100
 800725a:	d064      	beq.n	8007326 <_scanf_float+0x172>
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007262:	6020      	str	r0, [r4, #0]
 8007264:	f109 0901 	add.w	r9, r9, #1
 8007268:	b11b      	cbz	r3, 8007272 <_scanf_float+0xbe>
 800726a:	3b01      	subs	r3, #1
 800726c:	3101      	adds	r1, #1
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	60a1      	str	r1, [r4, #8]
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	6873      	ldr	r3, [r6, #4]
 8007280:	3b01      	subs	r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	6073      	str	r3, [r6, #4]
 8007286:	f340 80ac 	ble.w	80073e2 <_scanf_float+0x22e>
 800728a:	6833      	ldr	r3, [r6, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	e7b5      	b.n	80071fe <_scanf_float+0x4a>
 8007292:	2b45      	cmp	r3, #69	; 0x45
 8007294:	f000 8085 	beq.w	80073a2 <_scanf_float+0x1ee>
 8007298:	2b46      	cmp	r3, #70	; 0x46
 800729a:	d06a      	beq.n	8007372 <_scanf_float+0x1be>
 800729c:	2b41      	cmp	r3, #65	; 0x41
 800729e:	d1c1      	bne.n	8007224 <_scanf_float+0x70>
 80072a0:	2a01      	cmp	r2, #1
 80072a2:	d1bf      	bne.n	8007224 <_scanf_float+0x70>
 80072a4:	2202      	movs	r2, #2
 80072a6:	e046      	b.n	8007336 <_scanf_float+0x182>
 80072a8:	2b65      	cmp	r3, #101	; 0x65
 80072aa:	d07a      	beq.n	80073a2 <_scanf_float+0x1ee>
 80072ac:	d818      	bhi.n	80072e0 <_scanf_float+0x12c>
 80072ae:	2b54      	cmp	r3, #84	; 0x54
 80072b0:	d066      	beq.n	8007380 <_scanf_float+0x1cc>
 80072b2:	d811      	bhi.n	80072d8 <_scanf_float+0x124>
 80072b4:	2b4e      	cmp	r3, #78	; 0x4e
 80072b6:	d1b5      	bne.n	8007224 <_scanf_float+0x70>
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d146      	bne.n	800734a <_scanf_float+0x196>
 80072bc:	f1b9 0f00 	cmp.w	r9, #0
 80072c0:	d145      	bne.n	800734e <_scanf_float+0x19a>
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80072c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80072cc:	d13f      	bne.n	800734e <_scanf_float+0x19a>
 80072ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80072d2:	6021      	str	r1, [r4, #0]
 80072d4:	2201      	movs	r2, #1
 80072d6:	e02e      	b.n	8007336 <_scanf_float+0x182>
 80072d8:	2b59      	cmp	r3, #89	; 0x59
 80072da:	d01e      	beq.n	800731a <_scanf_float+0x166>
 80072dc:	2b61      	cmp	r3, #97	; 0x61
 80072de:	e7de      	b.n	800729e <_scanf_float+0xea>
 80072e0:	2b6e      	cmp	r3, #110	; 0x6e
 80072e2:	d0e9      	beq.n	80072b8 <_scanf_float+0x104>
 80072e4:	d815      	bhi.n	8007312 <_scanf_float+0x15e>
 80072e6:	2b66      	cmp	r3, #102	; 0x66
 80072e8:	d043      	beq.n	8007372 <_scanf_float+0x1be>
 80072ea:	2b69      	cmp	r3, #105	; 0x69
 80072ec:	d19a      	bne.n	8007224 <_scanf_float+0x70>
 80072ee:	f1bb 0f00 	cmp.w	fp, #0
 80072f2:	d138      	bne.n	8007366 <_scanf_float+0x1b2>
 80072f4:	f1b9 0f00 	cmp.w	r9, #0
 80072f8:	d197      	bne.n	800722a <_scanf_float+0x76>
 80072fa:	6821      	ldr	r1, [r4, #0]
 80072fc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007300:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007304:	d195      	bne.n	8007232 <_scanf_float+0x7e>
 8007306:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800730a:	6021      	str	r1, [r4, #0]
 800730c:	f04f 0b01 	mov.w	fp, #1
 8007310:	e011      	b.n	8007336 <_scanf_float+0x182>
 8007312:	2b74      	cmp	r3, #116	; 0x74
 8007314:	d034      	beq.n	8007380 <_scanf_float+0x1cc>
 8007316:	2b79      	cmp	r3, #121	; 0x79
 8007318:	d184      	bne.n	8007224 <_scanf_float+0x70>
 800731a:	f1bb 0f07 	cmp.w	fp, #7
 800731e:	d181      	bne.n	8007224 <_scanf_float+0x70>
 8007320:	f04f 0b08 	mov.w	fp, #8
 8007324:	e007      	b.n	8007336 <_scanf_float+0x182>
 8007326:	eb12 0f0b 	cmn.w	r2, fp
 800732a:	f47f af7b 	bne.w	8007224 <_scanf_float+0x70>
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	702b      	strb	r3, [r5, #0]
 8007338:	3501      	adds	r5, #1
 800733a:	e79a      	b.n	8007272 <_scanf_float+0xbe>
 800733c:	6821      	ldr	r1, [r4, #0]
 800733e:	0608      	lsls	r0, r1, #24
 8007340:	f57f af70 	bpl.w	8007224 <_scanf_float+0x70>
 8007344:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007348:	e7f4      	b.n	8007334 <_scanf_float+0x180>
 800734a:	2a02      	cmp	r2, #2
 800734c:	d047      	beq.n	80073de <_scanf_float+0x22a>
 800734e:	f1bb 0f01 	cmp.w	fp, #1
 8007352:	d003      	beq.n	800735c <_scanf_float+0x1a8>
 8007354:	f1bb 0f04 	cmp.w	fp, #4
 8007358:	f47f af64 	bne.w	8007224 <_scanf_float+0x70>
 800735c:	f10b 0b01 	add.w	fp, fp, #1
 8007360:	fa5f fb8b 	uxtb.w	fp, fp
 8007364:	e7e7      	b.n	8007336 <_scanf_float+0x182>
 8007366:	f1bb 0f03 	cmp.w	fp, #3
 800736a:	d0f7      	beq.n	800735c <_scanf_float+0x1a8>
 800736c:	f1bb 0f05 	cmp.w	fp, #5
 8007370:	e7f2      	b.n	8007358 <_scanf_float+0x1a4>
 8007372:	f1bb 0f02 	cmp.w	fp, #2
 8007376:	f47f af55 	bne.w	8007224 <_scanf_float+0x70>
 800737a:	f04f 0b03 	mov.w	fp, #3
 800737e:	e7da      	b.n	8007336 <_scanf_float+0x182>
 8007380:	f1bb 0f06 	cmp.w	fp, #6
 8007384:	f47f af4e 	bne.w	8007224 <_scanf_float+0x70>
 8007388:	f04f 0b07 	mov.w	fp, #7
 800738c:	e7d3      	b.n	8007336 <_scanf_float+0x182>
 800738e:	6821      	ldr	r1, [r4, #0]
 8007390:	0588      	lsls	r0, r1, #22
 8007392:	f57f af47 	bpl.w	8007224 <_scanf_float+0x70>
 8007396:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800739a:	6021      	str	r1, [r4, #0]
 800739c:	f8cd 9008 	str.w	r9, [sp, #8]
 80073a0:	e7c9      	b.n	8007336 <_scanf_float+0x182>
 80073a2:	6821      	ldr	r1, [r4, #0]
 80073a4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80073a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80073ac:	d006      	beq.n	80073bc <_scanf_float+0x208>
 80073ae:	0548      	lsls	r0, r1, #21
 80073b0:	f57f af38 	bpl.w	8007224 <_scanf_float+0x70>
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	f43f af3b 	beq.w	8007232 <_scanf_float+0x7e>
 80073bc:	0588      	lsls	r0, r1, #22
 80073be:	bf58      	it	pl
 80073c0:	9802      	ldrpl	r0, [sp, #8]
 80073c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80073c6:	bf58      	it	pl
 80073c8:	eba9 0000 	subpl.w	r0, r9, r0
 80073cc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80073d0:	bf58      	it	pl
 80073d2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80073d6:	6021      	str	r1, [r4, #0]
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	e7ab      	b.n	8007336 <_scanf_float+0x182>
 80073de:	2203      	movs	r2, #3
 80073e0:	e7a9      	b.n	8007336 <_scanf_float+0x182>
 80073e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	4631      	mov	r1, r6
 80073ea:	4638      	mov	r0, r7
 80073ec:	4798      	blx	r3
 80073ee:	9a05      	ldr	r2, [sp, #20]
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f43f af04 	beq.w	80071fe <_scanf_float+0x4a>
 80073f6:	e715      	b.n	8007224 <_scanf_float+0x70>
 80073f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007400:	4632      	mov	r2, r6
 8007402:	4638      	mov	r0, r7
 8007404:	4798      	blx	r3
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	3b01      	subs	r3, #1
 800740a:	6123      	str	r3, [r4, #16]
 800740c:	e715      	b.n	800723a <_scanf_float+0x86>
 800740e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007412:	2b06      	cmp	r3, #6
 8007414:	d80a      	bhi.n	800742c <_scanf_float+0x278>
 8007416:	f1bb 0f02 	cmp.w	fp, #2
 800741a:	d968      	bls.n	80074ee <_scanf_float+0x33a>
 800741c:	f1ab 0b03 	sub.w	fp, fp, #3
 8007420:	fa5f fb8b 	uxtb.w	fp, fp
 8007424:	eba5 0b0b 	sub.w	fp, r5, fp
 8007428:	455d      	cmp	r5, fp
 800742a:	d14b      	bne.n	80074c4 <_scanf_float+0x310>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	05da      	lsls	r2, r3, #23
 8007430:	d51f      	bpl.n	8007472 <_scanf_float+0x2be>
 8007432:	055b      	lsls	r3, r3, #21
 8007434:	d468      	bmi.n	8007508 <_scanf_float+0x354>
 8007436:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	2965      	cmp	r1, #101	; 0x65
 800743e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007442:	f105 3bff 	add.w	fp, r5, #4294967295
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	d00d      	beq.n	8007466 <_scanf_float+0x2b2>
 800744a:	2945      	cmp	r1, #69	; 0x45
 800744c:	d00b      	beq.n	8007466 <_scanf_float+0x2b2>
 800744e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007452:	4632      	mov	r2, r6
 8007454:	4638      	mov	r0, r7
 8007456:	4798      	blx	r3
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800745e:	3b01      	subs	r3, #1
 8007460:	f1a5 0b02 	sub.w	fp, r5, #2
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800746a:	4632      	mov	r2, r6
 800746c:	4638      	mov	r0, r7
 800746e:	4798      	blx	r3
 8007470:	465d      	mov	r5, fp
 8007472:	6826      	ldr	r6, [r4, #0]
 8007474:	f016 0610 	ands.w	r6, r6, #16
 8007478:	d17a      	bne.n	8007570 <_scanf_float+0x3bc>
 800747a:	702e      	strb	r6, [r5, #0]
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007486:	d142      	bne.n	800750e <_scanf_float+0x35a>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	eba9 0303 	sub.w	r3, r9, r3
 800748e:	425a      	negs	r2, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d149      	bne.n	8007528 <_scanf_float+0x374>
 8007494:	2200      	movs	r2, #0
 8007496:	4641      	mov	r1, r8
 8007498:	4638      	mov	r0, r7
 800749a:	f000 feb5 	bl	8008208 <_strtod_r>
 800749e:	6825      	ldr	r5, [r4, #0]
 80074a0:	f8da 3000 	ldr.w	r3, [sl]
 80074a4:	f015 0f02 	tst.w	r5, #2
 80074a8:	f103 0204 	add.w	r2, r3, #4
 80074ac:	ec59 8b10 	vmov	r8, r9, d0
 80074b0:	f8ca 2000 	str.w	r2, [sl]
 80074b4:	d043      	beq.n	800753e <_scanf_float+0x38a>
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	e9c3 8900 	strd	r8, r9, [r3]
 80074bc:	68e3      	ldr	r3, [r4, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60e3      	str	r3, [r4, #12]
 80074c2:	e6be      	b.n	8007242 <_scanf_float+0x8e>
 80074c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80074cc:	4632      	mov	r2, r6
 80074ce:	4638      	mov	r0, r7
 80074d0:	4798      	blx	r3
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	e7a6      	b.n	8007428 <_scanf_float+0x274>
 80074da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80074e2:	4632      	mov	r2, r6
 80074e4:	4638      	mov	r0, r7
 80074e6:	4798      	blx	r3
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	4545      	cmp	r5, r8
 80074f0:	d8f3      	bhi.n	80074da <_scanf_float+0x326>
 80074f2:	e6a5      	b.n	8007240 <_scanf_float+0x8c>
 80074f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80074fc:	4632      	mov	r2, r6
 80074fe:	4638      	mov	r0, r7
 8007500:	4798      	blx	r3
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	3b01      	subs	r3, #1
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	4545      	cmp	r5, r8
 800750a:	d8f3      	bhi.n	80074f4 <_scanf_float+0x340>
 800750c:	e698      	b.n	8007240 <_scanf_float+0x8c>
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0bf      	beq.n	8007494 <_scanf_float+0x2e0>
 8007514:	9904      	ldr	r1, [sp, #16]
 8007516:	230a      	movs	r3, #10
 8007518:	4632      	mov	r2, r6
 800751a:	3101      	adds	r1, #1
 800751c:	4638      	mov	r0, r7
 800751e:	f000 feff 	bl	8008320 <_strtol_r>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	9d04      	ldr	r5, [sp, #16]
 8007526:	1ac2      	subs	r2, r0, r3
 8007528:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800752c:	429d      	cmp	r5, r3
 800752e:	bf28      	it	cs
 8007530:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007534:	490f      	ldr	r1, [pc, #60]	; (8007574 <_scanf_float+0x3c0>)
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f824 	bl	8007584 <siprintf>
 800753c:	e7aa      	b.n	8007494 <_scanf_float+0x2e0>
 800753e:	f015 0504 	ands.w	r5, r5, #4
 8007542:	d1b8      	bne.n	80074b6 <_scanf_float+0x302>
 8007544:	681f      	ldr	r7, [r3, #0]
 8007546:	ee10 2a10 	vmov	r2, s0
 800754a:	464b      	mov	r3, r9
 800754c:	ee10 0a10 	vmov	r0, s0
 8007550:	4649      	mov	r1, r9
 8007552:	f7f9 faf3 	bl	8000b3c <__aeabi_dcmpun>
 8007556:	b128      	cbz	r0, 8007564 <_scanf_float+0x3b0>
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f80d 	bl	8007578 <nanf>
 800755e:	ed87 0a00 	vstr	s0, [r7]
 8007562:	e7ab      	b.n	80074bc <_scanf_float+0x308>
 8007564:	4640      	mov	r0, r8
 8007566:	4649      	mov	r1, r9
 8007568:	f7f9 fb46 	bl	8000bf8 <__aeabi_d2f>
 800756c:	6038      	str	r0, [r7, #0]
 800756e:	e7a5      	b.n	80074bc <_scanf_float+0x308>
 8007570:	2600      	movs	r6, #0
 8007572:	e666      	b.n	8007242 <_scanf_float+0x8e>
 8007574:	0800a454 	.word	0x0800a454

08007578 <nanf>:
 8007578:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007580 <nanf+0x8>
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	7fc00000 	.word	0x7fc00000

08007584 <siprintf>:
 8007584:	b40e      	push	{r1, r2, r3}
 8007586:	b500      	push	{lr}
 8007588:	b09c      	sub	sp, #112	; 0x70
 800758a:	ab1d      	add	r3, sp, #116	; 0x74
 800758c:	9002      	str	r0, [sp, #8]
 800758e:	9006      	str	r0, [sp, #24]
 8007590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007594:	4809      	ldr	r0, [pc, #36]	; (80075bc <siprintf+0x38>)
 8007596:	9107      	str	r1, [sp, #28]
 8007598:	9104      	str	r1, [sp, #16]
 800759a:	4909      	ldr	r1, [pc, #36]	; (80075c0 <siprintf+0x3c>)
 800759c:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a0:	9105      	str	r1, [sp, #20]
 80075a2:	6800      	ldr	r0, [r0, #0]
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	a902      	add	r1, sp, #8
 80075a8:	f002 fd80 	bl	800a0ac <_svfiprintf_r>
 80075ac:	9b02      	ldr	r3, [sp, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	b01c      	add	sp, #112	; 0x70
 80075b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b8:	b003      	add	sp, #12
 80075ba:	4770      	bx	lr
 80075bc:	20000038 	.word	0x20000038
 80075c0:	ffff0208 	.word	0xffff0208

080075c4 <strcat>:
 80075c4:	b510      	push	{r4, lr}
 80075c6:	4603      	mov	r3, r0
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	1c5c      	adds	r4, r3, #1
 80075cc:	b93a      	cbnz	r2, 80075de <strcat+0x1a>
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d1f9      	bne.n	80075d0 <strcat+0xc>
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	4623      	mov	r3, r4
 80075e0:	e7f2      	b.n	80075c8 <strcat+0x4>

080075e2 <sulp>:
 80075e2:	b570      	push	{r4, r5, r6, lr}
 80075e4:	4604      	mov	r4, r0
 80075e6:	460d      	mov	r5, r1
 80075e8:	ec45 4b10 	vmov	d0, r4, r5
 80075ec:	4616      	mov	r6, r2
 80075ee:	f002 fb19 	bl	8009c24 <__ulp>
 80075f2:	ec51 0b10 	vmov	r0, r1, d0
 80075f6:	b17e      	cbz	r6, 8007618 <sulp+0x36>
 80075f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007600:	2b00      	cmp	r3, #0
 8007602:	dd09      	ble.n	8007618 <sulp+0x36>
 8007604:	051b      	lsls	r3, r3, #20
 8007606:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800760a:	2400      	movs	r4, #0
 800760c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	f7f8 fff8 	bl	8000608 <__aeabi_dmul>
 8007618:	bd70      	pop	{r4, r5, r6, pc}
 800761a:	0000      	movs	r0, r0
 800761c:	0000      	movs	r0, r0
	...

08007620 <_strtod_l>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	461f      	mov	r7, r3
 8007626:	b0a1      	sub	sp, #132	; 0x84
 8007628:	2300      	movs	r3, #0
 800762a:	4681      	mov	r9, r0
 800762c:	4638      	mov	r0, r7
 800762e:	460e      	mov	r6, r1
 8007630:	9217      	str	r2, [sp, #92]	; 0x5c
 8007632:	931c      	str	r3, [sp, #112]	; 0x70
 8007634:	f001 fff5 	bl	8009622 <__localeconv_l>
 8007638:	4680      	mov	r8, r0
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	f7f8 fdd0 	bl	80001e0 <strlen>
 8007640:	f04f 0a00 	mov.w	sl, #0
 8007644:	4604      	mov	r4, r0
 8007646:	f04f 0b00 	mov.w	fp, #0
 800764a:	961b      	str	r6, [sp, #108]	; 0x6c
 800764c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	2a0d      	cmp	r2, #13
 8007652:	d832      	bhi.n	80076ba <_strtod_l+0x9a>
 8007654:	2a09      	cmp	r2, #9
 8007656:	d236      	bcs.n	80076c6 <_strtod_l+0xa6>
 8007658:	2a00      	cmp	r2, #0
 800765a:	d03e      	beq.n	80076da <_strtod_l+0xba>
 800765c:	2300      	movs	r3, #0
 800765e:	930d      	str	r3, [sp, #52]	; 0x34
 8007660:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007662:	782b      	ldrb	r3, [r5, #0]
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	f040 80ac 	bne.w	80077c2 <_strtod_l+0x1a2>
 800766a:	786b      	ldrb	r3, [r5, #1]
 800766c:	2b58      	cmp	r3, #88	; 0x58
 800766e:	d001      	beq.n	8007674 <_strtod_l+0x54>
 8007670:	2b78      	cmp	r3, #120	; 0x78
 8007672:	d167      	bne.n	8007744 <_strtod_l+0x124>
 8007674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	ab1c      	add	r3, sp, #112	; 0x70
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	9702      	str	r7, [sp, #8]
 800767e:	ab1d      	add	r3, sp, #116	; 0x74
 8007680:	4a88      	ldr	r2, [pc, #544]	; (80078a4 <_strtod_l+0x284>)
 8007682:	a91b      	add	r1, sp, #108	; 0x6c
 8007684:	4648      	mov	r0, r9
 8007686:	f001 fcf2 	bl	800906e <__gethex>
 800768a:	f010 0407 	ands.w	r4, r0, #7
 800768e:	4606      	mov	r6, r0
 8007690:	d005      	beq.n	800769e <_strtod_l+0x7e>
 8007692:	2c06      	cmp	r4, #6
 8007694:	d12b      	bne.n	80076ee <_strtod_l+0xce>
 8007696:	3501      	adds	r5, #1
 8007698:	2300      	movs	r3, #0
 800769a:	951b      	str	r5, [sp, #108]	; 0x6c
 800769c:	930d      	str	r3, [sp, #52]	; 0x34
 800769e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 859a 	bne.w	80081da <_strtod_l+0xbba>
 80076a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a8:	b1e3      	cbz	r3, 80076e4 <_strtod_l+0xc4>
 80076aa:	4652      	mov	r2, sl
 80076ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076b0:	ec43 2b10 	vmov	d0, r2, r3
 80076b4:	b021      	add	sp, #132	; 0x84
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	2a2b      	cmp	r2, #43	; 0x2b
 80076bc:	d015      	beq.n	80076ea <_strtod_l+0xca>
 80076be:	2a2d      	cmp	r2, #45	; 0x2d
 80076c0:	d004      	beq.n	80076cc <_strtod_l+0xac>
 80076c2:	2a20      	cmp	r2, #32
 80076c4:	d1ca      	bne.n	800765c <_strtod_l+0x3c>
 80076c6:	3301      	adds	r3, #1
 80076c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ca:	e7bf      	b.n	800764c <_strtod_l+0x2c>
 80076cc:	2201      	movs	r2, #1
 80076ce:	920d      	str	r2, [sp, #52]	; 0x34
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1c2      	bne.n	8007660 <_strtod_l+0x40>
 80076da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 8579 	bne.w	80081d6 <_strtod_l+0xbb6>
 80076e4:	4652      	mov	r2, sl
 80076e6:	465b      	mov	r3, fp
 80076e8:	e7e2      	b.n	80076b0 <_strtod_l+0x90>
 80076ea:	2200      	movs	r2, #0
 80076ec:	e7ef      	b.n	80076ce <_strtod_l+0xae>
 80076ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076f0:	b13a      	cbz	r2, 8007702 <_strtod_l+0xe2>
 80076f2:	2135      	movs	r1, #53	; 0x35
 80076f4:	a81e      	add	r0, sp, #120	; 0x78
 80076f6:	f002 fb8d 	bl	8009e14 <__copybits>
 80076fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076fc:	4648      	mov	r0, r9
 80076fe:	f001 fffa 	bl	80096f6 <_Bfree>
 8007702:	3c01      	subs	r4, #1
 8007704:	2c04      	cmp	r4, #4
 8007706:	d806      	bhi.n	8007716 <_strtod_l+0xf6>
 8007708:	e8df f004 	tbb	[pc, r4]
 800770c:	1714030a 	.word	0x1714030a
 8007710:	0a          	.byte	0x0a
 8007711:	00          	.byte	0x00
 8007712:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007716:	0730      	lsls	r0, r6, #28
 8007718:	d5c1      	bpl.n	800769e <_strtod_l+0x7e>
 800771a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800771e:	e7be      	b.n	800769e <_strtod_l+0x7e>
 8007720:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007724:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007726:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800772a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800772e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007732:	e7f0      	b.n	8007716 <_strtod_l+0xf6>
 8007734:	f8df b170 	ldr.w	fp, [pc, #368]	; 80078a8 <_strtod_l+0x288>
 8007738:	e7ed      	b.n	8007716 <_strtod_l+0xf6>
 800773a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800773e:	f04f 3aff 	mov.w	sl, #4294967295
 8007742:	e7e8      	b.n	8007716 <_strtod_l+0xf6>
 8007744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	921b      	str	r2, [sp, #108]	; 0x6c
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b30      	cmp	r3, #48	; 0x30
 800774e:	d0f9      	beq.n	8007744 <_strtod_l+0x124>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0a4      	beq.n	800769e <_strtod_l+0x7e>
 8007754:	2301      	movs	r3, #1
 8007756:	2500      	movs	r5, #0
 8007758:	9306      	str	r3, [sp, #24]
 800775a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800775c:	9308      	str	r3, [sp, #32]
 800775e:	9507      	str	r5, [sp, #28]
 8007760:	9505      	str	r5, [sp, #20]
 8007762:	220a      	movs	r2, #10
 8007764:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007766:	7807      	ldrb	r7, [r0, #0]
 8007768:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800776c:	b2d9      	uxtb	r1, r3
 800776e:	2909      	cmp	r1, #9
 8007770:	d929      	bls.n	80077c6 <_strtod_l+0x1a6>
 8007772:	4622      	mov	r2, r4
 8007774:	f8d8 1000 	ldr.w	r1, [r8]
 8007778:	f002 fda0 	bl	800a2bc <strncmp>
 800777c:	2800      	cmp	r0, #0
 800777e:	d031      	beq.n	80077e4 <_strtod_l+0x1c4>
 8007780:	2000      	movs	r0, #0
 8007782:	9c05      	ldr	r4, [sp, #20]
 8007784:	9004      	str	r0, [sp, #16]
 8007786:	463b      	mov	r3, r7
 8007788:	4602      	mov	r2, r0
 800778a:	2b65      	cmp	r3, #101	; 0x65
 800778c:	d001      	beq.n	8007792 <_strtod_l+0x172>
 800778e:	2b45      	cmp	r3, #69	; 0x45
 8007790:	d114      	bne.n	80077bc <_strtod_l+0x19c>
 8007792:	b924      	cbnz	r4, 800779e <_strtod_l+0x17e>
 8007794:	b910      	cbnz	r0, 800779c <_strtod_l+0x17c>
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d09e      	beq.n	80076da <_strtod_l+0xba>
 800779c:	2400      	movs	r4, #0
 800779e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80077a0:	1c73      	adds	r3, r6, #1
 80077a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80077a4:	7873      	ldrb	r3, [r6, #1]
 80077a6:	2b2b      	cmp	r3, #43	; 0x2b
 80077a8:	d078      	beq.n	800789c <_strtod_l+0x27c>
 80077aa:	2b2d      	cmp	r3, #45	; 0x2d
 80077ac:	d070      	beq.n	8007890 <_strtod_l+0x270>
 80077ae:	f04f 0c00 	mov.w	ip, #0
 80077b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80077b6:	2f09      	cmp	r7, #9
 80077b8:	d97c      	bls.n	80078b4 <_strtod_l+0x294>
 80077ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80077bc:	f04f 0e00 	mov.w	lr, #0
 80077c0:	e09a      	b.n	80078f8 <_strtod_l+0x2d8>
 80077c2:	2300      	movs	r3, #0
 80077c4:	e7c7      	b.n	8007756 <_strtod_l+0x136>
 80077c6:	9905      	ldr	r1, [sp, #20]
 80077c8:	2908      	cmp	r1, #8
 80077ca:	bfdd      	ittte	le
 80077cc:	9907      	ldrle	r1, [sp, #28]
 80077ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80077d2:	9307      	strle	r3, [sp, #28]
 80077d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	3001      	adds	r0, #1
 80077dc:	3301      	adds	r3, #1
 80077de:	9305      	str	r3, [sp, #20]
 80077e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80077e2:	e7bf      	b.n	8007764 <_strtod_l+0x144>
 80077e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077e6:	191a      	adds	r2, r3, r4
 80077e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80077ea:	9a05      	ldr	r2, [sp, #20]
 80077ec:	5d1b      	ldrb	r3, [r3, r4]
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d037      	beq.n	8007862 <_strtod_l+0x242>
 80077f2:	9c05      	ldr	r4, [sp, #20]
 80077f4:	4602      	mov	r2, r0
 80077f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80077fa:	2909      	cmp	r1, #9
 80077fc:	d913      	bls.n	8007826 <_strtod_l+0x206>
 80077fe:	2101      	movs	r1, #1
 8007800:	9104      	str	r1, [sp, #16]
 8007802:	e7c2      	b.n	800778a <_strtod_l+0x16a>
 8007804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	921b      	str	r2, [sp, #108]	; 0x6c
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	3001      	adds	r0, #1
 800780e:	2b30      	cmp	r3, #48	; 0x30
 8007810:	d0f8      	beq.n	8007804 <_strtod_l+0x1e4>
 8007812:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007816:	2a08      	cmp	r2, #8
 8007818:	f200 84e4 	bhi.w	80081e4 <_strtod_l+0xbc4>
 800781c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800781e:	9208      	str	r2, [sp, #32]
 8007820:	4602      	mov	r2, r0
 8007822:	2000      	movs	r0, #0
 8007824:	4604      	mov	r4, r0
 8007826:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800782a:	f100 0101 	add.w	r1, r0, #1
 800782e:	d012      	beq.n	8007856 <_strtod_l+0x236>
 8007830:	440a      	add	r2, r1
 8007832:	eb00 0c04 	add.w	ip, r0, r4
 8007836:	4621      	mov	r1, r4
 8007838:	270a      	movs	r7, #10
 800783a:	458c      	cmp	ip, r1
 800783c:	d113      	bne.n	8007866 <_strtod_l+0x246>
 800783e:	1821      	adds	r1, r4, r0
 8007840:	2908      	cmp	r1, #8
 8007842:	f104 0401 	add.w	r4, r4, #1
 8007846:	4404      	add	r4, r0
 8007848:	dc19      	bgt.n	800787e <_strtod_l+0x25e>
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	210a      	movs	r1, #10
 800784e:	fb01 e303 	mla	r3, r1, r3, lr
 8007852:	9307      	str	r3, [sp, #28]
 8007854:	2100      	movs	r1, #0
 8007856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007858:	1c58      	adds	r0, r3, #1
 800785a:	901b      	str	r0, [sp, #108]	; 0x6c
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	4608      	mov	r0, r1
 8007860:	e7c9      	b.n	80077f6 <_strtod_l+0x1d6>
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	e7d3      	b.n	800780e <_strtod_l+0x1ee>
 8007866:	2908      	cmp	r1, #8
 8007868:	f101 0101 	add.w	r1, r1, #1
 800786c:	dc03      	bgt.n	8007876 <_strtod_l+0x256>
 800786e:	9b07      	ldr	r3, [sp, #28]
 8007870:	437b      	muls	r3, r7
 8007872:	9307      	str	r3, [sp, #28]
 8007874:	e7e1      	b.n	800783a <_strtod_l+0x21a>
 8007876:	2910      	cmp	r1, #16
 8007878:	bfd8      	it	le
 800787a:	437d      	mulle	r5, r7
 800787c:	e7dd      	b.n	800783a <_strtod_l+0x21a>
 800787e:	2c10      	cmp	r4, #16
 8007880:	bfdc      	itt	le
 8007882:	210a      	movle	r1, #10
 8007884:	fb01 e505 	mlale	r5, r1, r5, lr
 8007888:	e7e4      	b.n	8007854 <_strtod_l+0x234>
 800788a:	2301      	movs	r3, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	e781      	b.n	8007794 <_strtod_l+0x174>
 8007890:	f04f 0c01 	mov.w	ip, #1
 8007894:	1cb3      	adds	r3, r6, #2
 8007896:	931b      	str	r3, [sp, #108]	; 0x6c
 8007898:	78b3      	ldrb	r3, [r6, #2]
 800789a:	e78a      	b.n	80077b2 <_strtod_l+0x192>
 800789c:	f04f 0c00 	mov.w	ip, #0
 80078a0:	e7f8      	b.n	8007894 <_strtod_l+0x274>
 80078a2:	bf00      	nop
 80078a4:	0800a45c 	.word	0x0800a45c
 80078a8:	7ff00000 	.word	0x7ff00000
 80078ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078ae:	1c5f      	adds	r7, r3, #1
 80078b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80078b2:	785b      	ldrb	r3, [r3, #1]
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d0f9      	beq.n	80078ac <_strtod_l+0x28c>
 80078b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80078bc:	2f08      	cmp	r7, #8
 80078be:	f63f af7d 	bhi.w	80077bc <_strtod_l+0x19c>
 80078c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80078c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078c8:	930a      	str	r3, [sp, #40]	; 0x28
 80078ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078cc:	1c5f      	adds	r7, r3, #1
 80078ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80078d6:	f1b8 0f09 	cmp.w	r8, #9
 80078da:	d937      	bls.n	800794c <_strtod_l+0x32c>
 80078dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078de:	1a7f      	subs	r7, r7, r1
 80078e0:	2f08      	cmp	r7, #8
 80078e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80078e6:	dc37      	bgt.n	8007958 <_strtod_l+0x338>
 80078e8:	45be      	cmp	lr, r7
 80078ea:	bfa8      	it	ge
 80078ec:	46be      	movge	lr, r7
 80078ee:	f1bc 0f00 	cmp.w	ip, #0
 80078f2:	d001      	beq.n	80078f8 <_strtod_l+0x2d8>
 80078f4:	f1ce 0e00 	rsb	lr, lr, #0
 80078f8:	2c00      	cmp	r4, #0
 80078fa:	d151      	bne.n	80079a0 <_strtod_l+0x380>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f47f aece 	bne.w	800769e <_strtod_l+0x7e>
 8007902:	9a06      	ldr	r2, [sp, #24]
 8007904:	2a00      	cmp	r2, #0
 8007906:	f47f aeca 	bne.w	800769e <_strtod_l+0x7e>
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	2a00      	cmp	r2, #0
 800790e:	f47f aee4 	bne.w	80076da <_strtod_l+0xba>
 8007912:	2b4e      	cmp	r3, #78	; 0x4e
 8007914:	d027      	beq.n	8007966 <_strtod_l+0x346>
 8007916:	dc21      	bgt.n	800795c <_strtod_l+0x33c>
 8007918:	2b49      	cmp	r3, #73	; 0x49
 800791a:	f47f aede 	bne.w	80076da <_strtod_l+0xba>
 800791e:	49a0      	ldr	r1, [pc, #640]	; (8007ba0 <_strtod_l+0x580>)
 8007920:	a81b      	add	r0, sp, #108	; 0x6c
 8007922:	f001 fdd7 	bl	80094d4 <__match>
 8007926:	2800      	cmp	r0, #0
 8007928:	f43f aed7 	beq.w	80076da <_strtod_l+0xba>
 800792c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800792e:	499d      	ldr	r1, [pc, #628]	; (8007ba4 <_strtod_l+0x584>)
 8007930:	3b01      	subs	r3, #1
 8007932:	a81b      	add	r0, sp, #108	; 0x6c
 8007934:	931b      	str	r3, [sp, #108]	; 0x6c
 8007936:	f001 fdcd 	bl	80094d4 <__match>
 800793a:	b910      	cbnz	r0, 8007942 <_strtod_l+0x322>
 800793c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800793e:	3301      	adds	r3, #1
 8007940:	931b      	str	r3, [sp, #108]	; 0x6c
 8007942:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007bb8 <_strtod_l+0x598>
 8007946:	f04f 0a00 	mov.w	sl, #0
 800794a:	e6a8      	b.n	800769e <_strtod_l+0x7e>
 800794c:	210a      	movs	r1, #10
 800794e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007952:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007956:	e7b8      	b.n	80078ca <_strtod_l+0x2aa>
 8007958:	46be      	mov	lr, r7
 800795a:	e7c8      	b.n	80078ee <_strtod_l+0x2ce>
 800795c:	2b69      	cmp	r3, #105	; 0x69
 800795e:	d0de      	beq.n	800791e <_strtod_l+0x2fe>
 8007960:	2b6e      	cmp	r3, #110	; 0x6e
 8007962:	f47f aeba 	bne.w	80076da <_strtod_l+0xba>
 8007966:	4990      	ldr	r1, [pc, #576]	; (8007ba8 <_strtod_l+0x588>)
 8007968:	a81b      	add	r0, sp, #108	; 0x6c
 800796a:	f001 fdb3 	bl	80094d4 <__match>
 800796e:	2800      	cmp	r0, #0
 8007970:	f43f aeb3 	beq.w	80076da <_strtod_l+0xba>
 8007974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b28      	cmp	r3, #40	; 0x28
 800797a:	d10e      	bne.n	800799a <_strtod_l+0x37a>
 800797c:	aa1e      	add	r2, sp, #120	; 0x78
 800797e:	498b      	ldr	r1, [pc, #556]	; (8007bac <_strtod_l+0x58c>)
 8007980:	a81b      	add	r0, sp, #108	; 0x6c
 8007982:	f001 fdbb 	bl	80094fc <__hexnan>
 8007986:	2805      	cmp	r0, #5
 8007988:	d107      	bne.n	800799a <_strtod_l+0x37a>
 800798a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800798c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007990:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007994:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007998:	e681      	b.n	800769e <_strtod_l+0x7e>
 800799a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007bc0 <_strtod_l+0x5a0>
 800799e:	e7d2      	b.n	8007946 <_strtod_l+0x326>
 80079a0:	ebae 0302 	sub.w	r3, lr, r2
 80079a4:	9306      	str	r3, [sp, #24]
 80079a6:	9b05      	ldr	r3, [sp, #20]
 80079a8:	9807      	ldr	r0, [sp, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf08      	it	eq
 80079ae:	4623      	moveq	r3, r4
 80079b0:	2c10      	cmp	r4, #16
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	46a0      	mov	r8, r4
 80079b6:	bfa8      	it	ge
 80079b8:	f04f 0810 	movge.w	r8, #16
 80079bc:	f7f8 fdaa 	bl	8000514 <__aeabi_ui2d>
 80079c0:	2c09      	cmp	r4, #9
 80079c2:	4682      	mov	sl, r0
 80079c4:	468b      	mov	fp, r1
 80079c6:	dc13      	bgt.n	80079f0 <_strtod_l+0x3d0>
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f43f ae67 	beq.w	800769e <_strtod_l+0x7e>
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	dd7a      	ble.n	8007aca <_strtod_l+0x4aa>
 80079d4:	2b16      	cmp	r3, #22
 80079d6:	dc61      	bgt.n	8007a9c <_strtod_l+0x47c>
 80079d8:	4a75      	ldr	r2, [pc, #468]	; (8007bb0 <_strtod_l+0x590>)
 80079da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80079de:	e9de 0100 	ldrd	r0, r1, [lr]
 80079e2:	4652      	mov	r2, sl
 80079e4:	465b      	mov	r3, fp
 80079e6:	f7f8 fe0f 	bl	8000608 <__aeabi_dmul>
 80079ea:	4682      	mov	sl, r0
 80079ec:	468b      	mov	fp, r1
 80079ee:	e656      	b.n	800769e <_strtod_l+0x7e>
 80079f0:	4b6f      	ldr	r3, [pc, #444]	; (8007bb0 <_strtod_l+0x590>)
 80079f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80079f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079fa:	f7f8 fe05 	bl	8000608 <__aeabi_dmul>
 80079fe:	4606      	mov	r6, r0
 8007a00:	4628      	mov	r0, r5
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7f8 fd86 	bl	8000514 <__aeabi_ui2d>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fc44 	bl	800029c <__adddf3>
 8007a14:	2c0f      	cmp	r4, #15
 8007a16:	4682      	mov	sl, r0
 8007a18:	468b      	mov	fp, r1
 8007a1a:	ddd5      	ble.n	80079c8 <_strtod_l+0x3a8>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	eba4 0808 	sub.w	r8, r4, r8
 8007a22:	4498      	add	r8, r3
 8007a24:	f1b8 0f00 	cmp.w	r8, #0
 8007a28:	f340 8096 	ble.w	8007b58 <_strtod_l+0x538>
 8007a2c:	f018 030f 	ands.w	r3, r8, #15
 8007a30:	d00a      	beq.n	8007a48 <_strtod_l+0x428>
 8007a32:	495f      	ldr	r1, [pc, #380]	; (8007bb0 <_strtod_l+0x590>)
 8007a34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a40:	f7f8 fde2 	bl	8000608 <__aeabi_dmul>
 8007a44:	4682      	mov	sl, r0
 8007a46:	468b      	mov	fp, r1
 8007a48:	f038 080f 	bics.w	r8, r8, #15
 8007a4c:	d073      	beq.n	8007b36 <_strtod_l+0x516>
 8007a4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a52:	dd47      	ble.n	8007ae4 <_strtod_l+0x4c4>
 8007a54:	2400      	movs	r4, #0
 8007a56:	46a0      	mov	r8, r4
 8007a58:	9407      	str	r4, [sp, #28]
 8007a5a:	9405      	str	r4, [sp, #20]
 8007a5c:	2322      	movs	r3, #34	; 0x22
 8007a5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007bb8 <_strtod_l+0x598>
 8007a62:	f8c9 3000 	str.w	r3, [r9]
 8007a66:	f04f 0a00 	mov.w	sl, #0
 8007a6a:	9b07      	ldr	r3, [sp, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f43f ae16 	beq.w	800769e <_strtod_l+0x7e>
 8007a72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a74:	4648      	mov	r0, r9
 8007a76:	f001 fe3e 	bl	80096f6 <_Bfree>
 8007a7a:	9905      	ldr	r1, [sp, #20]
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f001 fe3a 	bl	80096f6 <_Bfree>
 8007a82:	4641      	mov	r1, r8
 8007a84:	4648      	mov	r0, r9
 8007a86:	f001 fe36 	bl	80096f6 <_Bfree>
 8007a8a:	9907      	ldr	r1, [sp, #28]
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f001 fe32 	bl	80096f6 <_Bfree>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4648      	mov	r0, r9
 8007a96:	f001 fe2e 	bl	80096f6 <_Bfree>
 8007a9a:	e600      	b.n	800769e <_strtod_l+0x7e>
 8007a9c:	9a06      	ldr	r2, [sp, #24]
 8007a9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	dbba      	blt.n	8007a1c <_strtod_l+0x3fc>
 8007aa6:	4d42      	ldr	r5, [pc, #264]	; (8007bb0 <_strtod_l+0x590>)
 8007aa8:	f1c4 040f 	rsb	r4, r4, #15
 8007aac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ab0:	4652      	mov	r2, sl
 8007ab2:	465b      	mov	r3, fp
 8007ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab8:	f7f8 fda6 	bl	8000608 <__aeabi_dmul>
 8007abc:	9b06      	ldr	r3, [sp, #24]
 8007abe:	1b1c      	subs	r4, r3, r4
 8007ac0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ac8:	e78d      	b.n	80079e6 <_strtod_l+0x3c6>
 8007aca:	f113 0f16 	cmn.w	r3, #22
 8007ace:	dba5      	blt.n	8007a1c <_strtod_l+0x3fc>
 8007ad0:	4a37      	ldr	r2, [pc, #220]	; (8007bb0 <_strtod_l+0x590>)
 8007ad2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007ad6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 febd 	bl	800085c <__aeabi_ddiv>
 8007ae2:	e782      	b.n	80079ea <_strtod_l+0x3ca>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4e33      	ldr	r6, [pc, #204]	; (8007bb4 <_strtod_l+0x594>)
 8007ae8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007aec:	4650      	mov	r0, sl
 8007aee:	4659      	mov	r1, fp
 8007af0:	461d      	mov	r5, r3
 8007af2:	f1b8 0f01 	cmp.w	r8, #1
 8007af6:	dc21      	bgt.n	8007b3c <_strtod_l+0x51c>
 8007af8:	b10b      	cbz	r3, 8007afe <_strtod_l+0x4de>
 8007afa:	4682      	mov	sl, r0
 8007afc:	468b      	mov	fp, r1
 8007afe:	4b2d      	ldr	r3, [pc, #180]	; (8007bb4 <_strtod_l+0x594>)
 8007b00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007b04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b08:	4652      	mov	r2, sl
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007b10:	f7f8 fd7a 	bl	8000608 <__aeabi_dmul>
 8007b14:	4b28      	ldr	r3, [pc, #160]	; (8007bb8 <_strtod_l+0x598>)
 8007b16:	460a      	mov	r2, r1
 8007b18:	400b      	ands	r3, r1
 8007b1a:	4928      	ldr	r1, [pc, #160]	; (8007bbc <_strtod_l+0x59c>)
 8007b1c:	428b      	cmp	r3, r1
 8007b1e:	4682      	mov	sl, r0
 8007b20:	d898      	bhi.n	8007a54 <_strtod_l+0x434>
 8007b22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b26:	428b      	cmp	r3, r1
 8007b28:	bf86      	itte	hi
 8007b2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007bc4 <_strtod_l+0x5a4>
 8007b2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007b36:	2300      	movs	r3, #0
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	e077      	b.n	8007c2c <_strtod_l+0x60c>
 8007b3c:	f018 0f01 	tst.w	r8, #1
 8007b40:	d006      	beq.n	8007b50 <_strtod_l+0x530>
 8007b42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	3501      	adds	r5, #1
 8007b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b56:	e7cc      	b.n	8007af2 <_strtod_l+0x4d2>
 8007b58:	d0ed      	beq.n	8007b36 <_strtod_l+0x516>
 8007b5a:	f1c8 0800 	rsb	r8, r8, #0
 8007b5e:	f018 020f 	ands.w	r2, r8, #15
 8007b62:	d00a      	beq.n	8007b7a <_strtod_l+0x55a>
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <_strtod_l+0x590>)
 8007b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fe73 	bl	800085c <__aeabi_ddiv>
 8007b76:	4682      	mov	sl, r0
 8007b78:	468b      	mov	fp, r1
 8007b7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007b7e:	d0da      	beq.n	8007b36 <_strtod_l+0x516>
 8007b80:	f1b8 0f1f 	cmp.w	r8, #31
 8007b84:	dd20      	ble.n	8007bc8 <_strtod_l+0x5a8>
 8007b86:	2400      	movs	r4, #0
 8007b88:	46a0      	mov	r8, r4
 8007b8a:	9407      	str	r4, [sp, #28]
 8007b8c:	9405      	str	r4, [sp, #20]
 8007b8e:	2322      	movs	r3, #34	; 0x22
 8007b90:	f04f 0a00 	mov.w	sl, #0
 8007b94:	f04f 0b00 	mov.w	fp, #0
 8007b98:	f8c9 3000 	str.w	r3, [r9]
 8007b9c:	e765      	b.n	8007a6a <_strtod_l+0x44a>
 8007b9e:	bf00      	nop
 8007ba0:	0800a425 	.word	0x0800a425
 8007ba4:	0800a4b3 	.word	0x0800a4b3
 8007ba8:	0800a42d 	.word	0x0800a42d
 8007bac:	0800a470 	.word	0x0800a470
 8007bb0:	0800a558 	.word	0x0800a558
 8007bb4:	0800a530 	.word	0x0800a530
 8007bb8:	7ff00000 	.word	0x7ff00000
 8007bbc:	7ca00000 	.word	0x7ca00000
 8007bc0:	fff80000 	.word	0xfff80000
 8007bc4:	7fefffff 	.word	0x7fefffff
 8007bc8:	f018 0310 	ands.w	r3, r8, #16
 8007bcc:	bf18      	it	ne
 8007bce:	236a      	movne	r3, #106	; 0x6a
 8007bd0:	4da0      	ldr	r5, [pc, #640]	; (8007e54 <_strtod_l+0x834>)
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	f300 810a 	bgt.w	8007df6 <_strtod_l+0x7d6>
 8007be2:	b10b      	cbz	r3, 8007be8 <_strtod_l+0x5c8>
 8007be4:	4682      	mov	sl, r0
 8007be6:	468b      	mov	fp, r1
 8007be8:	9b04      	ldr	r3, [sp, #16]
 8007bea:	b1bb      	cbz	r3, 8007c1c <_strtod_l+0x5fc>
 8007bec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007bf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	dd10      	ble.n	8007c1c <_strtod_l+0x5fc>
 8007bfa:	2b1f      	cmp	r3, #31
 8007bfc:	f340 8107 	ble.w	8007e0e <_strtod_l+0x7ee>
 8007c00:	2b34      	cmp	r3, #52	; 0x34
 8007c02:	bfde      	ittt	le
 8007c04:	3b20      	suble	r3, #32
 8007c06:	f04f 32ff 	movle.w	r2, #4294967295
 8007c0a:	fa02 f303 	lslle.w	r3, r2, r3
 8007c0e:	f04f 0a00 	mov.w	sl, #0
 8007c12:	bfcc      	ite	gt
 8007c14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007c18:	ea03 0b01 	andle.w	fp, r3, r1
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4650      	mov	r0, sl
 8007c22:	4659      	mov	r1, fp
 8007c24:	f7f8 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1ac      	bne.n	8007b86 <_strtod_l+0x566>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	9a05      	ldr	r2, [sp, #20]
 8007c32:	9908      	ldr	r1, [sp, #32]
 8007c34:	4623      	mov	r3, r4
 8007c36:	4648      	mov	r0, r9
 8007c38:	f001 fdaf 	bl	800979a <__s2b>
 8007c3c:	9007      	str	r0, [sp, #28]
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	f43f af08 	beq.w	8007a54 <_strtod_l+0x434>
 8007c44:	9a06      	ldr	r2, [sp, #24]
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	f1c3 0300 	rsb	r3, r3, #0
 8007c4e:	bfa8      	it	ge
 8007c50:	2300      	movge	r3, #0
 8007c52:	930e      	str	r3, [sp, #56]	; 0x38
 8007c54:	2400      	movs	r4, #0
 8007c56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c5a:	9316      	str	r3, [sp, #88]	; 0x58
 8007c5c:	46a0      	mov	r8, r4
 8007c5e:	9b07      	ldr	r3, [sp, #28]
 8007c60:	4648      	mov	r0, r9
 8007c62:	6859      	ldr	r1, [r3, #4]
 8007c64:	f001 fd13 	bl	800968e <_Balloc>
 8007c68:	9005      	str	r0, [sp, #20]
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f aef6 	beq.w	8007a5c <_strtod_l+0x43c>
 8007c70:	9b07      	ldr	r3, [sp, #28]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	3202      	adds	r2, #2
 8007c76:	f103 010c 	add.w	r1, r3, #12
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	300c      	adds	r0, #12
 8007c7e:	f001 fcfb 	bl	8009678 <memcpy>
 8007c82:	aa1e      	add	r2, sp, #120	; 0x78
 8007c84:	a91d      	add	r1, sp, #116	; 0x74
 8007c86:	ec4b ab10 	vmov	d0, sl, fp
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007c90:	f002 f83e 	bl	8009d10 <__d2b>
 8007c94:	901c      	str	r0, [sp, #112]	; 0x70
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f aee0 	beq.w	8007a5c <_strtod_l+0x43c>
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f001 fe07 	bl	80098b2 <__i2b>
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f43f aed8 	beq.w	8007a5c <_strtod_l+0x43c>
 8007cac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007cae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007cb0:	2e00      	cmp	r6, #0
 8007cb2:	bfab      	itete	ge
 8007cb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007cb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007cb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007cba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007cbc:	bfac      	ite	ge
 8007cbe:	18f7      	addge	r7, r6, r3
 8007cc0:	1b9d      	sublt	r5, r3, r6
 8007cc2:	9b04      	ldr	r3, [sp, #16]
 8007cc4:	1af6      	subs	r6, r6, r3
 8007cc6:	4416      	add	r6, r2
 8007cc8:	4b63      	ldr	r3, [pc, #396]	; (8007e58 <_strtod_l+0x838>)
 8007cca:	3e01      	subs	r6, #1
 8007ccc:	429e      	cmp	r6, r3
 8007cce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cd2:	f280 80af 	bge.w	8007e34 <_strtod_l+0x814>
 8007cd6:	1b9b      	subs	r3, r3, r6
 8007cd8:	2b1f      	cmp	r3, #31
 8007cda:	eba2 0203 	sub.w	r2, r2, r3
 8007cde:	f04f 0101 	mov.w	r1, #1
 8007ce2:	f300 809b 	bgt.w	8007e1c <_strtod_l+0x7fc>
 8007ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cec:	2300      	movs	r3, #0
 8007cee:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf0:	18be      	adds	r6, r7, r2
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	42b7      	cmp	r7, r6
 8007cf6:	4415      	add	r5, r2
 8007cf8:	441d      	add	r5, r3
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	bfa8      	it	ge
 8007cfe:	4633      	movge	r3, r6
 8007d00:	42ab      	cmp	r3, r5
 8007d02:	bfa8      	it	ge
 8007d04:	462b      	movge	r3, r5
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfc2      	ittt	gt
 8007d0a:	1af6      	subgt	r6, r6, r3
 8007d0c:	1aed      	subgt	r5, r5, r3
 8007d0e:	1aff      	subgt	r7, r7, r3
 8007d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d12:	b1bb      	cbz	r3, 8007d44 <_strtod_l+0x724>
 8007d14:	4641      	mov	r1, r8
 8007d16:	461a      	mov	r2, r3
 8007d18:	4648      	mov	r0, r9
 8007d1a:	f001 fe69 	bl	80099f0 <__pow5mult>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f43f ae9b 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d26:	4601      	mov	r1, r0
 8007d28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d2a:	4648      	mov	r0, r9
 8007d2c:	f001 fdca 	bl	80098c4 <__multiply>
 8007d30:	900c      	str	r0, [sp, #48]	; 0x30
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f43f ae92 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d3a:	4648      	mov	r0, r9
 8007d3c:	f001 fcdb 	bl	80096f6 <_Bfree>
 8007d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d42:	931c      	str	r3, [sp, #112]	; 0x70
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	dc7a      	bgt.n	8007e3e <_strtod_l+0x81e>
 8007d48:	9b06      	ldr	r3, [sp, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd08      	ble.n	8007d60 <_strtod_l+0x740>
 8007d4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d50:	9905      	ldr	r1, [sp, #20]
 8007d52:	4648      	mov	r0, r9
 8007d54:	f001 fe4c 	bl	80099f0 <__pow5mult>
 8007d58:	9005      	str	r0, [sp, #20]
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f43f ae7e 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	dd08      	ble.n	8007d76 <_strtod_l+0x756>
 8007d64:	462a      	mov	r2, r5
 8007d66:	9905      	ldr	r1, [sp, #20]
 8007d68:	4648      	mov	r0, r9
 8007d6a:	f001 fe8f 	bl	8009a8c <__lshift>
 8007d6e:	9005      	str	r0, [sp, #20]
 8007d70:	2800      	cmp	r0, #0
 8007d72:	f43f ae73 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d76:	2f00      	cmp	r7, #0
 8007d78:	dd08      	ble.n	8007d8c <_strtod_l+0x76c>
 8007d7a:	4641      	mov	r1, r8
 8007d7c:	463a      	mov	r2, r7
 8007d7e:	4648      	mov	r0, r9
 8007d80:	f001 fe84 	bl	8009a8c <__lshift>
 8007d84:	4680      	mov	r8, r0
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f ae68 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d8c:	9a05      	ldr	r2, [sp, #20]
 8007d8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d90:	4648      	mov	r0, r9
 8007d92:	f001 fee9 	bl	8009b68 <__mdiff>
 8007d96:	4604      	mov	r4, r0
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f43f ae5f 	beq.w	8007a5c <_strtod_l+0x43c>
 8007d9e:	68c3      	ldr	r3, [r0, #12]
 8007da0:	930c      	str	r3, [sp, #48]	; 0x30
 8007da2:	2300      	movs	r3, #0
 8007da4:	60c3      	str	r3, [r0, #12]
 8007da6:	4641      	mov	r1, r8
 8007da8:	f001 fec4 	bl	8009b34 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	da55      	bge.n	8007e5c <_strtod_l+0x83c>
 8007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db2:	b9e3      	cbnz	r3, 8007dee <_strtod_l+0x7ce>
 8007db4:	f1ba 0f00 	cmp.w	sl, #0
 8007db8:	d119      	bne.n	8007dee <_strtod_l+0x7ce>
 8007dba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dbe:	b9b3      	cbnz	r3, 8007dee <_strtod_l+0x7ce>
 8007dc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dc4:	0d1b      	lsrs	r3, r3, #20
 8007dc6:	051b      	lsls	r3, r3, #20
 8007dc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dcc:	d90f      	bls.n	8007dee <_strtod_l+0x7ce>
 8007dce:	6963      	ldr	r3, [r4, #20]
 8007dd0:	b913      	cbnz	r3, 8007dd8 <_strtod_l+0x7b8>
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	dd0a      	ble.n	8007dee <_strtod_l+0x7ce>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f001 fe55 	bl	8009a8c <__lshift>
 8007de2:	4641      	mov	r1, r8
 8007de4:	4604      	mov	r4, r0
 8007de6:	f001 fea5 	bl	8009b34 <__mcmp>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	dc67      	bgt.n	8007ebe <_strtod_l+0x89e>
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d171      	bne.n	8007ed8 <_strtod_l+0x8b8>
 8007df4:	e63d      	b.n	8007a72 <_strtod_l+0x452>
 8007df6:	f018 0f01 	tst.w	r8, #1
 8007dfa:	d004      	beq.n	8007e06 <_strtod_l+0x7e6>
 8007dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e00:	f7f8 fc02 	bl	8000608 <__aeabi_dmul>
 8007e04:	2301      	movs	r3, #1
 8007e06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e0a:	3508      	adds	r5, #8
 8007e0c:	e6e5      	b.n	8007bda <_strtod_l+0x5ba>
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	ea03 0a0a 	and.w	sl, r3, sl
 8007e1a:	e6ff      	b.n	8007c1c <_strtod_l+0x5fc>
 8007e1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007e20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007e24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007e28:	36e2      	adds	r6, #226	; 0xe2
 8007e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8007e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e30:	910f      	str	r1, [sp, #60]	; 0x3c
 8007e32:	e75d      	b.n	8007cf0 <_strtod_l+0x6d0>
 8007e34:	2300      	movs	r3, #0
 8007e36:	930a      	str	r3, [sp, #40]	; 0x28
 8007e38:	2301      	movs	r3, #1
 8007e3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e3c:	e758      	b.n	8007cf0 <_strtod_l+0x6d0>
 8007e3e:	4632      	mov	r2, r6
 8007e40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e42:	4648      	mov	r0, r9
 8007e44:	f001 fe22 	bl	8009a8c <__lshift>
 8007e48:	901c      	str	r0, [sp, #112]	; 0x70
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f47f af7c 	bne.w	8007d48 <_strtod_l+0x728>
 8007e50:	e604      	b.n	8007a5c <_strtod_l+0x43c>
 8007e52:	bf00      	nop
 8007e54:	0800a488 	.word	0x0800a488
 8007e58:	fffffc02 	.word	0xfffffc02
 8007e5c:	465d      	mov	r5, fp
 8007e5e:	f040 8086 	bne.w	8007f6e <_strtod_l+0x94e>
 8007e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e68:	b32a      	cbz	r2, 8007eb6 <_strtod_l+0x896>
 8007e6a:	4aaf      	ldr	r2, [pc, #700]	; (8008128 <_strtod_l+0xb08>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d153      	bne.n	8007f18 <_strtod_l+0x8f8>
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	4650      	mov	r0, sl
 8007e74:	b1d3      	cbz	r3, 8007eac <_strtod_l+0x88c>
 8007e76:	4aad      	ldr	r2, [pc, #692]	; (800812c <_strtod_l+0xb0c>)
 8007e78:	402a      	ands	r2, r5
 8007e7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e82:	d816      	bhi.n	8007eb2 <_strtod_l+0x892>
 8007e84:	0d12      	lsrs	r2, r2, #20
 8007e86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8e:	4298      	cmp	r0, r3
 8007e90:	d142      	bne.n	8007f18 <_strtod_l+0x8f8>
 8007e92:	4ba7      	ldr	r3, [pc, #668]	; (8008130 <_strtod_l+0xb10>)
 8007e94:	429d      	cmp	r5, r3
 8007e96:	d102      	bne.n	8007e9e <_strtod_l+0x87e>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	f43f addf 	beq.w	8007a5c <_strtod_l+0x43c>
 8007e9e:	4ba3      	ldr	r3, [pc, #652]	; (800812c <_strtod_l+0xb0c>)
 8007ea0:	402b      	ands	r3, r5
 8007ea2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007ea6:	f04f 0a00 	mov.w	sl, #0
 8007eaa:	e7a0      	b.n	8007dee <_strtod_l+0x7ce>
 8007eac:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb0:	e7ed      	b.n	8007e8e <_strtod_l+0x86e>
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	e7eb      	b.n	8007e8e <_strtod_l+0x86e>
 8007eb6:	bb7b      	cbnz	r3, 8007f18 <_strtod_l+0x8f8>
 8007eb8:	f1ba 0f00 	cmp.w	sl, #0
 8007ebc:	d12c      	bne.n	8007f18 <_strtod_l+0x8f8>
 8007ebe:	9904      	ldr	r1, [sp, #16]
 8007ec0:	4a9a      	ldr	r2, [pc, #616]	; (800812c <_strtod_l+0xb0c>)
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	b1f1      	cbz	r1, 8007f04 <_strtod_l+0x8e4>
 8007ec6:	ea02 010b 	and.w	r1, r2, fp
 8007eca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ece:	dc19      	bgt.n	8007f04 <_strtod_l+0x8e4>
 8007ed0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ed4:	f77f ae5b 	ble.w	8007b8e <_strtod_l+0x56e>
 8007ed8:	4a96      	ldr	r2, [pc, #600]	; (8008134 <_strtod_l+0xb14>)
 8007eda:	2300      	movs	r3, #0
 8007edc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ee8:	f7f8 fb8e 	bl	8000608 <__aeabi_dmul>
 8007eec:	4682      	mov	sl, r0
 8007eee:	468b      	mov	fp, r1
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	f47f adbe 	bne.w	8007a72 <_strtod_l+0x452>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f47f adbb 	bne.w	8007a72 <_strtod_l+0x452>
 8007efc:	2322      	movs	r3, #34	; 0x22
 8007efe:	f8c9 3000 	str.w	r3, [r9]
 8007f02:	e5b6      	b.n	8007a72 <_strtod_l+0x452>
 8007f04:	4013      	ands	r3, r2
 8007f06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f12:	f04f 3aff 	mov.w	sl, #4294967295
 8007f16:	e76a      	b.n	8007dee <_strtod_l+0x7ce>
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	b193      	cbz	r3, 8007f42 <_strtod_l+0x922>
 8007f1c:	422b      	tst	r3, r5
 8007f1e:	f43f af66 	beq.w	8007dee <_strtod_l+0x7ce>
 8007f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f24:	9a04      	ldr	r2, [sp, #16]
 8007f26:	4650      	mov	r0, sl
 8007f28:	4659      	mov	r1, fp
 8007f2a:	b173      	cbz	r3, 8007f4a <_strtod_l+0x92a>
 8007f2c:	f7ff fb59 	bl	80075e2 <sulp>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f38:	f7f8 f9b0 	bl	800029c <__adddf3>
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	e755      	b.n	8007dee <_strtod_l+0x7ce>
 8007f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f44:	ea13 0f0a 	tst.w	r3, sl
 8007f48:	e7e9      	b.n	8007f1e <_strtod_l+0x8fe>
 8007f4a:	f7ff fb4a 	bl	80075e2 <sulp>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f56:	f7f8 f99f 	bl	8000298 <__aeabi_dsub>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4682      	mov	sl, r0
 8007f60:	468b      	mov	fp, r1
 8007f62:	f7f8 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f47f ae11 	bne.w	8007b8e <_strtod_l+0x56e>
 8007f6c:	e73f      	b.n	8007dee <_strtod_l+0x7ce>
 8007f6e:	4641      	mov	r1, r8
 8007f70:	4620      	mov	r0, r4
 8007f72:	f001 ff1c 	bl	8009dae <__ratio>
 8007f76:	ec57 6b10 	vmov	r6, r7, d0
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f80:	ee10 0a10 	vmov	r0, s0
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fdbb 	bl	8000b00 <__aeabi_dcmple>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d077      	beq.n	800807e <_strtod_l+0xa5e>
 8007f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d04a      	beq.n	800802a <_strtod_l+0xa0a>
 8007f94:	4b68      	ldr	r3, [pc, #416]	; (8008138 <_strtod_l+0xb18>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f9c:	4f66      	ldr	r7, [pc, #408]	; (8008138 <_strtod_l+0xb18>)
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	4b62      	ldr	r3, [pc, #392]	; (800812c <_strtod_l+0xb0c>)
 8007fa2:	402b      	ands	r3, r5
 8007fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fa8:	4b64      	ldr	r3, [pc, #400]	; (800813c <_strtod_l+0xb1c>)
 8007faa:	429a      	cmp	r2, r3
 8007fac:	f040 80ce 	bne.w	800814c <_strtod_l+0xb2c>
 8007fb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007fbc:	ec4b ab10 	vmov	d0, sl, fp
 8007fc0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fc8:	f001 fe2c 	bl	8009c24 <__ulp>
 8007fcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fd0:	ec53 2b10 	vmov	r2, r3, d0
 8007fd4:	f7f8 fb18 	bl	8000608 <__aeabi_dmul>
 8007fd8:	4652      	mov	r2, sl
 8007fda:	465b      	mov	r3, fp
 8007fdc:	f7f8 f95e 	bl	800029c <__adddf3>
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4952      	ldr	r1, [pc, #328]	; (800812c <_strtod_l+0xb0c>)
 8007fe4:	4a56      	ldr	r2, [pc, #344]	; (8008140 <_strtod_l+0xb20>)
 8007fe6:	4019      	ands	r1, r3
 8007fe8:	4291      	cmp	r1, r2
 8007fea:	4682      	mov	sl, r0
 8007fec:	d95b      	bls.n	80080a6 <_strtod_l+0xa86>
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <_strtod_l+0x9e0>
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f43f ad2e 	beq.w	8007a5c <_strtod_l+0x43c>
 8008000:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008130 <_strtod_l+0xb10>
 8008004:	f04f 3aff 	mov.w	sl, #4294967295
 8008008:	991c      	ldr	r1, [sp, #112]	; 0x70
 800800a:	4648      	mov	r0, r9
 800800c:	f001 fb73 	bl	80096f6 <_Bfree>
 8008010:	9905      	ldr	r1, [sp, #20]
 8008012:	4648      	mov	r0, r9
 8008014:	f001 fb6f 	bl	80096f6 <_Bfree>
 8008018:	4641      	mov	r1, r8
 800801a:	4648      	mov	r0, r9
 800801c:	f001 fb6b 	bl	80096f6 <_Bfree>
 8008020:	4621      	mov	r1, r4
 8008022:	4648      	mov	r0, r9
 8008024:	f001 fb67 	bl	80096f6 <_Bfree>
 8008028:	e619      	b.n	8007c5e <_strtod_l+0x63e>
 800802a:	f1ba 0f00 	cmp.w	sl, #0
 800802e:	d11a      	bne.n	8008066 <_strtod_l+0xa46>
 8008030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008034:	b9eb      	cbnz	r3, 8008072 <_strtod_l+0xa52>
 8008036:	2200      	movs	r2, #0
 8008038:	4b3f      	ldr	r3, [pc, #252]	; (8008138 <_strtod_l+0xb18>)
 800803a:	4630      	mov	r0, r6
 800803c:	4639      	mov	r1, r7
 800803e:	f7f8 fd55 	bl	8000aec <__aeabi_dcmplt>
 8008042:	b9c8      	cbnz	r0, 8008078 <_strtod_l+0xa58>
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	2200      	movs	r2, #0
 800804a:	4b3e      	ldr	r3, [pc, #248]	; (8008144 <_strtod_l+0xb24>)
 800804c:	f7f8 fadc 	bl	8000608 <__aeabi_dmul>
 8008050:	4606      	mov	r6, r0
 8008052:	460f      	mov	r7, r1
 8008054:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008058:	9618      	str	r6, [sp, #96]	; 0x60
 800805a:	9319      	str	r3, [sp, #100]	; 0x64
 800805c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008060:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008064:	e79c      	b.n	8007fa0 <_strtod_l+0x980>
 8008066:	f1ba 0f01 	cmp.w	sl, #1
 800806a:	d102      	bne.n	8008072 <_strtod_l+0xa52>
 800806c:	2d00      	cmp	r5, #0
 800806e:	f43f ad8e 	beq.w	8007b8e <_strtod_l+0x56e>
 8008072:	2200      	movs	r2, #0
 8008074:	4b34      	ldr	r3, [pc, #208]	; (8008148 <_strtod_l+0xb28>)
 8008076:	e78f      	b.n	8007f98 <_strtod_l+0x978>
 8008078:	2600      	movs	r6, #0
 800807a:	4f32      	ldr	r7, [pc, #200]	; (8008144 <_strtod_l+0xb24>)
 800807c:	e7ea      	b.n	8008054 <_strtod_l+0xa34>
 800807e:	4b31      	ldr	r3, [pc, #196]	; (8008144 <_strtod_l+0xb24>)
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	2200      	movs	r2, #0
 8008086:	f7f8 fabf 	bl	8000608 <__aeabi_dmul>
 800808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	b933      	cbnz	r3, 80080a0 <_strtod_l+0xa80>
 8008092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008096:	9010      	str	r0, [sp, #64]	; 0x40
 8008098:	9311      	str	r3, [sp, #68]	; 0x44
 800809a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800809e:	e7df      	b.n	8008060 <_strtod_l+0xa40>
 80080a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80080a4:	e7f9      	b.n	800809a <_strtod_l+0xa7a>
 80080a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ab      	bne.n	8008008 <_strtod_l+0x9e8>
 80080b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080b4:	0d1b      	lsrs	r3, r3, #20
 80080b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080b8:	051b      	lsls	r3, r3, #20
 80080ba:	429a      	cmp	r2, r3
 80080bc:	465d      	mov	r5, fp
 80080be:	d1a3      	bne.n	8008008 <_strtod_l+0x9e8>
 80080c0:	4639      	mov	r1, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7f8 fd50 	bl	8000b68 <__aeabi_d2iz>
 80080c8:	f7f8 fa34 	bl	8000534 <__aeabi_i2d>
 80080cc:	460b      	mov	r3, r1
 80080ce:	4602      	mov	r2, r0
 80080d0:	4639      	mov	r1, r7
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7f8 f8e0 	bl	8000298 <__aeabi_dsub>
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	b933      	cbnz	r3, 80080ee <_strtod_l+0xace>
 80080e0:	f1ba 0f00 	cmp.w	sl, #0
 80080e4:	d103      	bne.n	80080ee <_strtod_l+0xace>
 80080e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	d06d      	beq.n	80081ca <_strtod_l+0xbaa>
 80080ee:	a30a      	add	r3, pc, #40	; (adr r3, 8008118 <_strtod_l+0xaf8>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 fcf8 	bl	8000aec <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f47f acb8 	bne.w	8007a72 <_strtod_l+0x452>
 8008102:	a307      	add	r3, pc, #28	; (adr r3, 8008120 <_strtod_l+0xb00>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f af79 	beq.w	8008008 <_strtod_l+0x9e8>
 8008116:	e4ac      	b.n	8007a72 <_strtod_l+0x452>
 8008118:	94a03595 	.word	0x94a03595
 800811c:	3fdfffff 	.word	0x3fdfffff
 8008120:	35afe535 	.word	0x35afe535
 8008124:	3fe00000 	.word	0x3fe00000
 8008128:	000fffff 	.word	0x000fffff
 800812c:	7ff00000 	.word	0x7ff00000
 8008130:	7fefffff 	.word	0x7fefffff
 8008134:	39500000 	.word	0x39500000
 8008138:	3ff00000 	.word	0x3ff00000
 800813c:	7fe00000 	.word	0x7fe00000
 8008140:	7c9fffff 	.word	0x7c9fffff
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	bff00000 	.word	0xbff00000
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	b333      	cbz	r3, 800819e <_strtod_l+0xb7e>
 8008150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008152:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008156:	d822      	bhi.n	800819e <_strtod_l+0xb7e>
 8008158:	a327      	add	r3, pc, #156	; (adr r3, 80081f8 <_strtod_l+0xbd8>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fccd 	bl	8000b00 <__aeabi_dcmple>
 8008166:	b1a0      	cbz	r0, 8008192 <_strtod_l+0xb72>
 8008168:	4639      	mov	r1, r7
 800816a:	4630      	mov	r0, r6
 800816c:	f7f8 fd24 	bl	8000bb8 <__aeabi_d2uiz>
 8008170:	2800      	cmp	r0, #0
 8008172:	bf08      	it	eq
 8008174:	2001      	moveq	r0, #1
 8008176:	f7f8 f9cd 	bl	8000514 <__aeabi_ui2d>
 800817a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	bb03      	cbnz	r3, 80081c4 <_strtod_l+0xba4>
 8008182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008186:	9012      	str	r0, [sp, #72]	; 0x48
 8008188:	9313      	str	r3, [sp, #76]	; 0x4c
 800818a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800818e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008196:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	930b      	str	r3, [sp, #44]	; 0x2c
 800819e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80081a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80081a6:	f001 fd3d 	bl	8009c24 <__ulp>
 80081aa:	4650      	mov	r0, sl
 80081ac:	ec53 2b10 	vmov	r2, r3, d0
 80081b0:	4659      	mov	r1, fp
 80081b2:	f7f8 fa29 	bl	8000608 <__aeabi_dmul>
 80081b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081ba:	f7f8 f86f 	bl	800029c <__adddf3>
 80081be:	4682      	mov	sl, r0
 80081c0:	468b      	mov	fp, r1
 80081c2:	e772      	b.n	80080aa <_strtod_l+0xa8a>
 80081c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80081c8:	e7df      	b.n	800818a <_strtod_l+0xb6a>
 80081ca:	a30d      	add	r3, pc, #52	; (adr r3, 8008200 <_strtod_l+0xbe0>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80081d4:	e79c      	b.n	8008110 <_strtod_l+0xaf0>
 80081d6:	2300      	movs	r3, #0
 80081d8:	930d      	str	r3, [sp, #52]	; 0x34
 80081da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	f7ff ba61 	b.w	80076a6 <_strtod_l+0x86>
 80081e4:	2b65      	cmp	r3, #101	; 0x65
 80081e6:	f04f 0200 	mov.w	r2, #0
 80081ea:	f43f ab4e 	beq.w	800788a <_strtod_l+0x26a>
 80081ee:	2101      	movs	r1, #1
 80081f0:	4614      	mov	r4, r2
 80081f2:	9104      	str	r1, [sp, #16]
 80081f4:	f7ff bacb 	b.w	800778e <_strtod_l+0x16e>
 80081f8:	ffc00000 	.word	0xffc00000
 80081fc:	41dfffff 	.word	0x41dfffff
 8008200:	94a03595 	.word	0x94a03595
 8008204:	3fcfffff 	.word	0x3fcfffff

08008208 <_strtod_r>:
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <_strtod_r+0x18>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	b410      	push	{r4}
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	4c04      	ldr	r4, [pc, #16]	; (8008224 <_strtod_r+0x1c>)
 8008212:	2b00      	cmp	r3, #0
 8008214:	bf08      	it	eq
 8008216:	4623      	moveq	r3, r4
 8008218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800821c:	f7ff ba00 	b.w	8007620 <_strtod_l>
 8008220:	20000038 	.word	0x20000038
 8008224:	2000009c 	.word	0x2000009c

08008228 <_strtol_l.isra.0>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	4692      	mov	sl, r2
 8008232:	461e      	mov	r6, r3
 8008234:	460f      	mov	r7, r1
 8008236:	463d      	mov	r5, r7
 8008238:	9808      	ldr	r0, [sp, #32]
 800823a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800823e:	f001 f9ed 	bl	800961c <__locale_ctype_ptr_l>
 8008242:	4420      	add	r0, r4
 8008244:	7843      	ldrb	r3, [r0, #1]
 8008246:	f013 0308 	ands.w	r3, r3, #8
 800824a:	d132      	bne.n	80082b2 <_strtol_l.isra.0+0x8a>
 800824c:	2c2d      	cmp	r4, #45	; 0x2d
 800824e:	d132      	bne.n	80082b6 <_strtol_l.isra.0+0x8e>
 8008250:	787c      	ldrb	r4, [r7, #1]
 8008252:	1cbd      	adds	r5, r7, #2
 8008254:	2201      	movs	r2, #1
 8008256:	2e00      	cmp	r6, #0
 8008258:	d05d      	beq.n	8008316 <_strtol_l.isra.0+0xee>
 800825a:	2e10      	cmp	r6, #16
 800825c:	d109      	bne.n	8008272 <_strtol_l.isra.0+0x4a>
 800825e:	2c30      	cmp	r4, #48	; 0x30
 8008260:	d107      	bne.n	8008272 <_strtol_l.isra.0+0x4a>
 8008262:	782b      	ldrb	r3, [r5, #0]
 8008264:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008268:	2b58      	cmp	r3, #88	; 0x58
 800826a:	d14f      	bne.n	800830c <_strtol_l.isra.0+0xe4>
 800826c:	786c      	ldrb	r4, [r5, #1]
 800826e:	2610      	movs	r6, #16
 8008270:	3502      	adds	r5, #2
 8008272:	2a00      	cmp	r2, #0
 8008274:	bf14      	ite	ne
 8008276:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800827a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800827e:	2700      	movs	r7, #0
 8008280:	fbb1 fcf6 	udiv	ip, r1, r6
 8008284:	4638      	mov	r0, r7
 8008286:	fb06 1e1c 	mls	lr, r6, ip, r1
 800828a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800828e:	2b09      	cmp	r3, #9
 8008290:	d817      	bhi.n	80082c2 <_strtol_l.isra.0+0x9a>
 8008292:	461c      	mov	r4, r3
 8008294:	42a6      	cmp	r6, r4
 8008296:	dd23      	ble.n	80082e0 <_strtol_l.isra.0+0xb8>
 8008298:	1c7b      	adds	r3, r7, #1
 800829a:	d007      	beq.n	80082ac <_strtol_l.isra.0+0x84>
 800829c:	4584      	cmp	ip, r0
 800829e:	d31c      	bcc.n	80082da <_strtol_l.isra.0+0xb2>
 80082a0:	d101      	bne.n	80082a6 <_strtol_l.isra.0+0x7e>
 80082a2:	45a6      	cmp	lr, r4
 80082a4:	db19      	blt.n	80082da <_strtol_l.isra.0+0xb2>
 80082a6:	fb00 4006 	mla	r0, r0, r6, r4
 80082aa:	2701      	movs	r7, #1
 80082ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082b0:	e7eb      	b.n	800828a <_strtol_l.isra.0+0x62>
 80082b2:	462f      	mov	r7, r5
 80082b4:	e7bf      	b.n	8008236 <_strtol_l.isra.0+0xe>
 80082b6:	2c2b      	cmp	r4, #43	; 0x2b
 80082b8:	bf04      	itt	eq
 80082ba:	1cbd      	addeq	r5, r7, #2
 80082bc:	787c      	ldrbeq	r4, [r7, #1]
 80082be:	461a      	mov	r2, r3
 80082c0:	e7c9      	b.n	8008256 <_strtol_l.isra.0+0x2e>
 80082c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80082c6:	2b19      	cmp	r3, #25
 80082c8:	d801      	bhi.n	80082ce <_strtol_l.isra.0+0xa6>
 80082ca:	3c37      	subs	r4, #55	; 0x37
 80082cc:	e7e2      	b.n	8008294 <_strtol_l.isra.0+0x6c>
 80082ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80082d2:	2b19      	cmp	r3, #25
 80082d4:	d804      	bhi.n	80082e0 <_strtol_l.isra.0+0xb8>
 80082d6:	3c57      	subs	r4, #87	; 0x57
 80082d8:	e7dc      	b.n	8008294 <_strtol_l.isra.0+0x6c>
 80082da:	f04f 37ff 	mov.w	r7, #4294967295
 80082de:	e7e5      	b.n	80082ac <_strtol_l.isra.0+0x84>
 80082e0:	1c7b      	adds	r3, r7, #1
 80082e2:	d108      	bne.n	80082f6 <_strtol_l.isra.0+0xce>
 80082e4:	2322      	movs	r3, #34	; 0x22
 80082e6:	f8c8 3000 	str.w	r3, [r8]
 80082ea:	4608      	mov	r0, r1
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	d107      	bne.n	8008302 <_strtol_l.isra.0+0xda>
 80082f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f6:	b102      	cbz	r2, 80082fa <_strtol_l.isra.0+0xd2>
 80082f8:	4240      	negs	r0, r0
 80082fa:	f1ba 0f00 	cmp.w	sl, #0
 80082fe:	d0f8      	beq.n	80082f2 <_strtol_l.isra.0+0xca>
 8008300:	b10f      	cbz	r7, 8008306 <_strtol_l.isra.0+0xde>
 8008302:	f105 39ff 	add.w	r9, r5, #4294967295
 8008306:	f8ca 9000 	str.w	r9, [sl]
 800830a:	e7f2      	b.n	80082f2 <_strtol_l.isra.0+0xca>
 800830c:	2430      	movs	r4, #48	; 0x30
 800830e:	2e00      	cmp	r6, #0
 8008310:	d1af      	bne.n	8008272 <_strtol_l.isra.0+0x4a>
 8008312:	2608      	movs	r6, #8
 8008314:	e7ad      	b.n	8008272 <_strtol_l.isra.0+0x4a>
 8008316:	2c30      	cmp	r4, #48	; 0x30
 8008318:	d0a3      	beq.n	8008262 <_strtol_l.isra.0+0x3a>
 800831a:	260a      	movs	r6, #10
 800831c:	e7a9      	b.n	8008272 <_strtol_l.isra.0+0x4a>
	...

08008320 <_strtol_r>:
 8008320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008322:	4c06      	ldr	r4, [pc, #24]	; (800833c <_strtol_r+0x1c>)
 8008324:	4d06      	ldr	r5, [pc, #24]	; (8008340 <_strtol_r+0x20>)
 8008326:	6824      	ldr	r4, [r4, #0]
 8008328:	6a24      	ldr	r4, [r4, #32]
 800832a:	2c00      	cmp	r4, #0
 800832c:	bf08      	it	eq
 800832e:	462c      	moveq	r4, r5
 8008330:	9400      	str	r4, [sp, #0]
 8008332:	f7ff ff79 	bl	8008228 <_strtol_l.isra.0>
 8008336:	b003      	add	sp, #12
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	20000038 	.word	0x20000038
 8008340:	2000009c 	.word	0x2000009c

08008344 <quorem>:
 8008344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	6903      	ldr	r3, [r0, #16]
 800834a:	690c      	ldr	r4, [r1, #16]
 800834c:	42a3      	cmp	r3, r4
 800834e:	4680      	mov	r8, r0
 8008350:	f2c0 8082 	blt.w	8008458 <quorem+0x114>
 8008354:	3c01      	subs	r4, #1
 8008356:	f101 0714 	add.w	r7, r1, #20
 800835a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800835e:	f100 0614 	add.w	r6, r0, #20
 8008362:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008366:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800836a:	eb06 030c 	add.w	r3, r6, ip
 800836e:	3501      	adds	r5, #1
 8008370:	eb07 090c 	add.w	r9, r7, ip
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	fbb0 f5f5 	udiv	r5, r0, r5
 800837a:	b395      	cbz	r5, 80083e2 <quorem+0x9e>
 800837c:	f04f 0a00 	mov.w	sl, #0
 8008380:	4638      	mov	r0, r7
 8008382:	46b6      	mov	lr, r6
 8008384:	46d3      	mov	fp, sl
 8008386:	f850 2b04 	ldr.w	r2, [r0], #4
 800838a:	b293      	uxth	r3, r2
 800838c:	fb05 a303 	mla	r3, r5, r3, sl
 8008390:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008394:	b29b      	uxth	r3, r3
 8008396:	ebab 0303 	sub.w	r3, fp, r3
 800839a:	0c12      	lsrs	r2, r2, #16
 800839c:	f8de b000 	ldr.w	fp, [lr]
 80083a0:	fb05 a202 	mla	r2, r5, r2, sl
 80083a4:	fa13 f38b 	uxtah	r3, r3, fp
 80083a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80083ac:	fa1f fb82 	uxth.w	fp, r2
 80083b0:	f8de 2000 	ldr.w	r2, [lr]
 80083b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80083b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083bc:	b29b      	uxth	r3, r3
 80083be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083c2:	4581      	cmp	r9, r0
 80083c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80083c8:	f84e 3b04 	str.w	r3, [lr], #4
 80083cc:	d2db      	bcs.n	8008386 <quorem+0x42>
 80083ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80083d2:	b933      	cbnz	r3, 80083e2 <quorem+0x9e>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	3b04      	subs	r3, #4
 80083d8:	429e      	cmp	r6, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	d330      	bcc.n	8008440 <quorem+0xfc>
 80083de:	f8c8 4010 	str.w	r4, [r8, #16]
 80083e2:	4640      	mov	r0, r8
 80083e4:	f001 fba6 	bl	8009b34 <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	db25      	blt.n	8008438 <quorem+0xf4>
 80083ec:	3501      	adds	r5, #1
 80083ee:	4630      	mov	r0, r6
 80083f0:	f04f 0c00 	mov.w	ip, #0
 80083f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80083f8:	f8d0 e000 	ldr.w	lr, [r0]
 80083fc:	b293      	uxth	r3, r2
 80083fe:	ebac 0303 	sub.w	r3, ip, r3
 8008402:	0c12      	lsrs	r2, r2, #16
 8008404:	fa13 f38e 	uxtah	r3, r3, lr
 8008408:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800840c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008416:	45b9      	cmp	r9, r7
 8008418:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800841c:	f840 3b04 	str.w	r3, [r0], #4
 8008420:	d2e8      	bcs.n	80083f4 <quorem+0xb0>
 8008422:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008426:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800842a:	b92a      	cbnz	r2, 8008438 <quorem+0xf4>
 800842c:	3b04      	subs	r3, #4
 800842e:	429e      	cmp	r6, r3
 8008430:	461a      	mov	r2, r3
 8008432:	d30b      	bcc.n	800844c <quorem+0x108>
 8008434:	f8c8 4010 	str.w	r4, [r8, #16]
 8008438:	4628      	mov	r0, r5
 800843a:	b003      	add	sp, #12
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	3b04      	subs	r3, #4
 8008444:	2a00      	cmp	r2, #0
 8008446:	d1ca      	bne.n	80083de <quorem+0x9a>
 8008448:	3c01      	subs	r4, #1
 800844a:	e7c5      	b.n	80083d8 <quorem+0x94>
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	3b04      	subs	r3, #4
 8008450:	2a00      	cmp	r2, #0
 8008452:	d1ef      	bne.n	8008434 <quorem+0xf0>
 8008454:	3c01      	subs	r4, #1
 8008456:	e7ea      	b.n	800842e <quorem+0xea>
 8008458:	2000      	movs	r0, #0
 800845a:	e7ee      	b.n	800843a <quorem+0xf6>
 800845c:	0000      	movs	r0, r0
	...

08008460 <_dtoa_r>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	ec57 6b10 	vmov	r6, r7, d0
 8008468:	b097      	sub	sp, #92	; 0x5c
 800846a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800846c:	9106      	str	r1, [sp, #24]
 800846e:	4604      	mov	r4, r0
 8008470:	920b      	str	r2, [sp, #44]	; 0x2c
 8008472:	9312      	str	r3, [sp, #72]	; 0x48
 8008474:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008478:	e9cd 6700 	strd	r6, r7, [sp]
 800847c:	b93d      	cbnz	r5, 800848e <_dtoa_r+0x2e>
 800847e:	2010      	movs	r0, #16
 8008480:	f001 f8e0 	bl	8009644 <malloc>
 8008484:	6260      	str	r0, [r4, #36]	; 0x24
 8008486:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800848a:	6005      	str	r5, [r0, #0]
 800848c:	60c5      	str	r5, [r0, #12]
 800848e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008490:	6819      	ldr	r1, [r3, #0]
 8008492:	b151      	cbz	r1, 80084aa <_dtoa_r+0x4a>
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	604a      	str	r2, [r1, #4]
 8008498:	2301      	movs	r3, #1
 800849a:	4093      	lsls	r3, r2
 800849c:	608b      	str	r3, [r1, #8]
 800849e:	4620      	mov	r0, r4
 80084a0:	f001 f929 	bl	80096f6 <_Bfree>
 80084a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	1e3b      	subs	r3, r7, #0
 80084ac:	bfbb      	ittet	lt
 80084ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084b2:	9301      	strlt	r3, [sp, #4]
 80084b4:	2300      	movge	r3, #0
 80084b6:	2201      	movlt	r2, #1
 80084b8:	bfac      	ite	ge
 80084ba:	f8c8 3000 	strge.w	r3, [r8]
 80084be:	f8c8 2000 	strlt.w	r2, [r8]
 80084c2:	4baf      	ldr	r3, [pc, #700]	; (8008780 <_dtoa_r+0x320>)
 80084c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084c8:	ea33 0308 	bics.w	r3, r3, r8
 80084cc:	d114      	bne.n	80084f8 <_dtoa_r+0x98>
 80084ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	b923      	cbnz	r3, 80084e4 <_dtoa_r+0x84>
 80084da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80084de:	2800      	cmp	r0, #0
 80084e0:	f000 8542 	beq.w	8008f68 <_dtoa_r+0xb08>
 80084e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008794 <_dtoa_r+0x334>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8544 	beq.w	8008f78 <_dtoa_r+0xb18>
 80084f0:	f10b 0303 	add.w	r3, fp, #3
 80084f4:	f000 bd3e 	b.w	8008f74 <_dtoa_r+0xb14>
 80084f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084fc:	2200      	movs	r2, #0
 80084fe:	2300      	movs	r3, #0
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008508:	4681      	mov	r9, r0
 800850a:	b168      	cbz	r0, 8008528 <_dtoa_r+0xc8>
 800850c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800850e:	2301      	movs	r3, #1
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8524 	beq.w	8008f62 <_dtoa_r+0xb02>
 800851a:	4b9a      	ldr	r3, [pc, #616]	; (8008784 <_dtoa_r+0x324>)
 800851c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800851e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	f000 bd28 	b.w	8008f78 <_dtoa_r+0xb18>
 8008528:	aa14      	add	r2, sp, #80	; 0x50
 800852a:	a915      	add	r1, sp, #84	; 0x54
 800852c:	ec47 6b10 	vmov	d0, r6, r7
 8008530:	4620      	mov	r0, r4
 8008532:	f001 fbed 	bl	8009d10 <__d2b>
 8008536:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800853a:	9004      	str	r0, [sp, #16]
 800853c:	2d00      	cmp	r5, #0
 800853e:	d07c      	beq.n	800863a <_dtoa_r+0x1da>
 8008540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008544:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008548:	46b2      	mov	sl, r6
 800854a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800854e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008552:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008556:	2200      	movs	r2, #0
 8008558:	4b8b      	ldr	r3, [pc, #556]	; (8008788 <_dtoa_r+0x328>)
 800855a:	4650      	mov	r0, sl
 800855c:	4659      	mov	r1, fp
 800855e:	f7f7 fe9b 	bl	8000298 <__aeabi_dsub>
 8008562:	a381      	add	r3, pc, #516	; (adr r3, 8008768 <_dtoa_r+0x308>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f8 f84e 	bl	8000608 <__aeabi_dmul>
 800856c:	a380      	add	r3, pc, #512	; (adr r3, 8008770 <_dtoa_r+0x310>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f7 fe93 	bl	800029c <__adddf3>
 8008576:	4606      	mov	r6, r0
 8008578:	4628      	mov	r0, r5
 800857a:	460f      	mov	r7, r1
 800857c:	f7f7 ffda 	bl	8000534 <__aeabi_i2d>
 8008580:	a37d      	add	r3, pc, #500	; (adr r3, 8008778 <_dtoa_r+0x318>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f7f8 f83f 	bl	8000608 <__aeabi_dmul>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f7 fe83 	bl	800029c <__adddf3>
 8008596:	4606      	mov	r6, r0
 8008598:	460f      	mov	r7, r1
 800859a:	f7f8 fae5 	bl	8000b68 <__aeabi_d2iz>
 800859e:	2200      	movs	r2, #0
 80085a0:	4682      	mov	sl, r0
 80085a2:	2300      	movs	r3, #0
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f7f8 faa0 	bl	8000aec <__aeabi_dcmplt>
 80085ac:	b148      	cbz	r0, 80085c2 <_dtoa_r+0x162>
 80085ae:	4650      	mov	r0, sl
 80085b0:	f7f7 ffc0 	bl	8000534 <__aeabi_i2d>
 80085b4:	4632      	mov	r2, r6
 80085b6:	463b      	mov	r3, r7
 80085b8:	f7f8 fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80085bc:	b908      	cbnz	r0, 80085c2 <_dtoa_r+0x162>
 80085be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c2:	f1ba 0f16 	cmp.w	sl, #22
 80085c6:	d859      	bhi.n	800867c <_dtoa_r+0x21c>
 80085c8:	4970      	ldr	r1, [pc, #448]	; (800878c <_dtoa_r+0x32c>)
 80085ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80085ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d6:	f7f8 faa7 	bl	8000b28 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d050      	beq.n	8008680 <_dtoa_r+0x220>
 80085de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085e2:	2300      	movs	r3, #0
 80085e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085e8:	1b5d      	subs	r5, r3, r5
 80085ea:	f1b5 0801 	subs.w	r8, r5, #1
 80085ee:	bf49      	itett	mi
 80085f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80085f4:	2300      	movpl	r3, #0
 80085f6:	9305      	strmi	r3, [sp, #20]
 80085f8:	f04f 0800 	movmi.w	r8, #0
 80085fc:	bf58      	it	pl
 80085fe:	9305      	strpl	r3, [sp, #20]
 8008600:	f1ba 0f00 	cmp.w	sl, #0
 8008604:	db3e      	blt.n	8008684 <_dtoa_r+0x224>
 8008606:	2300      	movs	r3, #0
 8008608:	44d0      	add	r8, sl
 800860a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800860e:	9307      	str	r3, [sp, #28]
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	2b09      	cmp	r3, #9
 8008614:	f200 8090 	bhi.w	8008738 <_dtoa_r+0x2d8>
 8008618:	2b05      	cmp	r3, #5
 800861a:	bfc4      	itt	gt
 800861c:	3b04      	subgt	r3, #4
 800861e:	9306      	strgt	r3, [sp, #24]
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	f1a3 0302 	sub.w	r3, r3, #2
 8008626:	bfcc      	ite	gt
 8008628:	2500      	movgt	r5, #0
 800862a:	2501      	movle	r5, #1
 800862c:	2b03      	cmp	r3, #3
 800862e:	f200 808f 	bhi.w	8008750 <_dtoa_r+0x2f0>
 8008632:	e8df f003 	tbb	[pc, r3]
 8008636:	7f7d      	.short	0x7f7d
 8008638:	7131      	.short	0x7131
 800863a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800863e:	441d      	add	r5, r3
 8008640:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008644:	2820      	cmp	r0, #32
 8008646:	dd13      	ble.n	8008670 <_dtoa_r+0x210>
 8008648:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	fa08 f800 	lsl.w	r8, r8, r0
 8008652:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008656:	fa23 f000 	lsr.w	r0, r3, r0
 800865a:	ea48 0000 	orr.w	r0, r8, r0
 800865e:	f7f7 ff59 	bl	8000514 <__aeabi_ui2d>
 8008662:	2301      	movs	r3, #1
 8008664:	4682      	mov	sl, r0
 8008666:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800866a:	3d01      	subs	r5, #1
 800866c:	9313      	str	r3, [sp, #76]	; 0x4c
 800866e:	e772      	b.n	8008556 <_dtoa_r+0xf6>
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	f1c0 0020 	rsb	r0, r0, #32
 8008676:	fa03 f000 	lsl.w	r0, r3, r0
 800867a:	e7f0      	b.n	800865e <_dtoa_r+0x1fe>
 800867c:	2301      	movs	r3, #1
 800867e:	e7b1      	b.n	80085e4 <_dtoa_r+0x184>
 8008680:	900f      	str	r0, [sp, #60]	; 0x3c
 8008682:	e7b0      	b.n	80085e6 <_dtoa_r+0x186>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	eba3 030a 	sub.w	r3, r3, sl
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	f1ca 0300 	rsb	r3, sl, #0
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	2300      	movs	r3, #0
 8008694:	930e      	str	r3, [sp, #56]	; 0x38
 8008696:	e7bb      	b.n	8008610 <_dtoa_r+0x1b0>
 8008698:	2301      	movs	r3, #1
 800869a:	930a      	str	r3, [sp, #40]	; 0x28
 800869c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dd59      	ble.n	8008756 <_dtoa_r+0x2f6>
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	4699      	mov	r9, r3
 80086a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086a8:	2200      	movs	r2, #0
 80086aa:	6072      	str	r2, [r6, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	f102 0014 	add.w	r0, r2, #20
 80086b2:	4298      	cmp	r0, r3
 80086b4:	6871      	ldr	r1, [r6, #4]
 80086b6:	d953      	bls.n	8008760 <_dtoa_r+0x300>
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 ffe8 	bl	800968e <_Balloc>
 80086be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	f1b9 0f0e 	cmp.w	r9, #14
 80086c6:	f8d3 b000 	ldr.w	fp, [r3]
 80086ca:	f200 80e6 	bhi.w	800889a <_dtoa_r+0x43a>
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	f000 80e3 	beq.w	800889a <_dtoa_r+0x43a>
 80086d4:	ed9d 7b00 	vldr	d7, [sp]
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80086e0:	dd74      	ble.n	80087cc <_dtoa_r+0x36c>
 80086e2:	4a2a      	ldr	r2, [pc, #168]	; (800878c <_dtoa_r+0x32c>)
 80086e4:	f00a 030f 	and.w	r3, sl, #15
 80086e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086ec:	ed93 7b00 	vldr	d7, [r3]
 80086f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80086f4:	06f0      	lsls	r0, r6, #27
 80086f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80086fa:	d565      	bpl.n	80087c8 <_dtoa_r+0x368>
 80086fc:	4b24      	ldr	r3, [pc, #144]	; (8008790 <_dtoa_r+0x330>)
 80086fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008702:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008706:	f7f8 f8a9 	bl	800085c <__aeabi_ddiv>
 800870a:	e9cd 0100 	strd	r0, r1, [sp]
 800870e:	f006 060f 	and.w	r6, r6, #15
 8008712:	2503      	movs	r5, #3
 8008714:	4f1e      	ldr	r7, [pc, #120]	; (8008790 <_dtoa_r+0x330>)
 8008716:	e04c      	b.n	80087b2 <_dtoa_r+0x352>
 8008718:	2301      	movs	r3, #1
 800871a:	930a      	str	r3, [sp, #40]	; 0x28
 800871c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871e:	4453      	add	r3, sl
 8008720:	f103 0901 	add.w	r9, r3, #1
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	464b      	mov	r3, r9
 8008728:	2b01      	cmp	r3, #1
 800872a:	bfb8      	it	lt
 800872c:	2301      	movlt	r3, #1
 800872e:	e7ba      	b.n	80086a6 <_dtoa_r+0x246>
 8008730:	2300      	movs	r3, #0
 8008732:	e7b2      	b.n	800869a <_dtoa_r+0x23a>
 8008734:	2300      	movs	r3, #0
 8008736:	e7f0      	b.n	800871a <_dtoa_r+0x2ba>
 8008738:	2501      	movs	r5, #1
 800873a:	2300      	movs	r3, #0
 800873c:	9306      	str	r3, [sp, #24]
 800873e:	950a      	str	r5, [sp, #40]	; 0x28
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	9302      	str	r3, [sp, #8]
 8008746:	4699      	mov	r9, r3
 8008748:	2200      	movs	r2, #0
 800874a:	2312      	movs	r3, #18
 800874c:	920b      	str	r2, [sp, #44]	; 0x2c
 800874e:	e7aa      	b.n	80086a6 <_dtoa_r+0x246>
 8008750:	2301      	movs	r3, #1
 8008752:	930a      	str	r3, [sp, #40]	; 0x28
 8008754:	e7f4      	b.n	8008740 <_dtoa_r+0x2e0>
 8008756:	2301      	movs	r3, #1
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	4699      	mov	r9, r3
 800875c:	461a      	mov	r2, r3
 800875e:	e7f5      	b.n	800874c <_dtoa_r+0x2ec>
 8008760:	3101      	adds	r1, #1
 8008762:	6071      	str	r1, [r6, #4]
 8008764:	0052      	lsls	r2, r2, #1
 8008766:	e7a2      	b.n	80086ae <_dtoa_r+0x24e>
 8008768:	636f4361 	.word	0x636f4361
 800876c:	3fd287a7 	.word	0x3fd287a7
 8008770:	8b60c8b3 	.word	0x8b60c8b3
 8008774:	3fc68a28 	.word	0x3fc68a28
 8008778:	509f79fb 	.word	0x509f79fb
 800877c:	3fd34413 	.word	0x3fd34413
 8008780:	7ff00000 	.word	0x7ff00000
 8008784:	0800a431 	.word	0x0800a431
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	0800a558 	.word	0x0800a558
 8008790:	0800a530 	.word	0x0800a530
 8008794:	0800a4b9 	.word	0x0800a4b9
 8008798:	07f1      	lsls	r1, r6, #31
 800879a:	d508      	bpl.n	80087ae <_dtoa_r+0x34e>
 800879c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f7f7 ff30 	bl	8000608 <__aeabi_dmul>
 80087a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087ac:	3501      	adds	r5, #1
 80087ae:	1076      	asrs	r6, r6, #1
 80087b0:	3708      	adds	r7, #8
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	d1f0      	bne.n	8008798 <_dtoa_r+0x338>
 80087b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087be:	f7f8 f84d 	bl	800085c <__aeabi_ddiv>
 80087c2:	e9cd 0100 	strd	r0, r1, [sp]
 80087c6:	e01a      	b.n	80087fe <_dtoa_r+0x39e>
 80087c8:	2502      	movs	r5, #2
 80087ca:	e7a3      	b.n	8008714 <_dtoa_r+0x2b4>
 80087cc:	f000 80a0 	beq.w	8008910 <_dtoa_r+0x4b0>
 80087d0:	f1ca 0600 	rsb	r6, sl, #0
 80087d4:	4b9f      	ldr	r3, [pc, #636]	; (8008a54 <_dtoa_r+0x5f4>)
 80087d6:	4fa0      	ldr	r7, [pc, #640]	; (8008a58 <_dtoa_r+0x5f8>)
 80087d8:	f006 020f 	and.w	r2, r6, #15
 80087dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087e8:	f7f7 ff0e 	bl	8000608 <__aeabi_dmul>
 80087ec:	e9cd 0100 	strd	r0, r1, [sp]
 80087f0:	1136      	asrs	r6, r6, #4
 80087f2:	2300      	movs	r3, #0
 80087f4:	2502      	movs	r5, #2
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d17f      	bne.n	80088fa <_dtoa_r+0x49a>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e1      	bne.n	80087c2 <_dtoa_r+0x362>
 80087fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8087 	beq.w	8008914 <_dtoa_r+0x4b4>
 8008806:	e9dd 6700 	ldrd	r6, r7, [sp]
 800880a:	2200      	movs	r2, #0
 800880c:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <_dtoa_r+0x5fc>)
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f8 f96b 	bl	8000aec <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	d07c      	beq.n	8008914 <_dtoa_r+0x4b4>
 800881a:	f1b9 0f00 	cmp.w	r9, #0
 800881e:	d079      	beq.n	8008914 <_dtoa_r+0x4b4>
 8008820:	9b02      	ldr	r3, [sp, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	dd35      	ble.n	8008892 <_dtoa_r+0x432>
 8008826:	f10a 33ff 	add.w	r3, sl, #4294967295
 800882a:	9308      	str	r3, [sp, #32]
 800882c:	4639      	mov	r1, r7
 800882e:	2200      	movs	r2, #0
 8008830:	4b8b      	ldr	r3, [pc, #556]	; (8008a60 <_dtoa_r+0x600>)
 8008832:	4630      	mov	r0, r6
 8008834:	f7f7 fee8 	bl	8000608 <__aeabi_dmul>
 8008838:	e9cd 0100 	strd	r0, r1, [sp]
 800883c:	9f02      	ldr	r7, [sp, #8]
 800883e:	3501      	adds	r5, #1
 8008840:	4628      	mov	r0, r5
 8008842:	f7f7 fe77 	bl	8000534 <__aeabi_i2d>
 8008846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800884a:	f7f7 fedd 	bl	8000608 <__aeabi_dmul>
 800884e:	2200      	movs	r2, #0
 8008850:	4b84      	ldr	r3, [pc, #528]	; (8008a64 <_dtoa_r+0x604>)
 8008852:	f7f7 fd23 	bl	800029c <__adddf3>
 8008856:	4605      	mov	r5, r0
 8008858:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800885c:	2f00      	cmp	r7, #0
 800885e:	d15d      	bne.n	800891c <_dtoa_r+0x4bc>
 8008860:	2200      	movs	r2, #0
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <_dtoa_r+0x608>)
 8008864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008868:	f7f7 fd16 	bl	8000298 <__aeabi_dsub>
 800886c:	462a      	mov	r2, r5
 800886e:	4633      	mov	r3, r6
 8008870:	e9cd 0100 	strd	r0, r1, [sp]
 8008874:	f7f8 f958 	bl	8000b28 <__aeabi_dcmpgt>
 8008878:	2800      	cmp	r0, #0
 800887a:	f040 8288 	bne.w	8008d8e <_dtoa_r+0x92e>
 800887e:	462a      	mov	r2, r5
 8008880:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008888:	f7f8 f930 	bl	8000aec <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	f040 827c 	bne.w	8008d8a <_dtoa_r+0x92a>
 8008892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008896:	e9cd 2300 	strd	r2, r3, [sp]
 800889a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800889c:	2b00      	cmp	r3, #0
 800889e:	f2c0 8150 	blt.w	8008b42 <_dtoa_r+0x6e2>
 80088a2:	f1ba 0f0e 	cmp.w	sl, #14
 80088a6:	f300 814c 	bgt.w	8008b42 <_dtoa_r+0x6e2>
 80088aa:	4b6a      	ldr	r3, [pc, #424]	; (8008a54 <_dtoa_r+0x5f4>)
 80088ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088b0:	ed93 7b00 	vldr	d7, [r3]
 80088b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088bc:	f280 80d8 	bge.w	8008a70 <_dtoa_r+0x610>
 80088c0:	f1b9 0f00 	cmp.w	r9, #0
 80088c4:	f300 80d4 	bgt.w	8008a70 <_dtoa_r+0x610>
 80088c8:	f040 825e 	bne.w	8008d88 <_dtoa_r+0x928>
 80088cc:	2200      	movs	r2, #0
 80088ce:	4b66      	ldr	r3, [pc, #408]	; (8008a68 <_dtoa_r+0x608>)
 80088d0:	ec51 0b17 	vmov	r0, r1, d7
 80088d4:	f7f7 fe98 	bl	8000608 <__aeabi_dmul>
 80088d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088dc:	f7f8 f91a 	bl	8000b14 <__aeabi_dcmpge>
 80088e0:	464f      	mov	r7, r9
 80088e2:	464e      	mov	r6, r9
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f040 8234 	bne.w	8008d52 <_dtoa_r+0x8f2>
 80088ea:	2331      	movs	r3, #49	; 0x31
 80088ec:	f10b 0501 	add.w	r5, fp, #1
 80088f0:	f88b 3000 	strb.w	r3, [fp]
 80088f4:	f10a 0a01 	add.w	sl, sl, #1
 80088f8:	e22f      	b.n	8008d5a <_dtoa_r+0x8fa>
 80088fa:	07f2      	lsls	r2, r6, #31
 80088fc:	d505      	bpl.n	800890a <_dtoa_r+0x4aa>
 80088fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008902:	f7f7 fe81 	bl	8000608 <__aeabi_dmul>
 8008906:	3501      	adds	r5, #1
 8008908:	2301      	movs	r3, #1
 800890a:	1076      	asrs	r6, r6, #1
 800890c:	3708      	adds	r7, #8
 800890e:	e772      	b.n	80087f6 <_dtoa_r+0x396>
 8008910:	2502      	movs	r5, #2
 8008912:	e774      	b.n	80087fe <_dtoa_r+0x39e>
 8008914:	f8cd a020 	str.w	sl, [sp, #32]
 8008918:	464f      	mov	r7, r9
 800891a:	e791      	b.n	8008840 <_dtoa_r+0x3e0>
 800891c:	4b4d      	ldr	r3, [pc, #308]	; (8008a54 <_dtoa_r+0x5f4>)
 800891e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008922:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	2b00      	cmp	r3, #0
 800892a:	d047      	beq.n	80089bc <_dtoa_r+0x55c>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	2000      	movs	r0, #0
 8008932:	494e      	ldr	r1, [pc, #312]	; (8008a6c <_dtoa_r+0x60c>)
 8008934:	f7f7 ff92 	bl	800085c <__aeabi_ddiv>
 8008938:	462a      	mov	r2, r5
 800893a:	4633      	mov	r3, r6
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008944:	465d      	mov	r5, fp
 8008946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800894a:	f7f8 f90d 	bl	8000b68 <__aeabi_d2iz>
 800894e:	4606      	mov	r6, r0
 8008950:	f7f7 fdf0 	bl	8000534 <__aeabi_i2d>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800895c:	f7f7 fc9c 	bl	8000298 <__aeabi_dsub>
 8008960:	3630      	adds	r6, #48	; 0x30
 8008962:	f805 6b01 	strb.w	r6, [r5], #1
 8008966:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800896a:	e9cd 0100 	strd	r0, r1, [sp]
 800896e:	f7f8 f8bd 	bl	8000aec <__aeabi_dcmplt>
 8008972:	2800      	cmp	r0, #0
 8008974:	d163      	bne.n	8008a3e <_dtoa_r+0x5de>
 8008976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897a:	2000      	movs	r0, #0
 800897c:	4937      	ldr	r1, [pc, #220]	; (8008a5c <_dtoa_r+0x5fc>)
 800897e:	f7f7 fc8b 	bl	8000298 <__aeabi_dsub>
 8008982:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008986:	f7f8 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800898a:	2800      	cmp	r0, #0
 800898c:	f040 80b7 	bne.w	8008afe <_dtoa_r+0x69e>
 8008990:	eba5 030b 	sub.w	r3, r5, fp
 8008994:	429f      	cmp	r7, r3
 8008996:	f77f af7c 	ble.w	8008892 <_dtoa_r+0x432>
 800899a:	2200      	movs	r2, #0
 800899c:	4b30      	ldr	r3, [pc, #192]	; (8008a60 <_dtoa_r+0x600>)
 800899e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089a2:	f7f7 fe31 	bl	8000608 <__aeabi_dmul>
 80089a6:	2200      	movs	r2, #0
 80089a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089ac:	4b2c      	ldr	r3, [pc, #176]	; (8008a60 <_dtoa_r+0x600>)
 80089ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b2:	f7f7 fe29 	bl	8000608 <__aeabi_dmul>
 80089b6:	e9cd 0100 	strd	r0, r1, [sp]
 80089ba:	e7c4      	b.n	8008946 <_dtoa_r+0x4e6>
 80089bc:	462a      	mov	r2, r5
 80089be:	4633      	mov	r3, r6
 80089c0:	f7f7 fe22 	bl	8000608 <__aeabi_dmul>
 80089c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089c8:	eb0b 0507 	add.w	r5, fp, r7
 80089cc:	465e      	mov	r6, fp
 80089ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d2:	f7f8 f8c9 	bl	8000b68 <__aeabi_d2iz>
 80089d6:	4607      	mov	r7, r0
 80089d8:	f7f7 fdac 	bl	8000534 <__aeabi_i2d>
 80089dc:	3730      	adds	r7, #48	; 0x30
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e6:	f7f7 fc57 	bl	8000298 <__aeabi_dsub>
 80089ea:	f806 7b01 	strb.w	r7, [r6], #1
 80089ee:	42ae      	cmp	r6, r5
 80089f0:	e9cd 0100 	strd	r0, r1, [sp]
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	d126      	bne.n	8008a48 <_dtoa_r+0x5e8>
 80089fa:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <_dtoa_r+0x60c>)
 80089fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a00:	f7f7 fc4c 	bl	800029c <__adddf3>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a0c:	f7f8 f88c 	bl	8000b28 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d174      	bne.n	8008afe <_dtoa_r+0x69e>
 8008a14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a18:	2000      	movs	r0, #0
 8008a1a:	4914      	ldr	r1, [pc, #80]	; (8008a6c <_dtoa_r+0x60c>)
 8008a1c:	f7f7 fc3c 	bl	8000298 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a28:	f7f8 f860 	bl	8000aec <__aeabi_dcmplt>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f43f af30 	beq.w	8008892 <_dtoa_r+0x432>
 8008a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a36:	2b30      	cmp	r3, #48	; 0x30
 8008a38:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a3c:	d002      	beq.n	8008a44 <_dtoa_r+0x5e4>
 8008a3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a42:	e04a      	b.n	8008ada <_dtoa_r+0x67a>
 8008a44:	4615      	mov	r5, r2
 8008a46:	e7f4      	b.n	8008a32 <_dtoa_r+0x5d2>
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <_dtoa_r+0x600>)
 8008a4a:	f7f7 fddd 	bl	8000608 <__aeabi_dmul>
 8008a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a52:	e7bc      	b.n	80089ce <_dtoa_r+0x56e>
 8008a54:	0800a558 	.word	0x0800a558
 8008a58:	0800a530 	.word	0x0800a530
 8008a5c:	3ff00000 	.word	0x3ff00000
 8008a60:	40240000 	.word	0x40240000
 8008a64:	401c0000 	.word	0x401c0000
 8008a68:	40140000 	.word	0x40140000
 8008a6c:	3fe00000 	.word	0x3fe00000
 8008a70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a74:	465d      	mov	r5, fp
 8008a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f7 feed 	bl	800085c <__aeabi_ddiv>
 8008a82:	f7f8 f871 	bl	8000b68 <__aeabi_d2iz>
 8008a86:	4680      	mov	r8, r0
 8008a88:	f7f7 fd54 	bl	8000534 <__aeabi_i2d>
 8008a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a90:	f7f7 fdba 	bl	8000608 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008aa0:	f7f7 fbfa 	bl	8000298 <__aeabi_dsub>
 8008aa4:	f805 6b01 	strb.w	r6, [r5], #1
 8008aa8:	eba5 060b 	sub.w	r6, r5, fp
 8008aac:	45b1      	cmp	r9, r6
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	d139      	bne.n	8008b28 <_dtoa_r+0x6c8>
 8008ab4:	f7f7 fbf2 	bl	800029c <__adddf3>
 8008ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008abc:	4606      	mov	r6, r0
 8008abe:	460f      	mov	r7, r1
 8008ac0:	f7f8 f832 	bl	8000b28 <__aeabi_dcmpgt>
 8008ac4:	b9c8      	cbnz	r0, 8008afa <_dtoa_r+0x69a>
 8008ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f8 f803 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad2:	b110      	cbz	r0, 8008ada <_dtoa_r+0x67a>
 8008ad4:	f018 0f01 	tst.w	r8, #1
 8008ad8:	d10f      	bne.n	8008afa <_dtoa_r+0x69a>
 8008ada:	9904      	ldr	r1, [sp, #16]
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fe0a 	bl	80096f6 <_Bfree>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ae6:	702b      	strb	r3, [r5, #0]
 8008ae8:	f10a 0301 	add.w	r3, sl, #1
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8241 	beq.w	8008f78 <_dtoa_r+0xb18>
 8008af6:	601d      	str	r5, [r3, #0]
 8008af8:	e23e      	b.n	8008f78 <_dtoa_r+0xb18>
 8008afa:	f8cd a020 	str.w	sl, [sp, #32]
 8008afe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b02:	2a39      	cmp	r2, #57	; 0x39
 8008b04:	f105 33ff 	add.w	r3, r5, #4294967295
 8008b08:	d108      	bne.n	8008b1c <_dtoa_r+0x6bc>
 8008b0a:	459b      	cmp	fp, r3
 8008b0c:	d10a      	bne.n	8008b24 <_dtoa_r+0x6c4>
 8008b0e:	9b08      	ldr	r3, [sp, #32]
 8008b10:	3301      	adds	r3, #1
 8008b12:	9308      	str	r3, [sp, #32]
 8008b14:	2330      	movs	r3, #48	; 0x30
 8008b16:	f88b 3000 	strb.w	r3, [fp]
 8008b1a:	465b      	mov	r3, fp
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	3201      	adds	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	e78c      	b.n	8008a3e <_dtoa_r+0x5de>
 8008b24:	461d      	mov	r5, r3
 8008b26:	e7ea      	b.n	8008afe <_dtoa_r+0x69e>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b9b      	ldr	r3, [pc, #620]	; (8008d98 <_dtoa_r+0x938>)
 8008b2c:	f7f7 fd6c 	bl	8000608 <__aeabi_dmul>
 8008b30:	2200      	movs	r2, #0
 8008b32:	2300      	movs	r3, #0
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	f7f7 ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d09a      	beq.n	8008a76 <_dtoa_r+0x616>
 8008b40:	e7cb      	b.n	8008ada <_dtoa_r+0x67a>
 8008b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	f000 808b 	beq.w	8008c60 <_dtoa_r+0x800>
 8008b4a:	9a06      	ldr	r2, [sp, #24]
 8008b4c:	2a01      	cmp	r2, #1
 8008b4e:	dc6e      	bgt.n	8008c2e <_dtoa_r+0x7ce>
 8008b50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d067      	beq.n	8008c26 <_dtoa_r+0x7c6>
 8008b56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b5a:	9f07      	ldr	r7, [sp, #28]
 8008b5c:	9d05      	ldr	r5, [sp, #20]
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	2101      	movs	r1, #1
 8008b62:	441a      	add	r2, r3
 8008b64:	4620      	mov	r0, r4
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	4498      	add	r8, r3
 8008b6a:	f000 fea2 	bl	80098b2 <__i2b>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	dd0c      	ble.n	8008b8e <_dtoa_r+0x72e>
 8008b74:	f1b8 0f00 	cmp.w	r8, #0
 8008b78:	dd09      	ble.n	8008b8e <_dtoa_r+0x72e>
 8008b7a:	4545      	cmp	r5, r8
 8008b7c:	9a05      	ldr	r2, [sp, #20]
 8008b7e:	462b      	mov	r3, r5
 8008b80:	bfa8      	it	ge
 8008b82:	4643      	movge	r3, r8
 8008b84:	1ad2      	subs	r2, r2, r3
 8008b86:	9205      	str	r2, [sp, #20]
 8008b88:	1aed      	subs	r5, r5, r3
 8008b8a:	eba8 0803 	sub.w	r8, r8, r3
 8008b8e:	9b07      	ldr	r3, [sp, #28]
 8008b90:	b1eb      	cbz	r3, 8008bce <_dtoa_r+0x76e>
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d067      	beq.n	8008c68 <_dtoa_r+0x808>
 8008b98:	b18f      	cbz	r7, 8008bbe <_dtoa_r+0x75e>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	463a      	mov	r2, r7
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 ff26 	bl	80099f0 <__pow5mult>
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	4606      	mov	r6, r0
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fe8a 	bl	80098c4 <__multiply>
 8008bb0:	9904      	ldr	r1, [sp, #16]
 8008bb2:	9008      	str	r0, [sp, #32]
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fd9e 	bl	80096f6 <_Bfree>
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	9b07      	ldr	r3, [sp, #28]
 8008bc0:	1bda      	subs	r2, r3, r7
 8008bc2:	d004      	beq.n	8008bce <_dtoa_r+0x76e>
 8008bc4:	9904      	ldr	r1, [sp, #16]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 ff12 	bl	80099f0 <__pow5mult>
 8008bcc:	9004      	str	r0, [sp, #16]
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fe6e 	bl	80098b2 <__i2b>
 8008bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd8:	4607      	mov	r7, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 81d0 	beq.w	8008f80 <_dtoa_r+0xb20>
 8008be0:	461a      	mov	r2, r3
 8008be2:	4601      	mov	r1, r0
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 ff03 	bl	80099f0 <__pow5mult>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	4607      	mov	r7, r0
 8008bf0:	dc40      	bgt.n	8008c74 <_dtoa_r+0x814>
 8008bf2:	9b00      	ldr	r3, [sp, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d139      	bne.n	8008c6c <_dtoa_r+0x80c>
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d136      	bne.n	8008c70 <_dtoa_r+0x810>
 8008c02:	9b01      	ldr	r3, [sp, #4]
 8008c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c08:	0d1b      	lsrs	r3, r3, #20
 8008c0a:	051b      	lsls	r3, r3, #20
 8008c0c:	b12b      	cbz	r3, 8008c1a <_dtoa_r+0x7ba>
 8008c0e:	9b05      	ldr	r3, [sp, #20]
 8008c10:	3301      	adds	r3, #1
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	f108 0801 	add.w	r8, r8, #1
 8008c18:	2301      	movs	r3, #1
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d12a      	bne.n	8008c78 <_dtoa_r+0x818>
 8008c22:	2001      	movs	r0, #1
 8008c24:	e030      	b.n	8008c88 <_dtoa_r+0x828>
 8008c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c2c:	e795      	b.n	8008b5a <_dtoa_r+0x6fa>
 8008c2e:	9b07      	ldr	r3, [sp, #28]
 8008c30:	f109 37ff 	add.w	r7, r9, #4294967295
 8008c34:	42bb      	cmp	r3, r7
 8008c36:	bfbf      	itttt	lt
 8008c38:	9b07      	ldrlt	r3, [sp, #28]
 8008c3a:	9707      	strlt	r7, [sp, #28]
 8008c3c:	1afa      	sublt	r2, r7, r3
 8008c3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c40:	bfbb      	ittet	lt
 8008c42:	189b      	addlt	r3, r3, r2
 8008c44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c46:	1bdf      	subge	r7, r3, r7
 8008c48:	2700      	movlt	r7, #0
 8008c4a:	f1b9 0f00 	cmp.w	r9, #0
 8008c4e:	bfb5      	itete	lt
 8008c50:	9b05      	ldrlt	r3, [sp, #20]
 8008c52:	9d05      	ldrge	r5, [sp, #20]
 8008c54:	eba3 0509 	sublt.w	r5, r3, r9
 8008c58:	464b      	movge	r3, r9
 8008c5a:	bfb8      	it	lt
 8008c5c:	2300      	movlt	r3, #0
 8008c5e:	e77e      	b.n	8008b5e <_dtoa_r+0x6fe>
 8008c60:	9f07      	ldr	r7, [sp, #28]
 8008c62:	9d05      	ldr	r5, [sp, #20]
 8008c64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008c66:	e783      	b.n	8008b70 <_dtoa_r+0x710>
 8008c68:	9a07      	ldr	r2, [sp, #28]
 8008c6a:	e7ab      	b.n	8008bc4 <_dtoa_r+0x764>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e7d4      	b.n	8008c1a <_dtoa_r+0x7ba>
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	e7d2      	b.n	8008c1a <_dtoa_r+0x7ba>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9307      	str	r3, [sp, #28]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008c7e:	6918      	ldr	r0, [r3, #16]
 8008c80:	f000 fdc9 	bl	8009816 <__hi0bits>
 8008c84:	f1c0 0020 	rsb	r0, r0, #32
 8008c88:	4440      	add	r0, r8
 8008c8a:	f010 001f 	ands.w	r0, r0, #31
 8008c8e:	d047      	beq.n	8008d20 <_dtoa_r+0x8c0>
 8008c90:	f1c0 0320 	rsb	r3, r0, #32
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	dd3b      	ble.n	8008d10 <_dtoa_r+0x8b0>
 8008c98:	9b05      	ldr	r3, [sp, #20]
 8008c9a:	f1c0 001c 	rsb	r0, r0, #28
 8008c9e:	4403      	add	r3, r0
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	4405      	add	r5, r0
 8008ca4:	4480      	add	r8, r0
 8008ca6:	9b05      	ldr	r3, [sp, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dd05      	ble.n	8008cb8 <_dtoa_r+0x858>
 8008cac:	461a      	mov	r2, r3
 8008cae:	9904      	ldr	r1, [sp, #16]
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 feeb 	bl	8009a8c <__lshift>
 8008cb6:	9004      	str	r0, [sp, #16]
 8008cb8:	f1b8 0f00 	cmp.w	r8, #0
 8008cbc:	dd05      	ble.n	8008cca <_dtoa_r+0x86a>
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fee2 	bl	8009a8c <__lshift>
 8008cc8:	4607      	mov	r7, r0
 8008cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ccc:	b353      	cbz	r3, 8008d24 <_dtoa_r+0x8c4>
 8008cce:	4639      	mov	r1, r7
 8008cd0:	9804      	ldr	r0, [sp, #16]
 8008cd2:	f000 ff2f 	bl	8009b34 <__mcmp>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	da24      	bge.n	8008d24 <_dtoa_r+0x8c4>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	220a      	movs	r2, #10
 8008cde:	9904      	ldr	r1, [sp, #16]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fd1f 	bl	8009724 <__multadd>
 8008ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 814d 	beq.w	8008f8e <_dtoa_r+0xb2e>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fd12 	bl	8009724 <__multadd>
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	4606      	mov	r6, r0
 8008d06:	dc4f      	bgt.n	8008da8 <_dtoa_r+0x948>
 8008d08:	9b06      	ldr	r3, [sp, #24]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	dd4c      	ble.n	8008da8 <_dtoa_r+0x948>
 8008d0e:	e011      	b.n	8008d34 <_dtoa_r+0x8d4>
 8008d10:	d0c9      	beq.n	8008ca6 <_dtoa_r+0x846>
 8008d12:	9a05      	ldr	r2, [sp, #20]
 8008d14:	331c      	adds	r3, #28
 8008d16:	441a      	add	r2, r3
 8008d18:	9205      	str	r2, [sp, #20]
 8008d1a:	441d      	add	r5, r3
 8008d1c:	4498      	add	r8, r3
 8008d1e:	e7c2      	b.n	8008ca6 <_dtoa_r+0x846>
 8008d20:	4603      	mov	r3, r0
 8008d22:	e7f6      	b.n	8008d12 <_dtoa_r+0x8b2>
 8008d24:	f1b9 0f00 	cmp.w	r9, #0
 8008d28:	dc38      	bgt.n	8008d9c <_dtoa_r+0x93c>
 8008d2a:	9b06      	ldr	r3, [sp, #24]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	dd35      	ble.n	8008d9c <_dtoa_r+0x93c>
 8008d30:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	b963      	cbnz	r3, 8008d52 <_dtoa_r+0x8f2>
 8008d38:	4639      	mov	r1, r7
 8008d3a:	2205      	movs	r2, #5
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fcf1 	bl	8009724 <__multadd>
 8008d42:	4601      	mov	r1, r0
 8008d44:	4607      	mov	r7, r0
 8008d46:	9804      	ldr	r0, [sp, #16]
 8008d48:	f000 fef4 	bl	8009b34 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f73f adcc 	bgt.w	80088ea <_dtoa_r+0x48a>
 8008d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d54:	465d      	mov	r5, fp
 8008d56:	ea6f 0a03 	mvn.w	sl, r3
 8008d5a:	f04f 0900 	mov.w	r9, #0
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fcc8 	bl	80096f6 <_Bfree>
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	f43f aeb7 	beq.w	8008ada <_dtoa_r+0x67a>
 8008d6c:	f1b9 0f00 	cmp.w	r9, #0
 8008d70:	d005      	beq.n	8008d7e <_dtoa_r+0x91e>
 8008d72:	45b1      	cmp	r9, r6
 8008d74:	d003      	beq.n	8008d7e <_dtoa_r+0x91e>
 8008d76:	4649      	mov	r1, r9
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 fcbc 	bl	80096f6 <_Bfree>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fcb8 	bl	80096f6 <_Bfree>
 8008d86:	e6a8      	b.n	8008ada <_dtoa_r+0x67a>
 8008d88:	2700      	movs	r7, #0
 8008d8a:	463e      	mov	r6, r7
 8008d8c:	e7e1      	b.n	8008d52 <_dtoa_r+0x8f2>
 8008d8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d92:	463e      	mov	r6, r7
 8008d94:	e5a9      	b.n	80088ea <_dtoa_r+0x48a>
 8008d96:	bf00      	nop
 8008d98:	40240000 	.word	0x40240000
 8008d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 80fa 	beq.w	8008f9c <_dtoa_r+0xb3c>
 8008da8:	2d00      	cmp	r5, #0
 8008daa:	dd05      	ble.n	8008db8 <_dtoa_r+0x958>
 8008dac:	4631      	mov	r1, r6
 8008dae:	462a      	mov	r2, r5
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fe6b 	bl	8009a8c <__lshift>
 8008db6:	4606      	mov	r6, r0
 8008db8:	9b07      	ldr	r3, [sp, #28]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d04c      	beq.n	8008e58 <_dtoa_r+0x9f8>
 8008dbe:	6871      	ldr	r1, [r6, #4]
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 fc64 	bl	800968e <_Balloc>
 8008dc6:	6932      	ldr	r2, [r6, #16]
 8008dc8:	3202      	adds	r2, #2
 8008dca:	4605      	mov	r5, r0
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	f106 010c 	add.w	r1, r6, #12
 8008dd2:	300c      	adds	r0, #12
 8008dd4:	f000 fc50 	bl	8009678 <memcpy>
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 fe55 	bl	8009a8c <__lshift>
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	f8cd b014 	str.w	fp, [sp, #20]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	46b1      	mov	r9, r6
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	4606      	mov	r6, r0
 8008df2:	4639      	mov	r1, r7
 8008df4:	9804      	ldr	r0, [sp, #16]
 8008df6:	f7ff faa5 	bl	8008344 <quorem>
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e02:	9804      	ldr	r0, [sp, #16]
 8008e04:	f000 fe96 	bl	8009b34 <__mcmp>
 8008e08:	4632      	mov	r2, r6
 8008e0a:	9000      	str	r0, [sp, #0]
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 feaa 	bl	8009b68 <__mdiff>
 8008e14:	68c3      	ldr	r3, [r0, #12]
 8008e16:	4602      	mov	r2, r0
 8008e18:	bb03      	cbnz	r3, 8008e5c <_dtoa_r+0x9fc>
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	9008      	str	r0, [sp, #32]
 8008e1e:	9804      	ldr	r0, [sp, #16]
 8008e20:	f000 fe88 	bl	8009b34 <__mcmp>
 8008e24:	9a08      	ldr	r2, [sp, #32]
 8008e26:	4603      	mov	r3, r0
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	9308      	str	r3, [sp, #32]
 8008e2e:	f000 fc62 	bl	80096f6 <_Bfree>
 8008e32:	9b08      	ldr	r3, [sp, #32]
 8008e34:	b9a3      	cbnz	r3, 8008e60 <_dtoa_r+0xa00>
 8008e36:	9a06      	ldr	r2, [sp, #24]
 8008e38:	b992      	cbnz	r2, 8008e60 <_dtoa_r+0xa00>
 8008e3a:	9a07      	ldr	r2, [sp, #28]
 8008e3c:	b982      	cbnz	r2, 8008e60 <_dtoa_r+0xa00>
 8008e3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e42:	d029      	beq.n	8008e98 <_dtoa_r+0xa38>
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dd01      	ble.n	8008e4e <_dtoa_r+0x9ee>
 8008e4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008e4e:	9b05      	ldr	r3, [sp, #20]
 8008e50:	1c5d      	adds	r5, r3, #1
 8008e52:	f883 8000 	strb.w	r8, [r3]
 8008e56:	e782      	b.n	8008d5e <_dtoa_r+0x8fe>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	e7c2      	b.n	8008de2 <_dtoa_r+0x982>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e7e3      	b.n	8008e28 <_dtoa_r+0x9c8>
 8008e60:	9a00      	ldr	r2, [sp, #0]
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	db04      	blt.n	8008e70 <_dtoa_r+0xa10>
 8008e66:	d125      	bne.n	8008eb4 <_dtoa_r+0xa54>
 8008e68:	9a06      	ldr	r2, [sp, #24]
 8008e6a:	bb1a      	cbnz	r2, 8008eb4 <_dtoa_r+0xa54>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	bb0a      	cbnz	r2, 8008eb4 <_dtoa_r+0xa54>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	ddec      	ble.n	8008e4e <_dtoa_r+0x9ee>
 8008e74:	2201      	movs	r2, #1
 8008e76:	9904      	ldr	r1, [sp, #16]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fe07 	bl	8009a8c <__lshift>
 8008e7e:	4639      	mov	r1, r7
 8008e80:	9004      	str	r0, [sp, #16]
 8008e82:	f000 fe57 	bl	8009b34 <__mcmp>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	dc03      	bgt.n	8008e92 <_dtoa_r+0xa32>
 8008e8a:	d1e0      	bne.n	8008e4e <_dtoa_r+0x9ee>
 8008e8c:	f018 0f01 	tst.w	r8, #1
 8008e90:	d0dd      	beq.n	8008e4e <_dtoa_r+0x9ee>
 8008e92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e96:	d1d8      	bne.n	8008e4a <_dtoa_r+0x9ea>
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	1c5d      	adds	r5, r3, #1
 8008e9e:	2339      	movs	r3, #57	; 0x39
 8008ea0:	7013      	strb	r3, [r2, #0]
 8008ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ea6:	2b39      	cmp	r3, #57	; 0x39
 8008ea8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008eac:	d04f      	beq.n	8008f4e <_dtoa_r+0xaee>
 8008eae:	3301      	adds	r3, #1
 8008eb0:	7013      	strb	r3, [r2, #0]
 8008eb2:	e754      	b.n	8008d5e <_dtoa_r+0x8fe>
 8008eb4:	9a05      	ldr	r2, [sp, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f102 0501 	add.w	r5, r2, #1
 8008ebc:	dd06      	ble.n	8008ecc <_dtoa_r+0xa6c>
 8008ebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ec2:	d0e9      	beq.n	8008e98 <_dtoa_r+0xa38>
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	e7c2      	b.n	8008e52 <_dtoa_r+0x9f2>
 8008ecc:	9a02      	ldr	r2, [sp, #8]
 8008ece:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008ed2:	eba5 030b 	sub.w	r3, r5, fp
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d021      	beq.n	8008f1e <_dtoa_r+0xabe>
 8008eda:	2300      	movs	r3, #0
 8008edc:	220a      	movs	r2, #10
 8008ede:	9904      	ldr	r1, [sp, #16]
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fc1f 	bl	8009724 <__multadd>
 8008ee6:	45b1      	cmp	r9, r6
 8008ee8:	9004      	str	r0, [sp, #16]
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	f04f 020a 	mov.w	r2, #10
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	d105      	bne.n	8008f04 <_dtoa_r+0xaa4>
 8008ef8:	f000 fc14 	bl	8009724 <__multadd>
 8008efc:	4681      	mov	r9, r0
 8008efe:	4606      	mov	r6, r0
 8008f00:	9505      	str	r5, [sp, #20]
 8008f02:	e776      	b.n	8008df2 <_dtoa_r+0x992>
 8008f04:	f000 fc0e 	bl	8009724 <__multadd>
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4681      	mov	r9, r0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	220a      	movs	r2, #10
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fc07 	bl	8009724 <__multadd>
 8008f16:	4606      	mov	r6, r0
 8008f18:	e7f2      	b.n	8008f00 <_dtoa_r+0xaa0>
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	2201      	movs	r2, #1
 8008f20:	9904      	ldr	r1, [sp, #16]
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fdb2 	bl	8009a8c <__lshift>
 8008f28:	4639      	mov	r1, r7
 8008f2a:	9004      	str	r0, [sp, #16]
 8008f2c:	f000 fe02 	bl	8009b34 <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dcb6      	bgt.n	8008ea2 <_dtoa_r+0xa42>
 8008f34:	d102      	bne.n	8008f3c <_dtoa_r+0xadc>
 8008f36:	f018 0f01 	tst.w	r8, #1
 8008f3a:	d1b2      	bne.n	8008ea2 <_dtoa_r+0xa42>
 8008f3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f40:	2b30      	cmp	r3, #48	; 0x30
 8008f42:	f105 32ff 	add.w	r2, r5, #4294967295
 8008f46:	f47f af0a 	bne.w	8008d5e <_dtoa_r+0x8fe>
 8008f4a:	4615      	mov	r5, r2
 8008f4c:	e7f6      	b.n	8008f3c <_dtoa_r+0xadc>
 8008f4e:	4593      	cmp	fp, r2
 8008f50:	d105      	bne.n	8008f5e <_dtoa_r+0xafe>
 8008f52:	2331      	movs	r3, #49	; 0x31
 8008f54:	f10a 0a01 	add.w	sl, sl, #1
 8008f58:	f88b 3000 	strb.w	r3, [fp]
 8008f5c:	e6ff      	b.n	8008d5e <_dtoa_r+0x8fe>
 8008f5e:	4615      	mov	r5, r2
 8008f60:	e79f      	b.n	8008ea2 <_dtoa_r+0xa42>
 8008f62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008fc8 <_dtoa_r+0xb68>
 8008f66:	e007      	b.n	8008f78 <_dtoa_r+0xb18>
 8008f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008fcc <_dtoa_r+0xb6c>
 8008f6e:	b11b      	cbz	r3, 8008f78 <_dtoa_r+0xb18>
 8008f70:	f10b 0308 	add.w	r3, fp, #8
 8008f74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	4658      	mov	r0, fp
 8008f7a:	b017      	add	sp, #92	; 0x5c
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	f77f ae35 	ble.w	8008bf2 <_dtoa_r+0x792>
 8008f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8a:	9307      	str	r3, [sp, #28]
 8008f8c:	e649      	b.n	8008c22 <_dtoa_r+0x7c2>
 8008f8e:	9b02      	ldr	r3, [sp, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	dc03      	bgt.n	8008f9c <_dtoa_r+0xb3c>
 8008f94:	9b06      	ldr	r3, [sp, #24]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	f73f aecc 	bgt.w	8008d34 <_dtoa_r+0x8d4>
 8008f9c:	465d      	mov	r5, fp
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	9804      	ldr	r0, [sp, #16]
 8008fa2:	f7ff f9cf 	bl	8008344 <quorem>
 8008fa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008faa:	f805 8b01 	strb.w	r8, [r5], #1
 8008fae:	9a02      	ldr	r2, [sp, #8]
 8008fb0:	eba5 030b 	sub.w	r3, r5, fp
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	ddb0      	ble.n	8008f1a <_dtoa_r+0xaba>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	220a      	movs	r2, #10
 8008fbc:	9904      	ldr	r1, [sp, #16]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fbb0 	bl	8009724 <__multadd>
 8008fc4:	9004      	str	r0, [sp, #16]
 8008fc6:	e7ea      	b.n	8008f9e <_dtoa_r+0xb3e>
 8008fc8:	0800a430 	.word	0x0800a430
 8008fcc:	0800a4b0 	.word	0x0800a4b0

08008fd0 <rshift>:
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd2:	6906      	ldr	r6, [r0, #16]
 8008fd4:	114b      	asrs	r3, r1, #5
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	f100 0414 	add.w	r4, r0, #20
 8008fdc:	dd30      	ble.n	8009040 <rshift+0x70>
 8008fde:	f011 011f 	ands.w	r1, r1, #31
 8008fe2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008fe6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008fea:	d108      	bne.n	8008ffe <rshift+0x2e>
 8008fec:	4621      	mov	r1, r4
 8008fee:	42b2      	cmp	r2, r6
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	d211      	bcs.n	8009018 <rshift+0x48>
 8008ff4:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ff8:	f841 3b04 	str.w	r3, [r1], #4
 8008ffc:	e7f7      	b.n	8008fee <rshift+0x1e>
 8008ffe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009002:	f1c1 0c20 	rsb	ip, r1, #32
 8009006:	40cd      	lsrs	r5, r1
 8009008:	3204      	adds	r2, #4
 800900a:	4623      	mov	r3, r4
 800900c:	42b2      	cmp	r2, r6
 800900e:	4617      	mov	r7, r2
 8009010:	d30c      	bcc.n	800902c <rshift+0x5c>
 8009012:	601d      	str	r5, [r3, #0]
 8009014:	b105      	cbz	r5, 8009018 <rshift+0x48>
 8009016:	3304      	adds	r3, #4
 8009018:	1b1a      	subs	r2, r3, r4
 800901a:	42a3      	cmp	r3, r4
 800901c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009020:	bf08      	it	eq
 8009022:	2300      	moveq	r3, #0
 8009024:	6102      	str	r2, [r0, #16]
 8009026:	bf08      	it	eq
 8009028:	6143      	streq	r3, [r0, #20]
 800902a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902c:	683f      	ldr	r7, [r7, #0]
 800902e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009032:	433d      	orrs	r5, r7
 8009034:	f843 5b04 	str.w	r5, [r3], #4
 8009038:	f852 5b04 	ldr.w	r5, [r2], #4
 800903c:	40cd      	lsrs	r5, r1
 800903e:	e7e5      	b.n	800900c <rshift+0x3c>
 8009040:	4623      	mov	r3, r4
 8009042:	e7e9      	b.n	8009018 <rshift+0x48>

08009044 <__hexdig_fun>:
 8009044:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009048:	2b09      	cmp	r3, #9
 800904a:	d802      	bhi.n	8009052 <__hexdig_fun+0xe>
 800904c:	3820      	subs	r0, #32
 800904e:	b2c0      	uxtb	r0, r0
 8009050:	4770      	bx	lr
 8009052:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009056:	2b05      	cmp	r3, #5
 8009058:	d801      	bhi.n	800905e <__hexdig_fun+0x1a>
 800905a:	3847      	subs	r0, #71	; 0x47
 800905c:	e7f7      	b.n	800904e <__hexdig_fun+0xa>
 800905e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009062:	2b05      	cmp	r3, #5
 8009064:	d801      	bhi.n	800906a <__hexdig_fun+0x26>
 8009066:	3827      	subs	r0, #39	; 0x27
 8009068:	e7f1      	b.n	800904e <__hexdig_fun+0xa>
 800906a:	2000      	movs	r0, #0
 800906c:	4770      	bx	lr

0800906e <__gethex>:
 800906e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009072:	b08b      	sub	sp, #44	; 0x2c
 8009074:	468a      	mov	sl, r1
 8009076:	9002      	str	r0, [sp, #8]
 8009078:	9816      	ldr	r0, [sp, #88]	; 0x58
 800907a:	9306      	str	r3, [sp, #24]
 800907c:	4690      	mov	r8, r2
 800907e:	f000 fad0 	bl	8009622 <__localeconv_l>
 8009082:	6803      	ldr	r3, [r0, #0]
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 f8aa 	bl	80001e0 <strlen>
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	9001      	str	r0, [sp, #4]
 8009090:	4403      	add	r3, r0
 8009092:	f04f 0b00 	mov.w	fp, #0
 8009096:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	f8da 3000 	ldr.w	r3, [sl]
 80090a0:	3302      	adds	r3, #2
 80090a2:	461f      	mov	r7, r3
 80090a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090a8:	2830      	cmp	r0, #48	; 0x30
 80090aa:	d06c      	beq.n	8009186 <__gethex+0x118>
 80090ac:	f7ff ffca 	bl	8009044 <__hexdig_fun>
 80090b0:	4604      	mov	r4, r0
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d16a      	bne.n	800918c <__gethex+0x11e>
 80090b6:	9a01      	ldr	r2, [sp, #4]
 80090b8:	9903      	ldr	r1, [sp, #12]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f001 f8fe 	bl	800a2bc <strncmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d166      	bne.n	8009192 <__gethex+0x124>
 80090c4:	9b01      	ldr	r3, [sp, #4]
 80090c6:	5cf8      	ldrb	r0, [r7, r3]
 80090c8:	18fe      	adds	r6, r7, r3
 80090ca:	f7ff ffbb 	bl	8009044 <__hexdig_fun>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d062      	beq.n	8009198 <__gethex+0x12a>
 80090d2:	4633      	mov	r3, r6
 80090d4:	7818      	ldrb	r0, [r3, #0]
 80090d6:	2830      	cmp	r0, #48	; 0x30
 80090d8:	461f      	mov	r7, r3
 80090da:	f103 0301 	add.w	r3, r3, #1
 80090de:	d0f9      	beq.n	80090d4 <__gethex+0x66>
 80090e0:	f7ff ffb0 	bl	8009044 <__hexdig_fun>
 80090e4:	fab0 f580 	clz	r5, r0
 80090e8:	096d      	lsrs	r5, r5, #5
 80090ea:	4634      	mov	r4, r6
 80090ec:	f04f 0b01 	mov.w	fp, #1
 80090f0:	463a      	mov	r2, r7
 80090f2:	4616      	mov	r6, r2
 80090f4:	3201      	adds	r2, #1
 80090f6:	7830      	ldrb	r0, [r6, #0]
 80090f8:	f7ff ffa4 	bl	8009044 <__hexdig_fun>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d1f8      	bne.n	80090f2 <__gethex+0x84>
 8009100:	9a01      	ldr	r2, [sp, #4]
 8009102:	9903      	ldr	r1, [sp, #12]
 8009104:	4630      	mov	r0, r6
 8009106:	f001 f8d9 	bl	800a2bc <strncmp>
 800910a:	b950      	cbnz	r0, 8009122 <__gethex+0xb4>
 800910c:	b954      	cbnz	r4, 8009124 <__gethex+0xb6>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	18f4      	adds	r4, r6, r3
 8009112:	4622      	mov	r2, r4
 8009114:	4616      	mov	r6, r2
 8009116:	3201      	adds	r2, #1
 8009118:	7830      	ldrb	r0, [r6, #0]
 800911a:	f7ff ff93 	bl	8009044 <__hexdig_fun>
 800911e:	2800      	cmp	r0, #0
 8009120:	d1f8      	bne.n	8009114 <__gethex+0xa6>
 8009122:	b10c      	cbz	r4, 8009128 <__gethex+0xba>
 8009124:	1ba4      	subs	r4, r4, r6
 8009126:	00a4      	lsls	r4, r4, #2
 8009128:	7833      	ldrb	r3, [r6, #0]
 800912a:	2b50      	cmp	r3, #80	; 0x50
 800912c:	d001      	beq.n	8009132 <__gethex+0xc4>
 800912e:	2b70      	cmp	r3, #112	; 0x70
 8009130:	d140      	bne.n	80091b4 <__gethex+0x146>
 8009132:	7873      	ldrb	r3, [r6, #1]
 8009134:	2b2b      	cmp	r3, #43	; 0x2b
 8009136:	d031      	beq.n	800919c <__gethex+0x12e>
 8009138:	2b2d      	cmp	r3, #45	; 0x2d
 800913a:	d033      	beq.n	80091a4 <__gethex+0x136>
 800913c:	1c71      	adds	r1, r6, #1
 800913e:	f04f 0900 	mov.w	r9, #0
 8009142:	7808      	ldrb	r0, [r1, #0]
 8009144:	f7ff ff7e 	bl	8009044 <__hexdig_fun>
 8009148:	1e43      	subs	r3, r0, #1
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b18      	cmp	r3, #24
 800914e:	d831      	bhi.n	80091b4 <__gethex+0x146>
 8009150:	f1a0 0210 	sub.w	r2, r0, #16
 8009154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009158:	f7ff ff74 	bl	8009044 <__hexdig_fun>
 800915c:	1e43      	subs	r3, r0, #1
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b18      	cmp	r3, #24
 8009162:	d922      	bls.n	80091aa <__gethex+0x13c>
 8009164:	f1b9 0f00 	cmp.w	r9, #0
 8009168:	d000      	beq.n	800916c <__gethex+0xfe>
 800916a:	4252      	negs	r2, r2
 800916c:	4414      	add	r4, r2
 800916e:	f8ca 1000 	str.w	r1, [sl]
 8009172:	b30d      	cbz	r5, 80091b8 <__gethex+0x14a>
 8009174:	f1bb 0f00 	cmp.w	fp, #0
 8009178:	bf0c      	ite	eq
 800917a:	2706      	moveq	r7, #6
 800917c:	2700      	movne	r7, #0
 800917e:	4638      	mov	r0, r7
 8009180:	b00b      	add	sp, #44	; 0x2c
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	f10b 0b01 	add.w	fp, fp, #1
 800918a:	e78a      	b.n	80090a2 <__gethex+0x34>
 800918c:	2500      	movs	r5, #0
 800918e:	462c      	mov	r4, r5
 8009190:	e7ae      	b.n	80090f0 <__gethex+0x82>
 8009192:	463e      	mov	r6, r7
 8009194:	2501      	movs	r5, #1
 8009196:	e7c7      	b.n	8009128 <__gethex+0xba>
 8009198:	4604      	mov	r4, r0
 800919a:	e7fb      	b.n	8009194 <__gethex+0x126>
 800919c:	f04f 0900 	mov.w	r9, #0
 80091a0:	1cb1      	adds	r1, r6, #2
 80091a2:	e7ce      	b.n	8009142 <__gethex+0xd4>
 80091a4:	f04f 0901 	mov.w	r9, #1
 80091a8:	e7fa      	b.n	80091a0 <__gethex+0x132>
 80091aa:	230a      	movs	r3, #10
 80091ac:	fb03 0202 	mla	r2, r3, r2, r0
 80091b0:	3a10      	subs	r2, #16
 80091b2:	e7cf      	b.n	8009154 <__gethex+0xe6>
 80091b4:	4631      	mov	r1, r6
 80091b6:	e7da      	b.n	800916e <__gethex+0x100>
 80091b8:	1bf3      	subs	r3, r6, r7
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4629      	mov	r1, r5
 80091be:	2b07      	cmp	r3, #7
 80091c0:	dc49      	bgt.n	8009256 <__gethex+0x1e8>
 80091c2:	9802      	ldr	r0, [sp, #8]
 80091c4:	f000 fa63 	bl	800968e <_Balloc>
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	f100 0914 	add.w	r9, r0, #20
 80091ce:	f04f 0b00 	mov.w	fp, #0
 80091d2:	f1c3 0301 	rsb	r3, r3, #1
 80091d6:	4605      	mov	r5, r0
 80091d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80091dc:	46da      	mov	sl, fp
 80091de:	9308      	str	r3, [sp, #32]
 80091e0:	42b7      	cmp	r7, r6
 80091e2:	d33b      	bcc.n	800925c <__gethex+0x1ee>
 80091e4:	9804      	ldr	r0, [sp, #16]
 80091e6:	f840 ab04 	str.w	sl, [r0], #4
 80091ea:	eba0 0009 	sub.w	r0, r0, r9
 80091ee:	1080      	asrs	r0, r0, #2
 80091f0:	6128      	str	r0, [r5, #16]
 80091f2:	0147      	lsls	r7, r0, #5
 80091f4:	4650      	mov	r0, sl
 80091f6:	f000 fb0e 	bl	8009816 <__hi0bits>
 80091fa:	f8d8 6000 	ldr.w	r6, [r8]
 80091fe:	1a3f      	subs	r7, r7, r0
 8009200:	42b7      	cmp	r7, r6
 8009202:	dd64      	ble.n	80092ce <__gethex+0x260>
 8009204:	1bbf      	subs	r7, r7, r6
 8009206:	4639      	mov	r1, r7
 8009208:	4628      	mov	r0, r5
 800920a:	f000 fe1d 	bl	8009e48 <__any_on>
 800920e:	4682      	mov	sl, r0
 8009210:	b178      	cbz	r0, 8009232 <__gethex+0x1c4>
 8009212:	1e7b      	subs	r3, r7, #1
 8009214:	1159      	asrs	r1, r3, #5
 8009216:	f003 021f 	and.w	r2, r3, #31
 800921a:	f04f 0a01 	mov.w	sl, #1
 800921e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009222:	fa0a f202 	lsl.w	r2, sl, r2
 8009226:	420a      	tst	r2, r1
 8009228:	d003      	beq.n	8009232 <__gethex+0x1c4>
 800922a:	4553      	cmp	r3, sl
 800922c:	dc46      	bgt.n	80092bc <__gethex+0x24e>
 800922e:	f04f 0a02 	mov.w	sl, #2
 8009232:	4639      	mov	r1, r7
 8009234:	4628      	mov	r0, r5
 8009236:	f7ff fecb 	bl	8008fd0 <rshift>
 800923a:	443c      	add	r4, r7
 800923c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009240:	42a3      	cmp	r3, r4
 8009242:	da52      	bge.n	80092ea <__gethex+0x27c>
 8009244:	4629      	mov	r1, r5
 8009246:	9802      	ldr	r0, [sp, #8]
 8009248:	f000 fa55 	bl	80096f6 <_Bfree>
 800924c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800924e:	2300      	movs	r3, #0
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	27a3      	movs	r7, #163	; 0xa3
 8009254:	e793      	b.n	800917e <__gethex+0x110>
 8009256:	3101      	adds	r1, #1
 8009258:	105b      	asrs	r3, r3, #1
 800925a:	e7b0      	b.n	80091be <__gethex+0x150>
 800925c:	1e73      	subs	r3, r6, #1
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	9a07      	ldr	r2, [sp, #28]
 8009262:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <__gethex+0x22e>
 800926a:	f1bb 0f20 	cmp.w	fp, #32
 800926e:	d107      	bne.n	8009280 <__gethex+0x212>
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	f8c3 a000 	str.w	sl, [r3]
 8009276:	3304      	adds	r3, #4
 8009278:	f04f 0a00 	mov.w	sl, #0
 800927c:	9304      	str	r3, [sp, #16]
 800927e:	46d3      	mov	fp, sl
 8009280:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009284:	f7ff fede 	bl	8009044 <__hexdig_fun>
 8009288:	f000 000f 	and.w	r0, r0, #15
 800928c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009290:	ea4a 0a00 	orr.w	sl, sl, r0
 8009294:	f10b 0b04 	add.w	fp, fp, #4
 8009298:	9b05      	ldr	r3, [sp, #20]
 800929a:	e00d      	b.n	80092b8 <__gethex+0x24a>
 800929c:	9b05      	ldr	r3, [sp, #20]
 800929e:	9a08      	ldr	r2, [sp, #32]
 80092a0:	4413      	add	r3, r2
 80092a2:	42bb      	cmp	r3, r7
 80092a4:	d3e1      	bcc.n	800926a <__gethex+0x1fc>
 80092a6:	4618      	mov	r0, r3
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	9903      	ldr	r1, [sp, #12]
 80092ac:	9309      	str	r3, [sp, #36]	; 0x24
 80092ae:	f001 f805 	bl	800a2bc <strncmp>
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d1d8      	bne.n	800926a <__gethex+0x1fc>
 80092b8:	461e      	mov	r6, r3
 80092ba:	e791      	b.n	80091e0 <__gethex+0x172>
 80092bc:	1eb9      	subs	r1, r7, #2
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 fdc2 	bl	8009e48 <__any_on>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d0b2      	beq.n	800922e <__gethex+0x1c0>
 80092c8:	f04f 0a03 	mov.w	sl, #3
 80092cc:	e7b1      	b.n	8009232 <__gethex+0x1c4>
 80092ce:	da09      	bge.n	80092e4 <__gethex+0x276>
 80092d0:	1bf7      	subs	r7, r6, r7
 80092d2:	4629      	mov	r1, r5
 80092d4:	463a      	mov	r2, r7
 80092d6:	9802      	ldr	r0, [sp, #8]
 80092d8:	f000 fbd8 	bl	8009a8c <__lshift>
 80092dc:	1be4      	subs	r4, r4, r7
 80092de:	4605      	mov	r5, r0
 80092e0:	f100 0914 	add.w	r9, r0, #20
 80092e4:	f04f 0a00 	mov.w	sl, #0
 80092e8:	e7a8      	b.n	800923c <__gethex+0x1ce>
 80092ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092ee:	42a0      	cmp	r0, r4
 80092f0:	dd6a      	ble.n	80093c8 <__gethex+0x35a>
 80092f2:	1b04      	subs	r4, r0, r4
 80092f4:	42a6      	cmp	r6, r4
 80092f6:	dc2e      	bgt.n	8009356 <__gethex+0x2e8>
 80092f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d022      	beq.n	8009346 <__gethex+0x2d8>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d024      	beq.n	800934e <__gethex+0x2e0>
 8009304:	2b01      	cmp	r3, #1
 8009306:	d115      	bne.n	8009334 <__gethex+0x2c6>
 8009308:	42a6      	cmp	r6, r4
 800930a:	d113      	bne.n	8009334 <__gethex+0x2c6>
 800930c:	2e01      	cmp	r6, #1
 800930e:	dc0b      	bgt.n	8009328 <__gethex+0x2ba>
 8009310:	9a06      	ldr	r2, [sp, #24]
 8009312:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	2301      	movs	r3, #1
 800931a:	612b      	str	r3, [r5, #16]
 800931c:	f8c9 3000 	str.w	r3, [r9]
 8009320:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009322:	2762      	movs	r7, #98	; 0x62
 8009324:	601d      	str	r5, [r3, #0]
 8009326:	e72a      	b.n	800917e <__gethex+0x110>
 8009328:	1e71      	subs	r1, r6, #1
 800932a:	4628      	mov	r0, r5
 800932c:	f000 fd8c 	bl	8009e48 <__any_on>
 8009330:	2800      	cmp	r0, #0
 8009332:	d1ed      	bne.n	8009310 <__gethex+0x2a2>
 8009334:	4629      	mov	r1, r5
 8009336:	9802      	ldr	r0, [sp, #8]
 8009338:	f000 f9dd 	bl	80096f6 <_Bfree>
 800933c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800933e:	2300      	movs	r3, #0
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	2750      	movs	r7, #80	; 0x50
 8009344:	e71b      	b.n	800917e <__gethex+0x110>
 8009346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0e1      	beq.n	8009310 <__gethex+0x2a2>
 800934c:	e7f2      	b.n	8009334 <__gethex+0x2c6>
 800934e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1dd      	bne.n	8009310 <__gethex+0x2a2>
 8009354:	e7ee      	b.n	8009334 <__gethex+0x2c6>
 8009356:	1e67      	subs	r7, r4, #1
 8009358:	f1ba 0f00 	cmp.w	sl, #0
 800935c:	d131      	bne.n	80093c2 <__gethex+0x354>
 800935e:	b127      	cbz	r7, 800936a <__gethex+0x2fc>
 8009360:	4639      	mov	r1, r7
 8009362:	4628      	mov	r0, r5
 8009364:	f000 fd70 	bl	8009e48 <__any_on>
 8009368:	4682      	mov	sl, r0
 800936a:	117a      	asrs	r2, r7, #5
 800936c:	2301      	movs	r3, #1
 800936e:	f007 071f 	and.w	r7, r7, #31
 8009372:	fa03 f707 	lsl.w	r7, r3, r7
 8009376:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800937a:	4621      	mov	r1, r4
 800937c:	421f      	tst	r7, r3
 800937e:	4628      	mov	r0, r5
 8009380:	bf18      	it	ne
 8009382:	f04a 0a02 	orrne.w	sl, sl, #2
 8009386:	1b36      	subs	r6, r6, r4
 8009388:	f7ff fe22 	bl	8008fd0 <rshift>
 800938c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009390:	2702      	movs	r7, #2
 8009392:	f1ba 0f00 	cmp.w	sl, #0
 8009396:	d048      	beq.n	800942a <__gethex+0x3bc>
 8009398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d015      	beq.n	80093cc <__gethex+0x35e>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d017      	beq.n	80093d4 <__gethex+0x366>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d109      	bne.n	80093bc <__gethex+0x34e>
 80093a8:	f01a 0f02 	tst.w	sl, #2
 80093ac:	d006      	beq.n	80093bc <__gethex+0x34e>
 80093ae:	f8d9 3000 	ldr.w	r3, [r9]
 80093b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80093b6:	f01a 0f01 	tst.w	sl, #1
 80093ba:	d10e      	bne.n	80093da <__gethex+0x36c>
 80093bc:	f047 0710 	orr.w	r7, r7, #16
 80093c0:	e033      	b.n	800942a <__gethex+0x3bc>
 80093c2:	f04f 0a01 	mov.w	sl, #1
 80093c6:	e7d0      	b.n	800936a <__gethex+0x2fc>
 80093c8:	2701      	movs	r7, #1
 80093ca:	e7e2      	b.n	8009392 <__gethex+0x324>
 80093cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ce:	f1c3 0301 	rsb	r3, r3, #1
 80093d2:	9315      	str	r3, [sp, #84]	; 0x54
 80093d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <__gethex+0x34e>
 80093da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80093de:	f105 0314 	add.w	r3, r5, #20
 80093e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80093e6:	eb03 010a 	add.w	r1, r3, sl
 80093ea:	f04f 0c00 	mov.w	ip, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093f8:	d01c      	beq.n	8009434 <__gethex+0x3c6>
 80093fa:	3201      	adds	r2, #1
 80093fc:	6002      	str	r2, [r0, #0]
 80093fe:	2f02      	cmp	r7, #2
 8009400:	f105 0314 	add.w	r3, r5, #20
 8009404:	d138      	bne.n	8009478 <__gethex+0x40a>
 8009406:	f8d8 2000 	ldr.w	r2, [r8]
 800940a:	3a01      	subs	r2, #1
 800940c:	42b2      	cmp	r2, r6
 800940e:	d10a      	bne.n	8009426 <__gethex+0x3b8>
 8009410:	1171      	asrs	r1, r6, #5
 8009412:	2201      	movs	r2, #1
 8009414:	f006 061f 	and.w	r6, r6, #31
 8009418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800941c:	fa02 f606 	lsl.w	r6, r2, r6
 8009420:	421e      	tst	r6, r3
 8009422:	bf18      	it	ne
 8009424:	4617      	movne	r7, r2
 8009426:	f047 0720 	orr.w	r7, r7, #32
 800942a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800942c:	601d      	str	r5, [r3, #0]
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	601c      	str	r4, [r3, #0]
 8009432:	e6a4      	b.n	800917e <__gethex+0x110>
 8009434:	4299      	cmp	r1, r3
 8009436:	f843 cc04 	str.w	ip, [r3, #-4]
 800943a:	d8d8      	bhi.n	80093ee <__gethex+0x380>
 800943c:	68ab      	ldr	r3, [r5, #8]
 800943e:	4599      	cmp	r9, r3
 8009440:	db12      	blt.n	8009468 <__gethex+0x3fa>
 8009442:	6869      	ldr	r1, [r5, #4]
 8009444:	9802      	ldr	r0, [sp, #8]
 8009446:	3101      	adds	r1, #1
 8009448:	f000 f921 	bl	800968e <_Balloc>
 800944c:	692a      	ldr	r2, [r5, #16]
 800944e:	3202      	adds	r2, #2
 8009450:	f105 010c 	add.w	r1, r5, #12
 8009454:	4683      	mov	fp, r0
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	300c      	adds	r0, #12
 800945a:	f000 f90d 	bl	8009678 <memcpy>
 800945e:	4629      	mov	r1, r5
 8009460:	9802      	ldr	r0, [sp, #8]
 8009462:	f000 f948 	bl	80096f6 <_Bfree>
 8009466:	465d      	mov	r5, fp
 8009468:	692b      	ldr	r3, [r5, #16]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009470:	612a      	str	r2, [r5, #16]
 8009472:	2201      	movs	r2, #1
 8009474:	615a      	str	r2, [r3, #20]
 8009476:	e7c2      	b.n	80093fe <__gethex+0x390>
 8009478:	692a      	ldr	r2, [r5, #16]
 800947a:	454a      	cmp	r2, r9
 800947c:	dd0b      	ble.n	8009496 <__gethex+0x428>
 800947e:	2101      	movs	r1, #1
 8009480:	4628      	mov	r0, r5
 8009482:	f7ff fda5 	bl	8008fd0 <rshift>
 8009486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800948a:	3401      	adds	r4, #1
 800948c:	42a3      	cmp	r3, r4
 800948e:	f6ff aed9 	blt.w	8009244 <__gethex+0x1d6>
 8009492:	2701      	movs	r7, #1
 8009494:	e7c7      	b.n	8009426 <__gethex+0x3b8>
 8009496:	f016 061f 	ands.w	r6, r6, #31
 800949a:	d0fa      	beq.n	8009492 <__gethex+0x424>
 800949c:	449a      	add	sl, r3
 800949e:	f1c6 0620 	rsb	r6, r6, #32
 80094a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80094a6:	f000 f9b6 	bl	8009816 <__hi0bits>
 80094aa:	42b0      	cmp	r0, r6
 80094ac:	dbe7      	blt.n	800947e <__gethex+0x410>
 80094ae:	e7f0      	b.n	8009492 <__gethex+0x424>

080094b0 <L_shift>:
 80094b0:	f1c2 0208 	rsb	r2, r2, #8
 80094b4:	0092      	lsls	r2, r2, #2
 80094b6:	b570      	push	{r4, r5, r6, lr}
 80094b8:	f1c2 0620 	rsb	r6, r2, #32
 80094bc:	6843      	ldr	r3, [r0, #4]
 80094be:	6804      	ldr	r4, [r0, #0]
 80094c0:	fa03 f506 	lsl.w	r5, r3, r6
 80094c4:	432c      	orrs	r4, r5
 80094c6:	40d3      	lsrs	r3, r2
 80094c8:	6004      	str	r4, [r0, #0]
 80094ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ce:	4288      	cmp	r0, r1
 80094d0:	d3f4      	bcc.n	80094bc <L_shift+0xc>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}

080094d4 <__match>:
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	6803      	ldr	r3, [r0, #0]
 80094d8:	3301      	adds	r3, #1
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	b914      	cbnz	r4, 80094e6 <__match+0x12>
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	2001      	movs	r0, #1
 80094e4:	bd30      	pop	{r4, r5, pc}
 80094e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ee:	2d19      	cmp	r5, #25
 80094f0:	bf98      	it	ls
 80094f2:	3220      	addls	r2, #32
 80094f4:	42a2      	cmp	r2, r4
 80094f6:	d0f0      	beq.n	80094da <__match+0x6>
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7f3      	b.n	80094e4 <__match+0x10>

080094fc <__hexnan>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	680b      	ldr	r3, [r1, #0]
 8009502:	6801      	ldr	r1, [r0, #0]
 8009504:	115f      	asrs	r7, r3, #5
 8009506:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800950a:	f013 031f 	ands.w	r3, r3, #31
 800950e:	b087      	sub	sp, #28
 8009510:	bf18      	it	ne
 8009512:	3704      	addne	r7, #4
 8009514:	2500      	movs	r5, #0
 8009516:	1f3e      	subs	r6, r7, #4
 8009518:	4682      	mov	sl, r0
 800951a:	4690      	mov	r8, r2
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009522:	46b1      	mov	r9, r6
 8009524:	4634      	mov	r4, r6
 8009526:	9502      	str	r5, [sp, #8]
 8009528:	46ab      	mov	fp, r5
 800952a:	784a      	ldrb	r2, [r1, #1]
 800952c:	1c4b      	adds	r3, r1, #1
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	b342      	cbz	r2, 8009584 <__hexnan+0x88>
 8009532:	4610      	mov	r0, r2
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	9204      	str	r2, [sp, #16]
 8009538:	f7ff fd84 	bl	8009044 <__hexdig_fun>
 800953c:	2800      	cmp	r0, #0
 800953e:	d143      	bne.n	80095c8 <__hexnan+0xcc>
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	9905      	ldr	r1, [sp, #20]
 8009544:	2a20      	cmp	r2, #32
 8009546:	d818      	bhi.n	800957a <__hexnan+0x7e>
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	459b      	cmp	fp, r3
 800954c:	dd13      	ble.n	8009576 <__hexnan+0x7a>
 800954e:	454c      	cmp	r4, r9
 8009550:	d206      	bcs.n	8009560 <__hexnan+0x64>
 8009552:	2d07      	cmp	r5, #7
 8009554:	dc04      	bgt.n	8009560 <__hexnan+0x64>
 8009556:	462a      	mov	r2, r5
 8009558:	4649      	mov	r1, r9
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff ffa8 	bl	80094b0 <L_shift>
 8009560:	4544      	cmp	r4, r8
 8009562:	d944      	bls.n	80095ee <__hexnan+0xf2>
 8009564:	2300      	movs	r3, #0
 8009566:	f1a4 0904 	sub.w	r9, r4, #4
 800956a:	f844 3c04 	str.w	r3, [r4, #-4]
 800956e:	f8cd b008 	str.w	fp, [sp, #8]
 8009572:	464c      	mov	r4, r9
 8009574:	461d      	mov	r5, r3
 8009576:	9903      	ldr	r1, [sp, #12]
 8009578:	e7d7      	b.n	800952a <__hexnan+0x2e>
 800957a:	2a29      	cmp	r2, #41	; 0x29
 800957c:	d14a      	bne.n	8009614 <__hexnan+0x118>
 800957e:	3102      	adds	r1, #2
 8009580:	f8ca 1000 	str.w	r1, [sl]
 8009584:	f1bb 0f00 	cmp.w	fp, #0
 8009588:	d044      	beq.n	8009614 <__hexnan+0x118>
 800958a:	454c      	cmp	r4, r9
 800958c:	d206      	bcs.n	800959c <__hexnan+0xa0>
 800958e:	2d07      	cmp	r5, #7
 8009590:	dc04      	bgt.n	800959c <__hexnan+0xa0>
 8009592:	462a      	mov	r2, r5
 8009594:	4649      	mov	r1, r9
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff ff8a 	bl	80094b0 <L_shift>
 800959c:	4544      	cmp	r4, r8
 800959e:	d928      	bls.n	80095f2 <__hexnan+0xf6>
 80095a0:	4643      	mov	r3, r8
 80095a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80095a6:	f843 2b04 	str.w	r2, [r3], #4
 80095aa:	42a6      	cmp	r6, r4
 80095ac:	d2f9      	bcs.n	80095a2 <__hexnan+0xa6>
 80095ae:	2200      	movs	r2, #0
 80095b0:	f843 2b04 	str.w	r2, [r3], #4
 80095b4:	429e      	cmp	r6, r3
 80095b6:	d2fb      	bcs.n	80095b0 <__hexnan+0xb4>
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	b91b      	cbnz	r3, 80095c4 <__hexnan+0xc8>
 80095bc:	4546      	cmp	r6, r8
 80095be:	d127      	bne.n	8009610 <__hexnan+0x114>
 80095c0:	2301      	movs	r3, #1
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	2005      	movs	r0, #5
 80095c6:	e026      	b.n	8009616 <__hexnan+0x11a>
 80095c8:	3501      	adds	r5, #1
 80095ca:	2d08      	cmp	r5, #8
 80095cc:	f10b 0b01 	add.w	fp, fp, #1
 80095d0:	dd06      	ble.n	80095e0 <__hexnan+0xe4>
 80095d2:	4544      	cmp	r4, r8
 80095d4:	d9cf      	bls.n	8009576 <__hexnan+0x7a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80095dc:	2501      	movs	r5, #1
 80095de:	3c04      	subs	r4, #4
 80095e0:	6822      	ldr	r2, [r4, #0]
 80095e2:	f000 000f 	and.w	r0, r0, #15
 80095e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095ea:	6020      	str	r0, [r4, #0]
 80095ec:	e7c3      	b.n	8009576 <__hexnan+0x7a>
 80095ee:	2508      	movs	r5, #8
 80095f0:	e7c1      	b.n	8009576 <__hexnan+0x7a>
 80095f2:	9b01      	ldr	r3, [sp, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0df      	beq.n	80095b8 <__hexnan+0xbc>
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	f1c3 0320 	rsb	r3, r3, #32
 8009600:	fa22 f303 	lsr.w	r3, r2, r3
 8009604:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009608:	401a      	ands	r2, r3
 800960a:	f847 2c04 	str.w	r2, [r7, #-4]
 800960e:	e7d3      	b.n	80095b8 <__hexnan+0xbc>
 8009610:	3e04      	subs	r6, #4
 8009612:	e7d1      	b.n	80095b8 <__hexnan+0xbc>
 8009614:	2004      	movs	r0, #4
 8009616:	b007      	add	sp, #28
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800961c <__locale_ctype_ptr_l>:
 800961c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009620:	4770      	bx	lr

08009622 <__localeconv_l>:
 8009622:	30f0      	adds	r0, #240	; 0xf0
 8009624:	4770      	bx	lr
	...

08009628 <_localeconv_r>:
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <_localeconv_r+0x14>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6a18      	ldr	r0, [r3, #32]
 800962e:	4b04      	ldr	r3, [pc, #16]	; (8009640 <_localeconv_r+0x18>)
 8009630:	2800      	cmp	r0, #0
 8009632:	bf08      	it	eq
 8009634:	4618      	moveq	r0, r3
 8009636:	30f0      	adds	r0, #240	; 0xf0
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000038 	.word	0x20000038
 8009640:	2000009c 	.word	0x2000009c

08009644 <malloc>:
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <malloc+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f000 bc7b 	b.w	8009f44 <_malloc_r>
 800964e:	bf00      	nop
 8009650:	20000038 	.word	0x20000038

08009654 <__ascii_mbtowc>:
 8009654:	b082      	sub	sp, #8
 8009656:	b901      	cbnz	r1, 800965a <__ascii_mbtowc+0x6>
 8009658:	a901      	add	r1, sp, #4
 800965a:	b142      	cbz	r2, 800966e <__ascii_mbtowc+0x1a>
 800965c:	b14b      	cbz	r3, 8009672 <__ascii_mbtowc+0x1e>
 800965e:	7813      	ldrb	r3, [r2, #0]
 8009660:	600b      	str	r3, [r1, #0]
 8009662:	7812      	ldrb	r2, [r2, #0]
 8009664:	1c10      	adds	r0, r2, #0
 8009666:	bf18      	it	ne
 8009668:	2001      	movne	r0, #1
 800966a:	b002      	add	sp, #8
 800966c:	4770      	bx	lr
 800966e:	4610      	mov	r0, r2
 8009670:	e7fb      	b.n	800966a <__ascii_mbtowc+0x16>
 8009672:	f06f 0001 	mvn.w	r0, #1
 8009676:	e7f8      	b.n	800966a <__ascii_mbtowc+0x16>

08009678 <memcpy>:
 8009678:	b510      	push	{r4, lr}
 800967a:	1e43      	subs	r3, r0, #1
 800967c:	440a      	add	r2, r1
 800967e:	4291      	cmp	r1, r2
 8009680:	d100      	bne.n	8009684 <memcpy+0xc>
 8009682:	bd10      	pop	{r4, pc}
 8009684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800968c:	e7f7      	b.n	800967e <memcpy+0x6>

0800968e <_Balloc>:
 800968e:	b570      	push	{r4, r5, r6, lr}
 8009690:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009692:	4604      	mov	r4, r0
 8009694:	460e      	mov	r6, r1
 8009696:	b93d      	cbnz	r5, 80096a8 <_Balloc+0x1a>
 8009698:	2010      	movs	r0, #16
 800969a:	f7ff ffd3 	bl	8009644 <malloc>
 800969e:	6260      	str	r0, [r4, #36]	; 0x24
 80096a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096a4:	6005      	str	r5, [r0, #0]
 80096a6:	60c5      	str	r5, [r0, #12]
 80096a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096aa:	68eb      	ldr	r3, [r5, #12]
 80096ac:	b183      	cbz	r3, 80096d0 <_Balloc+0x42>
 80096ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096b6:	b9b8      	cbnz	r0, 80096e8 <_Balloc+0x5a>
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f506 	lsl.w	r5, r1, r6
 80096be:	1d6a      	adds	r2, r5, #5
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fbe1 	bl	8009e8a <_calloc_r>
 80096c8:	b160      	cbz	r0, 80096e4 <_Balloc+0x56>
 80096ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096ce:	e00e      	b.n	80096ee <_Balloc+0x60>
 80096d0:	2221      	movs	r2, #33	; 0x21
 80096d2:	2104      	movs	r1, #4
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fbd8 	bl	8009e8a <_calloc_r>
 80096da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096dc:	60e8      	str	r0, [r5, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e4      	bne.n	80096ae <_Balloc+0x20>
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	6802      	ldr	r2, [r0, #0]
 80096ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096ee:	2300      	movs	r3, #0
 80096f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f4:	e7f7      	b.n	80096e6 <_Balloc+0x58>

080096f6 <_Bfree>:
 80096f6:	b570      	push	{r4, r5, r6, lr}
 80096f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096fa:	4606      	mov	r6, r0
 80096fc:	460d      	mov	r5, r1
 80096fe:	b93c      	cbnz	r4, 8009710 <_Bfree+0x1a>
 8009700:	2010      	movs	r0, #16
 8009702:	f7ff ff9f 	bl	8009644 <malloc>
 8009706:	6270      	str	r0, [r6, #36]	; 0x24
 8009708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800970c:	6004      	str	r4, [r0, #0]
 800970e:	60c4      	str	r4, [r0, #12]
 8009710:	b13d      	cbz	r5, 8009722 <_Bfree+0x2c>
 8009712:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009714:	686a      	ldr	r2, [r5, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800971c:	6029      	str	r1, [r5, #0]
 800971e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009722:	bd70      	pop	{r4, r5, r6, pc}

08009724 <__multadd>:
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	690d      	ldr	r5, [r1, #16]
 800972a:	461f      	mov	r7, r3
 800972c:	4606      	mov	r6, r0
 800972e:	460c      	mov	r4, r1
 8009730:	f101 0c14 	add.w	ip, r1, #20
 8009734:	2300      	movs	r3, #0
 8009736:	f8dc 0000 	ldr.w	r0, [ip]
 800973a:	b281      	uxth	r1, r0
 800973c:	fb02 7101 	mla	r1, r2, r1, r7
 8009740:	0c0f      	lsrs	r7, r1, #16
 8009742:	0c00      	lsrs	r0, r0, #16
 8009744:	fb02 7000 	mla	r0, r2, r0, r7
 8009748:	b289      	uxth	r1, r1
 800974a:	3301      	adds	r3, #1
 800974c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009750:	429d      	cmp	r5, r3
 8009752:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009756:	f84c 1b04 	str.w	r1, [ip], #4
 800975a:	dcec      	bgt.n	8009736 <__multadd+0x12>
 800975c:	b1d7      	cbz	r7, 8009794 <__multadd+0x70>
 800975e:	68a3      	ldr	r3, [r4, #8]
 8009760:	42ab      	cmp	r3, r5
 8009762:	dc12      	bgt.n	800978a <__multadd+0x66>
 8009764:	6861      	ldr	r1, [r4, #4]
 8009766:	4630      	mov	r0, r6
 8009768:	3101      	adds	r1, #1
 800976a:	f7ff ff90 	bl	800968e <_Balloc>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	4680      	mov	r8, r0
 8009778:	0092      	lsls	r2, r2, #2
 800977a:	300c      	adds	r0, #12
 800977c:	f7ff ff7c 	bl	8009678 <memcpy>
 8009780:	4621      	mov	r1, r4
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ffb7 	bl	80096f6 <_Bfree>
 8009788:	4644      	mov	r4, r8
 800978a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800978e:	3501      	adds	r5, #1
 8009790:	615f      	str	r7, [r3, #20]
 8009792:	6125      	str	r5, [r4, #16]
 8009794:	4620      	mov	r0, r4
 8009796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800979a <__s2b>:
 800979a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979e:	460c      	mov	r4, r1
 80097a0:	4615      	mov	r5, r2
 80097a2:	461f      	mov	r7, r3
 80097a4:	2209      	movs	r2, #9
 80097a6:	3308      	adds	r3, #8
 80097a8:	4606      	mov	r6, r0
 80097aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80097ae:	2100      	movs	r1, #0
 80097b0:	2201      	movs	r2, #1
 80097b2:	429a      	cmp	r2, r3
 80097b4:	db20      	blt.n	80097f8 <__s2b+0x5e>
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ff69 	bl	800968e <_Balloc>
 80097bc:	9b08      	ldr	r3, [sp, #32]
 80097be:	6143      	str	r3, [r0, #20]
 80097c0:	2d09      	cmp	r5, #9
 80097c2:	f04f 0301 	mov.w	r3, #1
 80097c6:	6103      	str	r3, [r0, #16]
 80097c8:	dd19      	ble.n	80097fe <__s2b+0x64>
 80097ca:	f104 0809 	add.w	r8, r4, #9
 80097ce:	46c1      	mov	r9, r8
 80097d0:	442c      	add	r4, r5
 80097d2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80097d6:	4601      	mov	r1, r0
 80097d8:	3b30      	subs	r3, #48	; 0x30
 80097da:	220a      	movs	r2, #10
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ffa1 	bl	8009724 <__multadd>
 80097e2:	45a1      	cmp	r9, r4
 80097e4:	d1f5      	bne.n	80097d2 <__s2b+0x38>
 80097e6:	eb08 0405 	add.w	r4, r8, r5
 80097ea:	3c08      	subs	r4, #8
 80097ec:	1b2d      	subs	r5, r5, r4
 80097ee:	1963      	adds	r3, r4, r5
 80097f0:	42bb      	cmp	r3, r7
 80097f2:	db07      	blt.n	8009804 <__s2b+0x6a>
 80097f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f8:	0052      	lsls	r2, r2, #1
 80097fa:	3101      	adds	r1, #1
 80097fc:	e7d9      	b.n	80097b2 <__s2b+0x18>
 80097fe:	340a      	adds	r4, #10
 8009800:	2509      	movs	r5, #9
 8009802:	e7f3      	b.n	80097ec <__s2b+0x52>
 8009804:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009808:	4601      	mov	r1, r0
 800980a:	3b30      	subs	r3, #48	; 0x30
 800980c:	220a      	movs	r2, #10
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ff88 	bl	8009724 <__multadd>
 8009814:	e7eb      	b.n	80097ee <__s2b+0x54>

08009816 <__hi0bits>:
 8009816:	0c02      	lsrs	r2, r0, #16
 8009818:	0412      	lsls	r2, r2, #16
 800981a:	4603      	mov	r3, r0
 800981c:	b9b2      	cbnz	r2, 800984c <__hi0bits+0x36>
 800981e:	0403      	lsls	r3, r0, #16
 8009820:	2010      	movs	r0, #16
 8009822:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009826:	bf04      	itt	eq
 8009828:	021b      	lsleq	r3, r3, #8
 800982a:	3008      	addeq	r0, #8
 800982c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009830:	bf04      	itt	eq
 8009832:	011b      	lsleq	r3, r3, #4
 8009834:	3004      	addeq	r0, #4
 8009836:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800983a:	bf04      	itt	eq
 800983c:	009b      	lsleq	r3, r3, #2
 800983e:	3002      	addeq	r0, #2
 8009840:	2b00      	cmp	r3, #0
 8009842:	db06      	blt.n	8009852 <__hi0bits+0x3c>
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	d503      	bpl.n	8009850 <__hi0bits+0x3a>
 8009848:	3001      	adds	r0, #1
 800984a:	4770      	bx	lr
 800984c:	2000      	movs	r0, #0
 800984e:	e7e8      	b.n	8009822 <__hi0bits+0xc>
 8009850:	2020      	movs	r0, #32
 8009852:	4770      	bx	lr

08009854 <__lo0bits>:
 8009854:	6803      	ldr	r3, [r0, #0]
 8009856:	f013 0207 	ands.w	r2, r3, #7
 800985a:	4601      	mov	r1, r0
 800985c:	d00b      	beq.n	8009876 <__lo0bits+0x22>
 800985e:	07da      	lsls	r2, r3, #31
 8009860:	d423      	bmi.n	80098aa <__lo0bits+0x56>
 8009862:	0798      	lsls	r0, r3, #30
 8009864:	bf49      	itett	mi
 8009866:	085b      	lsrmi	r3, r3, #1
 8009868:	089b      	lsrpl	r3, r3, #2
 800986a:	2001      	movmi	r0, #1
 800986c:	600b      	strmi	r3, [r1, #0]
 800986e:	bf5c      	itt	pl
 8009870:	600b      	strpl	r3, [r1, #0]
 8009872:	2002      	movpl	r0, #2
 8009874:	4770      	bx	lr
 8009876:	b298      	uxth	r0, r3
 8009878:	b9a8      	cbnz	r0, 80098a6 <__lo0bits+0x52>
 800987a:	0c1b      	lsrs	r3, r3, #16
 800987c:	2010      	movs	r0, #16
 800987e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009882:	bf04      	itt	eq
 8009884:	0a1b      	lsreq	r3, r3, #8
 8009886:	3008      	addeq	r0, #8
 8009888:	071a      	lsls	r2, r3, #28
 800988a:	bf04      	itt	eq
 800988c:	091b      	lsreq	r3, r3, #4
 800988e:	3004      	addeq	r0, #4
 8009890:	079a      	lsls	r2, r3, #30
 8009892:	bf04      	itt	eq
 8009894:	089b      	lsreq	r3, r3, #2
 8009896:	3002      	addeq	r0, #2
 8009898:	07da      	lsls	r2, r3, #31
 800989a:	d402      	bmi.n	80098a2 <__lo0bits+0x4e>
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	d006      	beq.n	80098ae <__lo0bits+0x5a>
 80098a0:	3001      	adds	r0, #1
 80098a2:	600b      	str	r3, [r1, #0]
 80098a4:	4770      	bx	lr
 80098a6:	4610      	mov	r0, r2
 80098a8:	e7e9      	b.n	800987e <__lo0bits+0x2a>
 80098aa:	2000      	movs	r0, #0
 80098ac:	4770      	bx	lr
 80098ae:	2020      	movs	r0, #32
 80098b0:	4770      	bx	lr

080098b2 <__i2b>:
 80098b2:	b510      	push	{r4, lr}
 80098b4:	460c      	mov	r4, r1
 80098b6:	2101      	movs	r1, #1
 80098b8:	f7ff fee9 	bl	800968e <_Balloc>
 80098bc:	2201      	movs	r2, #1
 80098be:	6144      	str	r4, [r0, #20]
 80098c0:	6102      	str	r2, [r0, #16]
 80098c2:	bd10      	pop	{r4, pc}

080098c4 <__multiply>:
 80098c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4614      	mov	r4, r2
 80098ca:	690a      	ldr	r2, [r1, #16]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	bfb8      	it	lt
 80098d2:	460b      	movlt	r3, r1
 80098d4:	4688      	mov	r8, r1
 80098d6:	bfbc      	itt	lt
 80098d8:	46a0      	movlt	r8, r4
 80098da:	461c      	movlt	r4, r3
 80098dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098ec:	eb07 0609 	add.w	r6, r7, r9
 80098f0:	42b3      	cmp	r3, r6
 80098f2:	bfb8      	it	lt
 80098f4:	3101      	addlt	r1, #1
 80098f6:	f7ff feca 	bl	800968e <_Balloc>
 80098fa:	f100 0514 	add.w	r5, r0, #20
 80098fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009902:	462b      	mov	r3, r5
 8009904:	2200      	movs	r2, #0
 8009906:	4573      	cmp	r3, lr
 8009908:	d316      	bcc.n	8009938 <__multiply+0x74>
 800990a:	f104 0214 	add.w	r2, r4, #20
 800990e:	f108 0114 	add.w	r1, r8, #20
 8009912:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009916:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	9201      	str	r2, [sp, #4]
 8009920:	4293      	cmp	r3, r2
 8009922:	d80c      	bhi.n	800993e <__multiply+0x7a>
 8009924:	2e00      	cmp	r6, #0
 8009926:	dd03      	ble.n	8009930 <__multiply+0x6c>
 8009928:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800992c:	2b00      	cmp	r3, #0
 800992e:	d05d      	beq.n	80099ec <__multiply+0x128>
 8009930:	6106      	str	r6, [r0, #16]
 8009932:	b003      	add	sp, #12
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009938:	f843 2b04 	str.w	r2, [r3], #4
 800993c:	e7e3      	b.n	8009906 <__multiply+0x42>
 800993e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009942:	f1bb 0f00 	cmp.w	fp, #0
 8009946:	d023      	beq.n	8009990 <__multiply+0xcc>
 8009948:	4689      	mov	r9, r1
 800994a:	46ac      	mov	ip, r5
 800994c:	f04f 0800 	mov.w	r8, #0
 8009950:	f859 4b04 	ldr.w	r4, [r9], #4
 8009954:	f8dc a000 	ldr.w	sl, [ip]
 8009958:	b2a3      	uxth	r3, r4
 800995a:	fa1f fa8a 	uxth.w	sl, sl
 800995e:	fb0b a303 	mla	r3, fp, r3, sl
 8009962:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009966:	f8dc 4000 	ldr.w	r4, [ip]
 800996a:	4443      	add	r3, r8
 800996c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009970:	fb0b 840a 	mla	r4, fp, sl, r8
 8009974:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009978:	46e2      	mov	sl, ip
 800997a:	b29b      	uxth	r3, r3
 800997c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009980:	454f      	cmp	r7, r9
 8009982:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009986:	f84a 3b04 	str.w	r3, [sl], #4
 800998a:	d82b      	bhi.n	80099e4 <__multiply+0x120>
 800998c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009996:	3204      	adds	r2, #4
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d020      	beq.n	80099e0 <__multiply+0x11c>
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	4689      	mov	r9, r1
 80099a2:	46a8      	mov	r8, r5
 80099a4:	f04f 0b00 	mov.w	fp, #0
 80099a8:	f8b9 c000 	ldrh.w	ip, [r9]
 80099ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80099b0:	fb0a 440c 	mla	r4, sl, ip, r4
 80099b4:	445c      	add	r4, fp
 80099b6:	46c4      	mov	ip, r8
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099be:	f84c 3b04 	str.w	r3, [ip], #4
 80099c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	fb0a b303 	mla	r3, sl, r3, fp
 80099d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80099d4:	454f      	cmp	r7, r9
 80099d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80099da:	d805      	bhi.n	80099e8 <__multiply+0x124>
 80099dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80099e0:	3504      	adds	r5, #4
 80099e2:	e79b      	b.n	800991c <__multiply+0x58>
 80099e4:	46d4      	mov	ip, sl
 80099e6:	e7b3      	b.n	8009950 <__multiply+0x8c>
 80099e8:	46e0      	mov	r8, ip
 80099ea:	e7dd      	b.n	80099a8 <__multiply+0xe4>
 80099ec:	3e01      	subs	r6, #1
 80099ee:	e799      	b.n	8009924 <__multiply+0x60>

080099f0 <__pow5mult>:
 80099f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f4:	4615      	mov	r5, r2
 80099f6:	f012 0203 	ands.w	r2, r2, #3
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	d007      	beq.n	8009a10 <__pow5mult+0x20>
 8009a00:	3a01      	subs	r2, #1
 8009a02:	4c21      	ldr	r4, [pc, #132]	; (8009a88 <__pow5mult+0x98>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a0a:	f7ff fe8b 	bl	8009724 <__multadd>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	10ad      	asrs	r5, r5, #2
 8009a12:	d035      	beq.n	8009a80 <__pow5mult+0x90>
 8009a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a16:	b93c      	cbnz	r4, 8009a28 <__pow5mult+0x38>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f7ff fe13 	bl	8009644 <malloc>
 8009a1e:	6270      	str	r0, [r6, #36]	; 0x24
 8009a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a24:	6004      	str	r4, [r0, #0]
 8009a26:	60c4      	str	r4, [r0, #12]
 8009a28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a30:	b94c      	cbnz	r4, 8009a46 <__pow5mult+0x56>
 8009a32:	f240 2171 	movw	r1, #625	; 0x271
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff ff3b 	bl	80098b2 <__i2b>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a42:	4604      	mov	r4, r0
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	f04f 0800 	mov.w	r8, #0
 8009a4a:	07eb      	lsls	r3, r5, #31
 8009a4c:	d50a      	bpl.n	8009a64 <__pow5mult+0x74>
 8009a4e:	4639      	mov	r1, r7
 8009a50:	4622      	mov	r2, r4
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ff36 	bl	80098c4 <__multiply>
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4681      	mov	r9, r0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff fe4a 	bl	80096f6 <_Bfree>
 8009a62:	464f      	mov	r7, r9
 8009a64:	106d      	asrs	r5, r5, #1
 8009a66:	d00b      	beq.n	8009a80 <__pow5mult+0x90>
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	b938      	cbnz	r0, 8009a7c <__pow5mult+0x8c>
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff ff27 	bl	80098c4 <__multiply>
 8009a76:	6020      	str	r0, [r4, #0]
 8009a78:	f8c0 8000 	str.w	r8, [r0]
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	e7e4      	b.n	8009a4a <__pow5mult+0x5a>
 8009a80:	4638      	mov	r0, r7
 8009a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a86:	bf00      	nop
 8009a88:	0800a620 	.word	0x0800a620

08009a8c <__lshift>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	6849      	ldr	r1, [r1, #4]
 8009a9a:	eb0a 0903 	add.w	r9, sl, r3
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4616      	mov	r6, r2
 8009aa4:	f109 0501 	add.w	r5, r9, #1
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	db32      	blt.n	8009b12 <__lshift+0x86>
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7ff fdee 	bl	800968e <_Balloc>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	f100 0114 	add.w	r1, r0, #20
 8009aba:	461a      	mov	r2, r3
 8009abc:	4553      	cmp	r3, sl
 8009abe:	db2b      	blt.n	8009b18 <__lshift+0x8c>
 8009ac0:	6920      	ldr	r0, [r4, #16]
 8009ac2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac6:	f104 0314 	add.w	r3, r4, #20
 8009aca:	f016 021f 	ands.w	r2, r6, #31
 8009ace:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ad6:	d025      	beq.n	8009b24 <__lshift+0x98>
 8009ad8:	f1c2 0e20 	rsb	lr, r2, #32
 8009adc:	2000      	movs	r0, #0
 8009ade:	681e      	ldr	r6, [r3, #0]
 8009ae0:	468a      	mov	sl, r1
 8009ae2:	4096      	lsls	r6, r2
 8009ae4:	4330      	orrs	r0, r6
 8009ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8009aea:	f853 0b04 	ldr.w	r0, [r3], #4
 8009aee:	459c      	cmp	ip, r3
 8009af0:	fa20 f00e 	lsr.w	r0, r0, lr
 8009af4:	d814      	bhi.n	8009b20 <__lshift+0x94>
 8009af6:	6048      	str	r0, [r1, #4]
 8009af8:	b108      	cbz	r0, 8009afe <__lshift+0x72>
 8009afa:	f109 0502 	add.w	r5, r9, #2
 8009afe:	3d01      	subs	r5, #1
 8009b00:	4638      	mov	r0, r7
 8009b02:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b06:	4621      	mov	r1, r4
 8009b08:	f7ff fdf5 	bl	80096f6 <_Bfree>
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	3101      	adds	r1, #1
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	e7c7      	b.n	8009aa8 <__lshift+0x1c>
 8009b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	e7cd      	b.n	8009abc <__lshift+0x30>
 8009b20:	4651      	mov	r1, sl
 8009b22:	e7dc      	b.n	8009ade <__lshift+0x52>
 8009b24:	3904      	subs	r1, #4
 8009b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b2e:	459c      	cmp	ip, r3
 8009b30:	d8f9      	bhi.n	8009b26 <__lshift+0x9a>
 8009b32:	e7e4      	b.n	8009afe <__lshift+0x72>

08009b34 <__mcmp>:
 8009b34:	6903      	ldr	r3, [r0, #16]
 8009b36:	690a      	ldr	r2, [r1, #16]
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	b530      	push	{r4, r5, lr}
 8009b3c:	d10c      	bne.n	8009b58 <__mcmp+0x24>
 8009b3e:	0092      	lsls	r2, r2, #2
 8009b40:	3014      	adds	r0, #20
 8009b42:	3114      	adds	r1, #20
 8009b44:	1884      	adds	r4, r0, r2
 8009b46:	4411      	add	r1, r2
 8009b48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b50:	4295      	cmp	r5, r2
 8009b52:	d003      	beq.n	8009b5c <__mcmp+0x28>
 8009b54:	d305      	bcc.n	8009b62 <__mcmp+0x2e>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4618      	mov	r0, r3
 8009b5a:	bd30      	pop	{r4, r5, pc}
 8009b5c:	42a0      	cmp	r0, r4
 8009b5e:	d3f3      	bcc.n	8009b48 <__mcmp+0x14>
 8009b60:	e7fa      	b.n	8009b58 <__mcmp+0x24>
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295
 8009b66:	e7f7      	b.n	8009b58 <__mcmp+0x24>

08009b68 <__mdiff>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	4607      	mov	r7, r0
 8009b70:	4611      	mov	r1, r2
 8009b72:	4628      	mov	r0, r5
 8009b74:	4614      	mov	r4, r2
 8009b76:	f7ff ffdd 	bl	8009b34 <__mcmp>
 8009b7a:	1e06      	subs	r6, r0, #0
 8009b7c:	d108      	bne.n	8009b90 <__mdiff+0x28>
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff fd84 	bl	800968e <_Balloc>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b90:	bfa4      	itt	ge
 8009b92:	4623      	movge	r3, r4
 8009b94:	462c      	movge	r4, r5
 8009b96:	4638      	mov	r0, r7
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	bfa6      	itte	ge
 8009b9c:	461d      	movge	r5, r3
 8009b9e:	2600      	movge	r6, #0
 8009ba0:	2601      	movlt	r6, #1
 8009ba2:	f7ff fd74 	bl	800968e <_Balloc>
 8009ba6:	692b      	ldr	r3, [r5, #16]
 8009ba8:	60c6      	str	r6, [r0, #12]
 8009baa:	6926      	ldr	r6, [r4, #16]
 8009bac:	f105 0914 	add.w	r9, r5, #20
 8009bb0:	f104 0214 	add.w	r2, r4, #20
 8009bb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009bb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009bbc:	f100 0514 	add.w	r5, r0, #20
 8009bc0:	f04f 0e00 	mov.w	lr, #0
 8009bc4:	f852 ab04 	ldr.w	sl, [r2], #4
 8009bc8:	f859 4b04 	ldr.w	r4, [r9], #4
 8009bcc:	fa1e f18a 	uxtah	r1, lr, sl
 8009bd0:	b2a3      	uxth	r3, r4
 8009bd2:	1ac9      	subs	r1, r1, r3
 8009bd4:	0c23      	lsrs	r3, r4, #16
 8009bd6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009bda:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009bde:	b289      	uxth	r1, r1
 8009be0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009be4:	45c8      	cmp	r8, r9
 8009be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009bea:	4694      	mov	ip, r2
 8009bec:	f845 3b04 	str.w	r3, [r5], #4
 8009bf0:	d8e8      	bhi.n	8009bc4 <__mdiff+0x5c>
 8009bf2:	45bc      	cmp	ip, r7
 8009bf4:	d304      	bcc.n	8009c00 <__mdiff+0x98>
 8009bf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009bfa:	b183      	cbz	r3, 8009c1e <__mdiff+0xb6>
 8009bfc:	6106      	str	r6, [r0, #16]
 8009bfe:	e7c5      	b.n	8009b8c <__mdiff+0x24>
 8009c00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c04:	fa1e f381 	uxtah	r3, lr, r1
 8009c08:	141a      	asrs	r2, r3, #16
 8009c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009c18:	f845 3b04 	str.w	r3, [r5], #4
 8009c1c:	e7e9      	b.n	8009bf2 <__mdiff+0x8a>
 8009c1e:	3e01      	subs	r6, #1
 8009c20:	e7e9      	b.n	8009bf6 <__mdiff+0x8e>
	...

08009c24 <__ulp>:
 8009c24:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <__ulp+0x4c>)
 8009c26:	ee10 2a90 	vmov	r2, s1
 8009c2a:	401a      	ands	r2, r3
 8009c2c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dd04      	ble.n	8009c3e <__ulp+0x1a>
 8009c34:	2000      	movs	r0, #0
 8009c36:	4619      	mov	r1, r3
 8009c38:	ec41 0b10 	vmov	d0, r0, r1
 8009c3c:	4770      	bx	lr
 8009c3e:	425b      	negs	r3, r3
 8009c40:	151b      	asrs	r3, r3, #20
 8009c42:	2b13      	cmp	r3, #19
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	dc04      	bgt.n	8009c58 <__ulp+0x34>
 8009c4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c52:	fa42 f103 	asr.w	r1, r2, r3
 8009c56:	e7ef      	b.n	8009c38 <__ulp+0x14>
 8009c58:	3b14      	subs	r3, #20
 8009c5a:	2b1e      	cmp	r3, #30
 8009c5c:	f04f 0201 	mov.w	r2, #1
 8009c60:	bfda      	itte	le
 8009c62:	f1c3 031f 	rsble	r3, r3, #31
 8009c66:	fa02 f303 	lslle.w	r3, r2, r3
 8009c6a:	4613      	movgt	r3, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	e7e3      	b.n	8009c38 <__ulp+0x14>
 8009c70:	7ff00000 	.word	0x7ff00000

08009c74 <__b2d>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	6905      	ldr	r5, [r0, #16]
 8009c78:	f100 0714 	add.w	r7, r0, #20
 8009c7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c80:	1f2e      	subs	r6, r5, #4
 8009c82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff fdc5 	bl	8009816 <__hi0bits>
 8009c8c:	f1c0 0320 	rsb	r3, r0, #32
 8009c90:	280a      	cmp	r0, #10
 8009c92:	600b      	str	r3, [r1, #0]
 8009c94:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009d0c <__b2d+0x98>
 8009c98:	dc14      	bgt.n	8009cc4 <__b2d+0x50>
 8009c9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ca2:	42b7      	cmp	r7, r6
 8009ca4:	ea41 030c 	orr.w	r3, r1, ip
 8009ca8:	bf34      	ite	cc
 8009caa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cae:	2100      	movcs	r1, #0
 8009cb0:	3015      	adds	r0, #21
 8009cb2:	fa04 f000 	lsl.w	r0, r4, r0
 8009cb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8009cba:	ea40 0201 	orr.w	r2, r0, r1
 8009cbe:	ec43 2b10 	vmov	d0, r2, r3
 8009cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc4:	42b7      	cmp	r7, r6
 8009cc6:	bf3a      	itte	cc
 8009cc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ccc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cd0:	2100      	movcs	r1, #0
 8009cd2:	380b      	subs	r0, #11
 8009cd4:	d015      	beq.n	8009d02 <__b2d+0x8e>
 8009cd6:	4084      	lsls	r4, r0
 8009cd8:	f1c0 0520 	rsb	r5, r0, #32
 8009cdc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009ce0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009ce4:	42be      	cmp	r6, r7
 8009ce6:	fa21 fc05 	lsr.w	ip, r1, r5
 8009cea:	ea44 030c 	orr.w	r3, r4, ip
 8009cee:	bf8c      	ite	hi
 8009cf0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009cf4:	2400      	movls	r4, #0
 8009cf6:	fa01 f000 	lsl.w	r0, r1, r0
 8009cfa:	40ec      	lsrs	r4, r5
 8009cfc:	ea40 0204 	orr.w	r2, r0, r4
 8009d00:	e7dd      	b.n	8009cbe <__b2d+0x4a>
 8009d02:	ea44 030c 	orr.w	r3, r4, ip
 8009d06:	460a      	mov	r2, r1
 8009d08:	e7d9      	b.n	8009cbe <__b2d+0x4a>
 8009d0a:	bf00      	nop
 8009d0c:	3ff00000 	.word	0x3ff00000

08009d10 <__d2b>:
 8009d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	460e      	mov	r6, r1
 8009d16:	2101      	movs	r1, #1
 8009d18:	ec59 8b10 	vmov	r8, r9, d0
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	f7ff fcb6 	bl	800968e <_Balloc>
 8009d22:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d26:	4607      	mov	r7, r0
 8009d28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d2c:	bb34      	cbnz	r4, 8009d7c <__d2b+0x6c>
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	f1b8 0300 	subs.w	r3, r8, #0
 8009d34:	d027      	beq.n	8009d86 <__d2b+0x76>
 8009d36:	a802      	add	r0, sp, #8
 8009d38:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009d3c:	f7ff fd8a 	bl	8009854 <__lo0bits>
 8009d40:	9900      	ldr	r1, [sp, #0]
 8009d42:	b1f0      	cbz	r0, 8009d82 <__d2b+0x72>
 8009d44:	9a01      	ldr	r2, [sp, #4]
 8009d46:	f1c0 0320 	rsb	r3, r0, #32
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	430b      	orrs	r3, r1
 8009d50:	40c2      	lsrs	r2, r0
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	9201      	str	r2, [sp, #4]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bf14      	ite	ne
 8009d5e:	2102      	movne	r1, #2
 8009d60:	2101      	moveq	r1, #1
 8009d62:	6139      	str	r1, [r7, #16]
 8009d64:	b1c4      	cbz	r4, 8009d98 <__d2b+0x88>
 8009d66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d6a:	4404      	add	r4, r0
 8009d6c:	6034      	str	r4, [r6, #0]
 8009d6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d72:	6028      	str	r0, [r5, #0]
 8009d74:	4638      	mov	r0, r7
 8009d76:	b003      	add	sp, #12
 8009d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d80:	e7d5      	b.n	8009d2e <__d2b+0x1e>
 8009d82:	6179      	str	r1, [r7, #20]
 8009d84:	e7e7      	b.n	8009d56 <__d2b+0x46>
 8009d86:	a801      	add	r0, sp, #4
 8009d88:	f7ff fd64 	bl	8009854 <__lo0bits>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	2101      	movs	r1, #1
 8009d92:	6139      	str	r1, [r7, #16]
 8009d94:	3020      	adds	r0, #32
 8009d96:	e7e5      	b.n	8009d64 <__d2b+0x54>
 8009d98:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009da0:	6030      	str	r0, [r6, #0]
 8009da2:	6918      	ldr	r0, [r3, #16]
 8009da4:	f7ff fd37 	bl	8009816 <__hi0bits>
 8009da8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009dac:	e7e1      	b.n	8009d72 <__d2b+0x62>

08009dae <__ratio>:
 8009dae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db2:	4688      	mov	r8, r1
 8009db4:	4669      	mov	r1, sp
 8009db6:	4681      	mov	r9, r0
 8009db8:	f7ff ff5c 	bl	8009c74 <__b2d>
 8009dbc:	a901      	add	r1, sp, #4
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	ec57 6b10 	vmov	r6, r7, d0
 8009dc4:	f7ff ff56 	bl	8009c74 <__b2d>
 8009dc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dcc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009dd0:	eba3 0c02 	sub.w	ip, r3, r2
 8009dd4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dd8:	1a9b      	subs	r3, r3, r2
 8009dda:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009dde:	ec5b ab10 	vmov	sl, fp, d0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bfce      	itee	gt
 8009de6:	463a      	movgt	r2, r7
 8009de8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dec:	465a      	movle	r2, fp
 8009dee:	4659      	mov	r1, fp
 8009df0:	463d      	mov	r5, r7
 8009df2:	bfd4      	ite	le
 8009df4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009df8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	ee10 2a10 	vmov	r2, s0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7f6 fd29 	bl	800085c <__aeabi_ddiv>
 8009e0a:	ec41 0b10 	vmov	d0, r0, r1
 8009e0e:	b003      	add	sp, #12
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e14 <__copybits>:
 8009e14:	3901      	subs	r1, #1
 8009e16:	b510      	push	{r4, lr}
 8009e18:	1149      	asrs	r1, r1, #5
 8009e1a:	6914      	ldr	r4, [r2, #16]
 8009e1c:	3101      	adds	r1, #1
 8009e1e:	f102 0314 	add.w	r3, r2, #20
 8009e22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e2a:	42a3      	cmp	r3, r4
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	d303      	bcc.n	8009e38 <__copybits+0x24>
 8009e30:	2300      	movs	r3, #0
 8009e32:	428a      	cmp	r2, r1
 8009e34:	d305      	bcc.n	8009e42 <__copybits+0x2e>
 8009e36:	bd10      	pop	{r4, pc}
 8009e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3c:	f840 2b04 	str.w	r2, [r0], #4
 8009e40:	e7f3      	b.n	8009e2a <__copybits+0x16>
 8009e42:	f842 3b04 	str.w	r3, [r2], #4
 8009e46:	e7f4      	b.n	8009e32 <__copybits+0x1e>

08009e48 <__any_on>:
 8009e48:	f100 0214 	add.w	r2, r0, #20
 8009e4c:	6900      	ldr	r0, [r0, #16]
 8009e4e:	114b      	asrs	r3, r1, #5
 8009e50:	4298      	cmp	r0, r3
 8009e52:	b510      	push	{r4, lr}
 8009e54:	db11      	blt.n	8009e7a <__any_on+0x32>
 8009e56:	dd0a      	ble.n	8009e6e <__any_on+0x26>
 8009e58:	f011 011f 	ands.w	r1, r1, #31
 8009e5c:	d007      	beq.n	8009e6e <__any_on+0x26>
 8009e5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e62:	fa24 f001 	lsr.w	r0, r4, r1
 8009e66:	fa00 f101 	lsl.w	r1, r0, r1
 8009e6a:	428c      	cmp	r4, r1
 8009e6c:	d10b      	bne.n	8009e86 <__any_on+0x3e>
 8009e6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d803      	bhi.n	8009e7e <__any_on+0x36>
 8009e76:	2000      	movs	r0, #0
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e7f7      	b.n	8009e6e <__any_on+0x26>
 8009e7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e82:	2900      	cmp	r1, #0
 8009e84:	d0f5      	beq.n	8009e72 <__any_on+0x2a>
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7f6      	b.n	8009e78 <__any_on+0x30>

08009e8a <_calloc_r>:
 8009e8a:	b538      	push	{r3, r4, r5, lr}
 8009e8c:	fb02 f401 	mul.w	r4, r2, r1
 8009e90:	4621      	mov	r1, r4
 8009e92:	f000 f857 	bl	8009f44 <_malloc_r>
 8009e96:	4605      	mov	r5, r0
 8009e98:	b118      	cbz	r0, 8009ea2 <_calloc_r+0x18>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	f7fc fd25 	bl	80068ec <memset>
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	bd38      	pop	{r3, r4, r5, pc}
	...

08009ea8 <_free_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d045      	beq.n	8009f3c <_free_r+0x94>
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f0c      	subs	r4, r1, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfb8      	it	lt
 8009eba:	18e4      	addlt	r4, r4, r3
 8009ebc:	f000 fa36 	bl	800a32c <__malloc_lock>
 8009ec0:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <_free_r+0x98>)
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	b933      	cbnz	r3, 8009ed6 <_free_r+0x2e>
 8009ec8:	6063      	str	r3, [r4, #4]
 8009eca:	6014      	str	r4, [r2, #0]
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed2:	f000 ba2c 	b.w	800a32e <__malloc_unlock>
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	d90c      	bls.n	8009ef4 <_free_r+0x4c>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	1862      	adds	r2, r4, r1
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bf04      	itt	eq
 8009ee2:	681a      	ldreq	r2, [r3, #0]
 8009ee4:	685b      	ldreq	r3, [r3, #4]
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	bf04      	itt	eq
 8009eea:	1852      	addeq	r2, r2, r1
 8009eec:	6022      	streq	r2, [r4, #0]
 8009eee:	6004      	str	r4, [r0, #0]
 8009ef0:	e7ec      	b.n	8009ecc <_free_r+0x24>
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	b10a      	cbz	r2, 8009efc <_free_r+0x54>
 8009ef8:	42a2      	cmp	r2, r4
 8009efa:	d9fa      	bls.n	8009ef2 <_free_r+0x4a>
 8009efc:	6819      	ldr	r1, [r3, #0]
 8009efe:	1858      	adds	r0, r3, r1
 8009f00:	42a0      	cmp	r0, r4
 8009f02:	d10b      	bne.n	8009f1c <_free_r+0x74>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	4401      	add	r1, r0
 8009f08:	1858      	adds	r0, r3, r1
 8009f0a:	4282      	cmp	r2, r0
 8009f0c:	6019      	str	r1, [r3, #0]
 8009f0e:	d1dd      	bne.n	8009ecc <_free_r+0x24>
 8009f10:	6810      	ldr	r0, [r2, #0]
 8009f12:	6852      	ldr	r2, [r2, #4]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	4401      	add	r1, r0
 8009f18:	6019      	str	r1, [r3, #0]
 8009f1a:	e7d7      	b.n	8009ecc <_free_r+0x24>
 8009f1c:	d902      	bls.n	8009f24 <_free_r+0x7c>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	e7d3      	b.n	8009ecc <_free_r+0x24>
 8009f24:	6820      	ldr	r0, [r4, #0]
 8009f26:	1821      	adds	r1, r4, r0
 8009f28:	428a      	cmp	r2, r1
 8009f2a:	bf04      	itt	eq
 8009f2c:	6811      	ldreq	r1, [r2, #0]
 8009f2e:	6852      	ldreq	r2, [r2, #4]
 8009f30:	6062      	str	r2, [r4, #4]
 8009f32:	bf04      	itt	eq
 8009f34:	1809      	addeq	r1, r1, r0
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	605c      	str	r4, [r3, #4]
 8009f3a:	e7c7      	b.n	8009ecc <_free_r+0x24>
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000254 	.word	0x20000254

08009f44 <_malloc_r>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	1ccd      	adds	r5, r1, #3
 8009f48:	f025 0503 	bic.w	r5, r5, #3
 8009f4c:	3508      	adds	r5, #8
 8009f4e:	2d0c      	cmp	r5, #12
 8009f50:	bf38      	it	cc
 8009f52:	250c      	movcc	r5, #12
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	4606      	mov	r6, r0
 8009f58:	db01      	blt.n	8009f5e <_malloc_r+0x1a>
 8009f5a:	42a9      	cmp	r1, r5
 8009f5c:	d903      	bls.n	8009f66 <_malloc_r+0x22>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	6033      	str	r3, [r6, #0]
 8009f62:	2000      	movs	r0, #0
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	f000 f9e1 	bl	800a32c <__malloc_lock>
 8009f6a:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <_malloc_r+0xac>)
 8009f6c:	6814      	ldr	r4, [r2, #0]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	b991      	cbnz	r1, 8009f98 <_malloc_r+0x54>
 8009f72:	4c20      	ldr	r4, [pc, #128]	; (8009ff4 <_malloc_r+0xb0>)
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	b91b      	cbnz	r3, 8009f80 <_malloc_r+0x3c>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 f98f 	bl	800a29c <_sbrk_r>
 8009f7e:	6020      	str	r0, [r4, #0]
 8009f80:	4629      	mov	r1, r5
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 f98a 	bl	800a29c <_sbrk_r>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d124      	bne.n	8009fd6 <_malloc_r+0x92>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f9cc 	bl	800a32e <__malloc_unlock>
 8009f96:	e7e4      	b.n	8009f62 <_malloc_r+0x1e>
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	1b5b      	subs	r3, r3, r5
 8009f9c:	d418      	bmi.n	8009fd0 <_malloc_r+0x8c>
 8009f9e:	2b0b      	cmp	r3, #11
 8009fa0:	d90f      	bls.n	8009fc2 <_malloc_r+0x7e>
 8009fa2:	600b      	str	r3, [r1, #0]
 8009fa4:	50cd      	str	r5, [r1, r3]
 8009fa6:	18cc      	adds	r4, r1, r3
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 f9c0 	bl	800a32e <__malloc_unlock>
 8009fae:	f104 000b 	add.w	r0, r4, #11
 8009fb2:	1d23      	adds	r3, r4, #4
 8009fb4:	f020 0007 	bic.w	r0, r0, #7
 8009fb8:	1ac3      	subs	r3, r0, r3
 8009fba:	d0d3      	beq.n	8009f64 <_malloc_r+0x20>
 8009fbc:	425a      	negs	r2, r3
 8009fbe:	50e2      	str	r2, [r4, r3]
 8009fc0:	e7d0      	b.n	8009f64 <_malloc_r+0x20>
 8009fc2:	428c      	cmp	r4, r1
 8009fc4:	684b      	ldr	r3, [r1, #4]
 8009fc6:	bf16      	itet	ne
 8009fc8:	6063      	strne	r3, [r4, #4]
 8009fca:	6013      	streq	r3, [r2, #0]
 8009fcc:	460c      	movne	r4, r1
 8009fce:	e7eb      	b.n	8009fa8 <_malloc_r+0x64>
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	6849      	ldr	r1, [r1, #4]
 8009fd4:	e7cc      	b.n	8009f70 <_malloc_r+0x2c>
 8009fd6:	1cc4      	adds	r4, r0, #3
 8009fd8:	f024 0403 	bic.w	r4, r4, #3
 8009fdc:	42a0      	cmp	r0, r4
 8009fde:	d005      	beq.n	8009fec <_malloc_r+0xa8>
 8009fe0:	1a21      	subs	r1, r4, r0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f000 f95a 	bl	800a29c <_sbrk_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d0cf      	beq.n	8009f8c <_malloc_r+0x48>
 8009fec:	6025      	str	r5, [r4, #0]
 8009fee:	e7db      	b.n	8009fa8 <_malloc_r+0x64>
 8009ff0:	20000254 	.word	0x20000254
 8009ff4:	20000258 	.word	0x20000258

08009ff8 <__ssputs_r>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	688e      	ldr	r6, [r1, #8]
 8009ffe:	429e      	cmp	r6, r3
 800a000:	4682      	mov	sl, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4690      	mov	r8, r2
 800a006:	4699      	mov	r9, r3
 800a008:	d837      	bhi.n	800a07a <__ssputs_r+0x82>
 800a00a:	898a      	ldrh	r2, [r1, #12]
 800a00c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a010:	d031      	beq.n	800a076 <__ssputs_r+0x7e>
 800a012:	6825      	ldr	r5, [r4, #0]
 800a014:	6909      	ldr	r1, [r1, #16]
 800a016:	1a6f      	subs	r7, r5, r1
 800a018:	6965      	ldr	r5, [r4, #20]
 800a01a:	2302      	movs	r3, #2
 800a01c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a020:	fb95 f5f3 	sdiv	r5, r5, r3
 800a024:	f109 0301 	add.w	r3, r9, #1
 800a028:	443b      	add	r3, r7
 800a02a:	429d      	cmp	r5, r3
 800a02c:	bf38      	it	cc
 800a02e:	461d      	movcc	r5, r3
 800a030:	0553      	lsls	r3, r2, #21
 800a032:	d530      	bpl.n	800a096 <__ssputs_r+0x9e>
 800a034:	4629      	mov	r1, r5
 800a036:	f7ff ff85 	bl	8009f44 <_malloc_r>
 800a03a:	4606      	mov	r6, r0
 800a03c:	b950      	cbnz	r0, 800a054 <__ssputs_r+0x5c>
 800a03e:	230c      	movs	r3, #12
 800a040:	f8ca 3000 	str.w	r3, [sl]
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	463a      	mov	r2, r7
 800a056:	6921      	ldr	r1, [r4, #16]
 800a058:	f7ff fb0e 	bl	8009678 <memcpy>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	6126      	str	r6, [r4, #16]
 800a06a:	6165      	str	r5, [r4, #20]
 800a06c:	443e      	add	r6, r7
 800a06e:	1bed      	subs	r5, r5, r7
 800a070:	6026      	str	r6, [r4, #0]
 800a072:	60a5      	str	r5, [r4, #8]
 800a074:	464e      	mov	r6, r9
 800a076:	454e      	cmp	r6, r9
 800a078:	d900      	bls.n	800a07c <__ssputs_r+0x84>
 800a07a:	464e      	mov	r6, r9
 800a07c:	4632      	mov	r2, r6
 800a07e:	4641      	mov	r1, r8
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	f000 f93a 	bl	800a2fa <memmove>
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	1b9b      	subs	r3, r3, r6
 800a08a:	60a3      	str	r3, [r4, #8]
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	441e      	add	r6, r3
 800a090:	6026      	str	r6, [r4, #0]
 800a092:	2000      	movs	r0, #0
 800a094:	e7dc      	b.n	800a050 <__ssputs_r+0x58>
 800a096:	462a      	mov	r2, r5
 800a098:	f000 f94a 	bl	800a330 <_realloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d1e2      	bne.n	800a068 <__ssputs_r+0x70>
 800a0a2:	6921      	ldr	r1, [r4, #16]
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	f7ff feff 	bl	8009ea8 <_free_r>
 800a0aa:	e7c8      	b.n	800a03e <__ssputs_r+0x46>

0800a0ac <_svfiprintf_r>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	898b      	ldrh	r3, [r1, #12]
 800a0b4:	061f      	lsls	r7, r3, #24
 800a0b6:	b09d      	sub	sp, #116	; 0x74
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	4616      	mov	r6, r2
 800a0be:	d50f      	bpl.n	800a0e0 <_svfiprintf_r+0x34>
 800a0c0:	690b      	ldr	r3, [r1, #16]
 800a0c2:	b96b      	cbnz	r3, 800a0e0 <_svfiprintf_r+0x34>
 800a0c4:	2140      	movs	r1, #64	; 0x40
 800a0c6:	f7ff ff3d 	bl	8009f44 <_malloc_r>
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	6120      	str	r0, [r4, #16]
 800a0ce:	b928      	cbnz	r0, 800a0dc <_svfiprintf_r+0x30>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	f8c8 3000 	str.w	r3, [r8]
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0da:	e0c8      	b.n	800a26e <_svfiprintf_r+0x1c2>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ea:	2330      	movs	r3, #48	; 0x30
 800a0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f0:	9503      	str	r5, [sp, #12]
 800a0f2:	f04f 0b01 	mov.w	fp, #1
 800a0f6:	4637      	mov	r7, r6
 800a0f8:	463d      	mov	r5, r7
 800a0fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0fe:	b10b      	cbz	r3, 800a104 <_svfiprintf_r+0x58>
 800a100:	2b25      	cmp	r3, #37	; 0x25
 800a102:	d13e      	bne.n	800a182 <_svfiprintf_r+0xd6>
 800a104:	ebb7 0a06 	subs.w	sl, r7, r6
 800a108:	d00b      	beq.n	800a122 <_svfiprintf_r+0x76>
 800a10a:	4653      	mov	r3, sl
 800a10c:	4632      	mov	r2, r6
 800a10e:	4621      	mov	r1, r4
 800a110:	4640      	mov	r0, r8
 800a112:	f7ff ff71 	bl	8009ff8 <__ssputs_r>
 800a116:	3001      	adds	r0, #1
 800a118:	f000 80a4 	beq.w	800a264 <_svfiprintf_r+0x1b8>
 800a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11e:	4453      	add	r3, sl
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	783b      	ldrb	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 809d 	beq.w	800a264 <_svfiprintf_r+0x1b8>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295
 800a130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a13c:	931a      	str	r3, [sp, #104]	; 0x68
 800a13e:	462f      	mov	r7, r5
 800a140:	2205      	movs	r2, #5
 800a142:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a146:	4850      	ldr	r0, [pc, #320]	; (800a288 <_svfiprintf_r+0x1dc>)
 800a148:	f7f6 f852 	bl	80001f0 <memchr>
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	b9d0      	cbnz	r0, 800a186 <_svfiprintf_r+0xda>
 800a150:	06d9      	lsls	r1, r3, #27
 800a152:	bf44      	itt	mi
 800a154:	2220      	movmi	r2, #32
 800a156:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a15a:	071a      	lsls	r2, r3, #28
 800a15c:	bf44      	itt	mi
 800a15e:	222b      	movmi	r2, #43	; 0x2b
 800a160:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a164:	782a      	ldrb	r2, [r5, #0]
 800a166:	2a2a      	cmp	r2, #42	; 0x2a
 800a168:	d015      	beq.n	800a196 <_svfiprintf_r+0xea>
 800a16a:	9a07      	ldr	r2, [sp, #28]
 800a16c:	462f      	mov	r7, r5
 800a16e:	2000      	movs	r0, #0
 800a170:	250a      	movs	r5, #10
 800a172:	4639      	mov	r1, r7
 800a174:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a178:	3b30      	subs	r3, #48	; 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d94d      	bls.n	800a21a <_svfiprintf_r+0x16e>
 800a17e:	b1b8      	cbz	r0, 800a1b0 <_svfiprintf_r+0x104>
 800a180:	e00f      	b.n	800a1a2 <_svfiprintf_r+0xf6>
 800a182:	462f      	mov	r7, r5
 800a184:	e7b8      	b.n	800a0f8 <_svfiprintf_r+0x4c>
 800a186:	4a40      	ldr	r2, [pc, #256]	; (800a288 <_svfiprintf_r+0x1dc>)
 800a188:	1a80      	subs	r0, r0, r2
 800a18a:	fa0b f000 	lsl.w	r0, fp, r0
 800a18e:	4318      	orrs	r0, r3
 800a190:	9004      	str	r0, [sp, #16]
 800a192:	463d      	mov	r5, r7
 800a194:	e7d3      	b.n	800a13e <_svfiprintf_r+0x92>
 800a196:	9a03      	ldr	r2, [sp, #12]
 800a198:	1d11      	adds	r1, r2, #4
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	9103      	str	r1, [sp, #12]
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	db01      	blt.n	800a1a6 <_svfiprintf_r+0xfa>
 800a1a2:	9207      	str	r2, [sp, #28]
 800a1a4:	e004      	b.n	800a1b0 <_svfiprintf_r+0x104>
 800a1a6:	4252      	negs	r2, r2
 800a1a8:	f043 0302 	orr.w	r3, r3, #2
 800a1ac:	9207      	str	r2, [sp, #28]
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	783b      	ldrb	r3, [r7, #0]
 800a1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b4:	d10c      	bne.n	800a1d0 <_svfiprintf_r+0x124>
 800a1b6:	787b      	ldrb	r3, [r7, #1]
 800a1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ba:	d133      	bne.n	800a224 <_svfiprintf_r+0x178>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	9203      	str	r2, [sp, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfb8      	it	lt
 800a1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1cc:	3702      	adds	r7, #2
 800a1ce:	9305      	str	r3, [sp, #20]
 800a1d0:	4d2e      	ldr	r5, [pc, #184]	; (800a28c <_svfiprintf_r+0x1e0>)
 800a1d2:	7839      	ldrb	r1, [r7, #0]
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7f6 f80a 	bl	80001f0 <memchr>
 800a1dc:	b138      	cbz	r0, 800a1ee <_svfiprintf_r+0x142>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	1b40      	subs	r0, r0, r5
 800a1e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	4303      	orrs	r3, r0
 800a1ea:	3701      	adds	r7, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	7839      	ldrb	r1, [r7, #0]
 800a1f0:	4827      	ldr	r0, [pc, #156]	; (800a290 <_svfiprintf_r+0x1e4>)
 800a1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1f6:	2206      	movs	r2, #6
 800a1f8:	1c7e      	adds	r6, r7, #1
 800a1fa:	f7f5 fff9 	bl	80001f0 <memchr>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d038      	beq.n	800a274 <_svfiprintf_r+0x1c8>
 800a202:	4b24      	ldr	r3, [pc, #144]	; (800a294 <_svfiprintf_r+0x1e8>)
 800a204:	bb13      	cbnz	r3, 800a24c <_svfiprintf_r+0x1a0>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	3307      	adds	r3, #7
 800a20a:	f023 0307 	bic.w	r3, r3, #7
 800a20e:	3308      	adds	r3, #8
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a214:	444b      	add	r3, r9
 800a216:	9309      	str	r3, [sp, #36]	; 0x24
 800a218:	e76d      	b.n	800a0f6 <_svfiprintf_r+0x4a>
 800a21a:	fb05 3202 	mla	r2, r5, r2, r3
 800a21e:	2001      	movs	r0, #1
 800a220:	460f      	mov	r7, r1
 800a222:	e7a6      	b.n	800a172 <_svfiprintf_r+0xc6>
 800a224:	2300      	movs	r3, #0
 800a226:	3701      	adds	r7, #1
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	4619      	mov	r1, r3
 800a22c:	250a      	movs	r5, #10
 800a22e:	4638      	mov	r0, r7
 800a230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a234:	3a30      	subs	r2, #48	; 0x30
 800a236:	2a09      	cmp	r2, #9
 800a238:	d903      	bls.n	800a242 <_svfiprintf_r+0x196>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0c8      	beq.n	800a1d0 <_svfiprintf_r+0x124>
 800a23e:	9105      	str	r1, [sp, #20]
 800a240:	e7c6      	b.n	800a1d0 <_svfiprintf_r+0x124>
 800a242:	fb05 2101 	mla	r1, r5, r1, r2
 800a246:	2301      	movs	r3, #1
 800a248:	4607      	mov	r7, r0
 800a24a:	e7f0      	b.n	800a22e <_svfiprintf_r+0x182>
 800a24c:	ab03      	add	r3, sp, #12
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4622      	mov	r2, r4
 800a252:	4b11      	ldr	r3, [pc, #68]	; (800a298 <_svfiprintf_r+0x1ec>)
 800a254:	a904      	add	r1, sp, #16
 800a256:	4640      	mov	r0, r8
 800a258:	f7fc fbe4 	bl	8006a24 <_printf_float>
 800a25c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a260:	4681      	mov	r9, r0
 800a262:	d1d6      	bne.n	800a212 <_svfiprintf_r+0x166>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	f53f af35 	bmi.w	800a0d6 <_svfiprintf_r+0x2a>
 800a26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26e:	b01d      	add	sp, #116	; 0x74
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	ab03      	add	r3, sp, #12
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4622      	mov	r2, r4
 800a27a:	4b07      	ldr	r3, [pc, #28]	; (800a298 <_svfiprintf_r+0x1ec>)
 800a27c:	a904      	add	r1, sp, #16
 800a27e:	4640      	mov	r0, r8
 800a280:	f7fc fe86 	bl	8006f90 <_printf_i>
 800a284:	e7ea      	b.n	800a25c <_svfiprintf_r+0x1b0>
 800a286:	bf00      	nop
 800a288:	0800a62c 	.word	0x0800a62c
 800a28c:	0800a632 	.word	0x0800a632
 800a290:	0800a636 	.word	0x0800a636
 800a294:	08006a25 	.word	0x08006a25
 800a298:	08009ff9 	.word	0x08009ff9

0800a29c <_sbrk_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4c06      	ldr	r4, [pc, #24]	; (800a2b8 <_sbrk_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	f7f7 f808 	bl	80012bc <_sbrk>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_sbrk_r+0x1a>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_sbrk_r+0x1a>
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	20000bfc 	.word	0x20000bfc

0800a2bc <strncmp>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	b16a      	cbz	r2, 800a2dc <strncmp+0x20>
 800a2c0:	3901      	subs	r1, #1
 800a2c2:	1884      	adds	r4, r0, r2
 800a2c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a2c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d103      	bne.n	800a2d8 <strncmp+0x1c>
 800a2d0:	42a0      	cmp	r0, r4
 800a2d2:	d001      	beq.n	800a2d8 <strncmp+0x1c>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f5      	bne.n	800a2c4 <strncmp+0x8>
 800a2d8:	1a98      	subs	r0, r3, r2
 800a2da:	bd10      	pop	{r4, pc}
 800a2dc:	4610      	mov	r0, r2
 800a2de:	e7fc      	b.n	800a2da <strncmp+0x1e>

0800a2e0 <__ascii_wctomb>:
 800a2e0:	b149      	cbz	r1, 800a2f6 <__ascii_wctomb+0x16>
 800a2e2:	2aff      	cmp	r2, #255	; 0xff
 800a2e4:	bf85      	ittet	hi
 800a2e6:	238a      	movhi	r3, #138	; 0x8a
 800a2e8:	6003      	strhi	r3, [r0, #0]
 800a2ea:	700a      	strbls	r2, [r1, #0]
 800a2ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2f0:	bf98      	it	ls
 800a2f2:	2001      	movls	r0, #1
 800a2f4:	4770      	bx	lr
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4770      	bx	lr

0800a2fa <memmove>:
 800a2fa:	4288      	cmp	r0, r1
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	eb01 0302 	add.w	r3, r1, r2
 800a302:	d807      	bhi.n	800a314 <memmove+0x1a>
 800a304:	1e42      	subs	r2, r0, #1
 800a306:	4299      	cmp	r1, r3
 800a308:	d00a      	beq.n	800a320 <memmove+0x26>
 800a30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a30e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a312:	e7f8      	b.n	800a306 <memmove+0xc>
 800a314:	4283      	cmp	r3, r0
 800a316:	d9f5      	bls.n	800a304 <memmove+0xa>
 800a318:	1881      	adds	r1, r0, r2
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	42d3      	cmn	r3, r2
 800a31e:	d100      	bne.n	800a322 <memmove+0x28>
 800a320:	bd10      	pop	{r4, pc}
 800a322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a326:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a32a:	e7f7      	b.n	800a31c <memmove+0x22>

0800a32c <__malloc_lock>:
 800a32c:	4770      	bx	lr

0800a32e <__malloc_unlock>:
 800a32e:	4770      	bx	lr

0800a330 <_realloc_r>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	4607      	mov	r7, r0
 800a334:	4614      	mov	r4, r2
 800a336:	460e      	mov	r6, r1
 800a338:	b921      	cbnz	r1, 800a344 <_realloc_r+0x14>
 800a33a:	4611      	mov	r1, r2
 800a33c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a340:	f7ff be00 	b.w	8009f44 <_malloc_r>
 800a344:	b922      	cbnz	r2, 800a350 <_realloc_r+0x20>
 800a346:	f7ff fdaf 	bl	8009ea8 <_free_r>
 800a34a:	4625      	mov	r5, r4
 800a34c:	4628      	mov	r0, r5
 800a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a350:	f000 f814 	bl	800a37c <_malloc_usable_size_r>
 800a354:	42a0      	cmp	r0, r4
 800a356:	d20f      	bcs.n	800a378 <_realloc_r+0x48>
 800a358:	4621      	mov	r1, r4
 800a35a:	4638      	mov	r0, r7
 800a35c:	f7ff fdf2 	bl	8009f44 <_malloc_r>
 800a360:	4605      	mov	r5, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d0f2      	beq.n	800a34c <_realloc_r+0x1c>
 800a366:	4631      	mov	r1, r6
 800a368:	4622      	mov	r2, r4
 800a36a:	f7ff f985 	bl	8009678 <memcpy>
 800a36e:	4631      	mov	r1, r6
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff fd99 	bl	8009ea8 <_free_r>
 800a376:	e7e9      	b.n	800a34c <_realloc_r+0x1c>
 800a378:	4635      	mov	r5, r6
 800a37a:	e7e7      	b.n	800a34c <_realloc_r+0x1c>

0800a37c <_malloc_usable_size_r>:
 800a37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a380:	1f18      	subs	r0, r3, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	bfbc      	itt	lt
 800a386:	580b      	ldrlt	r3, [r1, r0]
 800a388:	18c0      	addlt	r0, r0, r3
 800a38a:	4770      	bx	lr

0800a38c <_init>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr

0800a398 <_fini>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr
